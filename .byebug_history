q
Film.count
Film.last
created_resource
created_fresource
Film.count
q
example.exception
example
q
dir_name
q
self.attachments
q
File.join "sss/", "ggg"
File.join "sss", "ggg"
File.join_path "sss", "ggg"
Dir.join_path "sss", "ggg"
Dir.join "sss", "ggg"
self.attributes.select { |key,_| key.match(/_file$/) }
self.attributes.select{|k,v| k["_file"]}
self.attributes.select{|k,v| false}
self.attributes.select{|k,v| true}
self.attributes
self.presentative_attributes
self
q
example
example.exception
q
case model{when Film then puts "fff"}
case model
case model\nwhen Film\nputs "fff"\nend
case model;when Film;puts "fff";end
next
model == Film
model
 send("new_#{model_name}_path")
next
q
example
exaple
q
example.exception
q
example
example.exception
q
model_name
example.exception
q
example.exception
q
qy
example.methods
example
q
Film.destroy_all
Film.last
Film.count
example.exception
q
Hash.new('poster': 'jpg', 'video': 'avi')
Hash.new { 'poster': 'jpg', 'video': 'avi' }
attachments.size
attachments
key
value
key
q
Film.table_name
ActiveRecord::Base.connection.execute("TRUNCATE films RESTART IDENTITY")
Film.create name: "aaa"
ActiveRecord::Base.connection.execute("TRUNCATE films RESTART IDENTITY")
Film.create name: "aaa"
ActiveRecord::Base.connection.execute("TRUNCATE films")
Film.create name: "aaa"
ActiveRecord::Base.connection.execute("TRUNCATE films RESTART IDENTITY")
Film.truncate
Film.create name: "aaa"
Film.create
Film.truncate_table
Film.truncate
Film.count
Film.destroy_all
Film.count
q
key
q
"#{Time.now.to_f}.jpg"
"#{Time.now.to_i}.jpg"
"#{Time.now.to_f}.jpg"
Time.now.m
"#{Time.now.to_i}.jpg"
"#{Time.now}.jpg"
Hash.new
Hash()
Hash
attributes
value.original_filename
value.original_filename.sub(/^.+(\.\w+)$/, "#{attributes[:id]}#{Regexp.last_match}")
        )
          /^.+(\.\w+)$/, "#{attributes[:id]}#{Regexp.last_match}"
value.original_filename.sub(
value.original_filename
new_name
"uploads/#{dir}/#{new_name}"
c
model
c
@resource.preview_file_name
@resource.valid?
c
preview_file_name
self
q
@resource = model.create resource_params
c
Film.destroy_all
@resource.errors
@resource = model.create resource_params
q
@resource_errors
q
@resource.preview_file_name
c
"aaaabbbb"["ab"]
"aaaabbbb"["aa"]
FileUtils.mv resource_params['preview_file_path'].path, "/home/home/Desktop/aaa.jpg"
FileUtils.mv resource_params['preview_file_path'].path, "/tmp/aaa.jpg"
FileUtils.mv
resource_params['preview_file_path'].content_type
resource_params['preview_file_path'].methods.select{|m| m.to_s.include? "type"}
resource_params['preview_file_path'].methods.select{|m| m.to_s.include? "ext"}
resource_params['preview_file_path'].methods.select{|m| m.to_s.include? "exten"}
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_match.to_s)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_match)
Regexp.methods.select{|m| m.to_s.include? "match"}
Regexp.methods
Regexp
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.matched)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.match)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_matches)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_match)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+'\1')
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}${$1}")
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}$1")
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}\1")
"aaabbbfff".sub(/^.+(\.\w+)$/, "#{444}\1")
"aaabbbfff"[/aaa(.+)/,1]
"aaabbbfff"[/aaa(.+)/,"444"+1]
"aaabbbfff"[/aaa(.+)/,1]
"aaabbbfff"[/aaa/]
"aaabbbfff"[/aaa/,1]
"aaabbbfff"[/aaa/,"444"]
resource_params['preview_file_path'].original_filename
resource_params['preview_file_path'].file_name
resource_params['preview_file_path'].filename
resource_params['preview_file_path'].path
resource_params['preview_file_path'].methods
resource_params['preview_file_path'].name
resource_params['preview_file_path'].class
FileUtils
resource_params['preview_file_path'].tempfile.winsize
resource_params['preview_file_path'].tempfile.beep
resource_params['preview_file_path'].tempfile.methods
resource_params['preview_file_path'].to_io
resource_params['preview_file_path'].tempfile
resource_params['preview_file_path'].headers
resource_params['preview_file_path'].path
resource_params['preview_file_path'].size
resource_params['preview_file_path'].methods
resource_params['preview_file_path']
q
SmtpAccount
q
smodel
q
smodel
q
smodel
q
smodel
q
model
q
model
subject(:model)
quit
subject.new
subject.class
subject.new.model
subject.model
subject
self.model
self
model
request.path[%r(^/([^/]+).*$), 1].classify.constantize
request.path
q
request.path
request.path[%r(^/([^/]+).*$), 1]
request
request.path[%r(^/([^/]+).*$), 1].classify.constantize
subject.methods.select{|m| m.to_s.include? "instance"}
subject.instance_methods
subject
q
request.path[%r(^/(.+?)/.+$), 1]
request.path[%r(/(.+?)/new), 1]
request.path[%r(/(.+?)/new),1]
request.path[/\/(.+?)\/new/,1]
request.path[/\/(.+)\/new/,1]
request.path[/\/(\w+)\/new/,1]
request.path[/\/(films)\/new/,1]
request.path['/(films)/new',1]
request.path["/(films)/new",1]
request.path
request
films_path
q
films_path
params
q
params
methods
_routes.routes
_routes.methods
_routes
_routhes
_routnes
_routhnes
methods
q
"#{controller_name}/#{action_name}"
@resource and @resource.errors.any?
action_name
q
self.public_methods
self.singleton_methods
self.methods.select{|m| m.to_s.include? "method" }
self.methods.select{|m| m.to_s.include? "attr" }
self.methods.select{|m| m.to_s.include? "variable" }
self.instance_variable_get("@controller_name")
self.instance_variable_get("controller_name")
self.methods.select{|m| m.to_s.include? "instance" }
self.controller_name = "aaa"
self.controller_name
self.controller.name
method("controller_name")
method("controller_name=")
q
controller_name
ActionController::Metal.redefine_method(:controller_name) { "aaa" }
method("puts")
method("controller_name")
