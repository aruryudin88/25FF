q
smodel
q
smodel
q
smodel
q
smodel
q
model
q
model
subject(:model)
quit
subject.new
subject.class
subject.new.model
subject.model
subject
self.model
self
model
request.path[%r(^/([^/]+).*$), 1].classify.constantize
request.path
q
request.path
request.path[%r(^/([^/]+).*$), 1]
request
request.path[%r(^/([^/]+).*$), 1].classify.constantize
subject.methods.select{|m| m.to_s.include? "instance"}
subject.instance_methods
subject
q
request.path[%r(^/(.+?)/.+$), 1]
request.path[%r(/(.+?)/new), 1]
request.path[%r(/(.+?)/new),1]
request.path[/\/(.+?)\/new/,1]
request.path[/\/(.+)\/new/,1]
request.path[/\/(\w+)\/new/,1]
request.path[/\/(films)\/new/,1]
request.path['/(films)/new',1]
request.path["/(films)/new",1]
request.path
request
films_path
q
films_path
params
q
params
methods
_routes.routes
_routes.methods
_routes
_routhes
_routnes
_routhnes
methods
q
"#{controller_name}/#{action_name}"
@resource and @resource.errors.any?
action_name
q
self.public_methods
self.singleton_methods
self.methods.select{|m| m.to_s.include? "method" }
self.methods.select{|m| m.to_s.include? "attr" }
self.methods.select{|m| m.to_s.include? "variable" }
self.instance_variable_get("@controller_name")
self.instance_variable_get("controller_name")
self.methods.select{|m| m.to_s.include? "instance" }
self.controller_name = "aaa"
self.controller_name
self.controller.name
method("controller_name")
method("controller_name=")
q
controller_name
ActionController::Metal.redefine_method(:controller_name) { "aaa" }
method("puts")
method("controller_name")
controller_name
self.singleton_class.class.redefine_method(:controller_name) { "aaa" }
q
controller_name
self.controller_name
self.new.controller_name
self.controller_name
controller_name
self.singleton_class.class.redefine_method(:controller_name) { "aaa" }
self.singleton_class
self.redefine_method(:controller_name) { "aaa" }
controller_name
self.class.redefine_method(:controller_name) { "aaa" }
self.class.redefine_method :controller_name { "aaa" }
self.class.redefine_method :controller_name do
controller_name
self.class.redefine_method
self.class.methods.select{|m| m.to_s.include? "define"}
self.class.define_method
self.define
self.define_method
q
controller_name
FilmsController.controller_name
FilmsController.new.controller_name
FilmsController
method("controller_name")
method :controller_name
self.class
self
q
controller_name
controller_name = "resources"
controller_name
kc
kb
ka
q
c
b
a
q
action_name
action_namer
q
subject
methods
q
subject
methods
described_class.name.classify
described_class.classify
described_class
q
c
example.location
example.methods
example
c
@model
@resource.errors
@resource
c
@resource.errors.class
@resource.errors.instance_variable_get(:@base)
@resource.instance_variable_get(:@base)
@resource
resource
q
example.exception
q
example.exception
c
example.exception
q
created_film
example
c
q
c
created_film
example.location
      expect(page).to have_selector(error_li, text: "name is too long")
have_selector(error_li, text: "name is too long")
created_film
tln
example.location
example
c
created_film
example
File.open("/home/home/Desktop/a.html", "w+") {|f| f.write page.body}
example.location
c
0xA432
0x A432
0 xA432
0xA432
\xA432
\x00
0.chr "utf-8"
0.chr
rand 1..4
Film.random_value_of(:name)
random_name.class
random_name
rnm
c
example.location
q
c
page
c
example.location
example.superclass
example.class
example.parent
example.context
example.methods
File.open("/home/home/Desktop/a.html", "w+") {|f| f.write page.body}
File.open("/home/home/Desctop/a.html", "r+") {|f| f.write page.body}
File.open("/home/home/Desctop/a.html", "c") {|f| f.write page.body}
File.open("/home/home/Desctop/a.html", "w") {|f| f.write page.body}
File.open("/home/home/Desctop/a.html", "w+") {|f| f.write page.body}
page.body
page.methods
page
page'
example.exception
example.methods
stack
trace
example
c
Film.last
Film
created_film
example
c
page.find("#new_film").serialize
page.find_by_xpath("#new_film>input[name=authenticity_token]")
page.find_css("#new_film>input[name=authenticity_token]")
page.find("#new_film").methods
page.find("#new_film")
page.find_all("#new_film>input[type=hidden]")
page.find("#new_film>input[name='authenticity_token']")
page.find("#new_film>input[name=authenticity_token]")
page.find("#new_film>input[type=hidden]").size
page.find("#new_film>input[type=hidden]").length
page.find("#new_film>input[type=hidden]").count
page.find("#new_film>input[type=hidden]")
page.find("#new_film>input")
page.find("#new_film")
page.find("#new_film>input[name=authenticity_token]")
page.find("#new_film/input[name=authenticity_token]")
page.find("/new_film/input[name=authenticity_token]")
page.find_by_css("#new_film>input[name=authenticity_token]")
c
self.method(:value)
method(:value)
value
step
ccc
q
next
step
m
up
step
up
out
uot
step
c
self.class.validators_on
