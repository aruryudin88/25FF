q
value.content_type["video/"]
value.content_type["video"]
value.content_type
value.type
value
movie
q
File.extname(value.path)
File.extname(value.name)
File.extname(value.file_name)
File.extname(value.filename)
File.extname(value.filenam,e)
File.extname(value)
value.tempfile.methods.select{|m| m.to_s.include? "mime"}
value.tempfile.methods.select{|m| m.to_s.include? "mimr"}
value.tempfile.methods.select{|m| m.to_s.include? "type"}
value.tempfile.methods.select{|m| m.to_s.include? "ext"}
value.tempfile.methods.select{|m| m.to_s.include? "exten"}
value.tempfile.methods
value.tempfile
value.methods
value
q
File.exist?(File.join(UPLOADS_DIR, key.pluralize, Rails.env, "#{file_name}"))
file_name = "1.avi"
File.exist?(File.join(UPLOADS_DIR, key.pluralize, Rails.env, "#{file_name}"))
File.join(UPLOADS_DIR, key.pluralize, Rails.env, "#{file_name}")
File.exist?(File.join(UPLOADS_DIR, key.pluralize, Rails.env, "#{file_name}"))
File.join(UPLOADS_DIR, key.pluralize, Rails.env, "#{file_name}")
movie.valid?
movie.vlid?
q
c.attr_accessor :attt
self.attt
attr_accessor :attt
attr_accessor
q
self.read_attribute_before_type_cast('video_file')
q
self.read_attribute_before_type_cast('video_file')
q
self.read_attribute_before_type_cast('video_file')
self
q
self
self.id
q
self.video_file
q
self.read_attribute_before_type_cast('video_file')
self.attributes_before_type_cast
self.attributes_before_type_cast(:video_file)
self.video_file
self
q
self.video_file
self
q
attribute_accessible
attr_accessible
attr_accessor
q
name
methods
self
ccc
c
q
model
controller
request.path[%r(^/([^/]+)), 1]
request.path[%r(^/([^/]+)), 1].classify
request.path[%r(^/([^/]+)), 1].classify.constantize
request.path[%r(^/([^/]+)), 1]
request.path[%r(^/([^/]+))]
request.path
request.methods
request.to_param
request.to_params
request.base_url
request.path_info
request.script_name
request.fresh?
request.parameters
request.parameter
request.params
request.optional_port
request.media_type
request.flash
request.server_software
request.methods
request
q
self
attachments
q
example.exception
example
q
Y
Q
q
page.body
page.methods
page
example
q
Film.count
Film.last
created_resource
created_fresource
Film.count
q
example.exception
example
q
dir_name
q
self.attachments
q
File.join "sss/", "ggg"
File.join "sss", "ggg"
File.join_path "sss", "ggg"
Dir.join_path "sss", "ggg"
Dir.join "sss", "ggg"
self.attributes.select { |key,_| key.match(/_file$/) }
self.attributes.select{|k,v| k["_file"]}
self.attributes.select{|k,v| false}
self.attributes.select{|k,v| true}
self.attributes
self.presentative_attributes
self
q
example
example.exception
q
case model{when Film then puts "fff"}
case model
case model\nwhen Film\nputs "fff"\nend
case model;when Film;puts "fff";end
next
model == Film
model
 send("new_#{model_name}_path")
next
q
example
exaple
q
example.exception
q
example
example.exception
q
model_name
example.exception
q
example.exception
q
qy
example.methods
example
q
Film.destroy_all
Film.last
Film.count
example.exception
q
Hash.new('poster': 'jpg', 'video': 'avi')
Hash.new { 'poster': 'jpg', 'video': 'avi' }
attachments.size
attachments
key
value
key
q
Film.table_name
ActiveRecord::Base.connection.execute("TRUNCATE films RESTART IDENTITY")
Film.create name: "aaa"
ActiveRecord::Base.connection.execute("TRUNCATE films RESTART IDENTITY")
Film.create name: "aaa"
ActiveRecord::Base.connection.execute("TRUNCATE films")
Film.create name: "aaa"
ActiveRecord::Base.connection.execute("TRUNCATE films RESTART IDENTITY")
Film.truncate
Film.create name: "aaa"
Film.create
Film.truncate_table
Film.truncate
Film.count
Film.destroy_all
Film.count
q
key
q
"#{Time.now.to_f}.jpg"
"#{Time.now.to_i}.jpg"
"#{Time.now.to_f}.jpg"
Time.now.m
"#{Time.now.to_i}.jpg"
"#{Time.now}.jpg"
Hash.new
Hash()
Hash
attributes
value.original_filename
value.original_filename.sub(/^.+(\.\w+)$/, "#{attributes[:id]}#{Regexp.last_match}")
        )
          /^.+(\.\w+)$/, "#{attributes[:id]}#{Regexp.last_match}"
value.original_filename.sub(
value.original_filename
new_name
"uploads/#{dir}/#{new_name}"
c
model
c
@resource.preview_file_name
@resource.valid?
c
preview_file_name
self
q
@resource = model.create resource_params
c
Film.destroy_all
@resource.errors
@resource = model.create resource_params
q
@resource_errors
q
@resource.preview_file_name
c
"aaaabbbb"["ab"]
"aaaabbbb"["aa"]
FileUtils.mv resource_params['preview_file_path'].path, "/home/home/Desktop/aaa.jpg"
FileUtils.mv resource_params['preview_file_path'].path, "/tmp/aaa.jpg"
FileUtils.mv
resource_params['preview_file_path'].content_type
resource_params['preview_file_path'].methods.select{|m| m.to_s.include? "type"}
resource_params['preview_file_path'].methods.select{|m| m.to_s.include? "ext"}
resource_params['preview_file_path'].methods.select{|m| m.to_s.include? "exten"}
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_match.to_s)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_match)
Regexp.methods.select{|m| m.to_s.include? "match"}
Regexp.methods
Regexp
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.matched)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.match)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_matches)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+Regexp.last_match)
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}"+'\1')
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}${$1}")
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}$1")
"aaabbb.fff".sub(/^.+(\.\w+)$/, "#{444}\1")
"aaabbbfff".sub(/^.+(\.\w+)$/, "#{444}\1")
