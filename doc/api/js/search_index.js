var search_data = {"index":{"searchIndex":["actioncontroller","testcase","actiondispatch","integrationtest","session","redisstore","actionmailer","base","lateattachmentsproxy","collector","deliverymethods","classmethods","mail","inlinepreviewinterceptor","logsubscriber","mailhelper","messagedelivery","noninferrablemailererror","preview","previews","classmethods","railtie","activesupport","testcase","behavior","classmethods","testhelper","version","actionview","base","context","dependencytracker","threadsafe","digestor","threadsafe","filesystemresolver","fixtureresolver","helpers","activemodelhelper","activemodelinstancetag","assettaghelper","asseturlhelper","atomfeedhelper","cachehelper","capturehelper","csrfhelper","datehelper","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","javascripthelper","encoding","numberhelper","invalidnumbererror","outputsafetyhelper","recordtaghelper","renderinghelper","sanitizehelper","taghelper","texthelper","translationhelper","urlhelper","classmethods","layouts","classmethods","logsubscriber","lookupcontext","detailscache","detailskey","threadsafe","template","viewpaths","modelnaming","nullresolver","partialiteration","partialrenderer","railtie","actiondispatch","routing","activesupport","recordidentifier","renderer","rendering","classmethods","resolver","cache","smallcache","path","routingurlfor","template","handlers","builder","erb","erubis","raw","types","type","testcase","behavior","classmethods","locals","renderedviewscollection","testcontroller","version","viewpaths","classmethods","activejob","arguments","base","callbacks","classmethods","core","classmethods","deserializationerror","enqueuing","classmethods","execution","classmethods","logging","activesupport","queueadapter","classmethods","queueadapters","backburneradapter","delayedjobadapter","inlineadapter","quadapter","queadapter","queueclassicadapter","resqueadapter","sidekiqadapter","sneakersadapter","suckerpunchadapter","testadapter","queuename","classmethods","railtie","activesupport","serializationerror","testcase","testhelper","version","activemodel","attributemethods","classmethods","callbacks","conversion","dirty","errors","forbiddenattributeserror","lint","tests","missingattributeerror","model","name","naming","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","strictvalidationfailed","translation","version","validations","callbacks","classmethods","classmethods","helpermethods","validator","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationrelation","associationtypemismatch","associations","associationscope","bindsubstitution","builder","hasandbelongstomany","jointableresolver","knownclass","classmethods","collectionproxy","foreignassociation","joindependency","aliases","table","attributeassignment","attributeassignmenterror","attributemethods","attributemethodcache","beforetypecast","classmethods","primarykey","classmethods","query","read","classmethods","serialization","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","batches","calculations","callbacks","classmethods","configurationerror","connectionadapters","abstractadapter","bindcollector","sqlstring","abstractmysqladapter","schemacreation","column","format","columndumper","connectionhandler","connectionmanagement","connectionpool","queue","reaper","databaselimits","databasestatements","mysql2adapter","mysqladapter","fields","type","statementpool","postgresql","columndefinition","columnmethods","databasestatements","oid","bit","data","quoting","schemacreation","schemastatements","table","tabledefinition","postgresqladapter","statementpool","querycache","quoting","realtransaction","sqlite3adapter","explainprettyprinter","statementpool","version","savepointtransaction","schemacache","schemastatements","statementpool","table","tabledefinition","transactionstate","connectionhandling","connectionnotestablished","connectiontimeouterror","core","classmethods","countercache","classmethods","dangerousattributeerror","delegation","delegatecache","dynamicmatchers","findby","findbybang","finder","method","enum","explain","explainsubscriber","activesupport","findermethods","fixtureset","classcache","immutablerelation","inheritance","classmethods","integration","classmethods","invalidforeignkey","irreversiblemigration","legacyyamladapter","rails41","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","checkpending","commandrecorder","straightreversions","migrationproxy","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","nodatabaseerror","notouching","classmethods","persistence","classmethods","preparedstatementinvalid","querycache","classmethods","querymethods","wherechain","querying","railtie","actiondispatch","activesupport","rails","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotdestroyed","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","result","rollback","sanitization","classmethods","schema","schemamigration","scoping","classmethods","default","classmethods","named","classmethods","serialization","serializationtypemismatch","spawnmethods","staleobjecterror","statementinvalid","store","classmethods","tasks","databasetasks","testfixtures","classmethods","timestamp","transactionisolationerror","transactions","classmethods","translation","type","unknownattributeerror","unknownprimarykey","version","validations","classmethods","wrappeddatabaseexception","activesupport","cache","redisstore","testcase","encoding","kernel","mysql","field","result","stmt","time","object","rails","api","apptask","edgetask","repotask","stabletask","task","appbuilder","application","bootstrap","activesupport","logger","configuration","defaultmiddlewarestack","finisher","actiondispatch","activesupport","routesreloader","backtracecleaner","configuration","middlewarestackproxy","console","consolemethods","dbconsole","deprecatedconstant","engine","activesupport","configuration","railties","rake","generators","actions","createmigration","activemodel","appbase","gemfileentry","base","migration","classmethods","namedbase","testcase","testing","assertions","behaviour","classmethods","setupandteardown","info","gem","infocontroller","actiondispatch","debugexceptions","initializable","classmethods","collection","initializer","mailerscontroller","actiondispatch","debugexceptions","paths","path","root","pluginbuilder","rack","debugger","logtailer","logger","railtie","configurable","classmethods","configuration","server","options","testunitrailtie","version","rbconfig","sourceannotationextractor","annotation","!~()","+()","-()","<<()","<<()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","=~()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_layout_for()","_layout_for()","_prepare_context()","_set_detail()","_to_partial_path()","_url_for_modules()","abstract_class?()","abstract_railtie?()","accepts_nested_attributes_for()","action_has_layout?()","active?()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","actually_destroyed?()","adapter_name()","add()","add()","add()","add()","add()","add_belongs_to()","add_column()","add_column_sql()","add_delivery_method()","add_expr()","add_expr_escaped()","add_expr_literal()","add_foreign_key()","add_index()","add_index_length()","add_index_sort_order()","add_index_sql()","add_on_blank()","add_on_empty()","add_postamble()","add_preamble()","add_reference()","add_shebang_option!()","add_source()","add_stmt()","add_text()","add_timestamps()","add_timestamps_sql()","add_transaction_record()","added?()","after()","after_bundle()","after_commit()","after_enqueue()","after_initialize()","after_perform()","after_rollback()","after_teardown()","after_teardown()","after_validation()","alias_attribute()","all()","all()","all()","all()","all_paths()","allocate()","allowed_index_name_length()","allowed_index_name_length()","announce()","any()","any?()","any?()","any_waiting?()","api_dir()","api_dir()","api_main()","app()","app()","app()","app()","app()","app_generators()","app_middleware()","append()","append_view_path()","append_view_path()","application()","application()","application_name()","arel()","arguments()","around_enqueue()","around_perform()","as_json()","as_json()","assert_class_method()","assert_directory()","assert_emails()","assert_enqueued_jobs()","assert_enqueued_with()","assert_field_default_value()","assert_field_type()","assert_file()","assert_instance_method()","assert_method()","assert_migration()","assert_no_directory()","assert_no_emails()","assert_no_enqueued_jobs()","assert_no_file()","assert_no_migration()","assert_no_performed_jobs()","assert_performed_jobs()","assert_performed_with()","asset_path()","asset_url()","assign_attributes()","assume_migrated_upto_version()","atom_feed()","attachments()","attachments()","attr_readonly()","attribute_alias()","attribute_alias?()","attribute_for_inspect()","attribute_method?()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_missing()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes=()","attributes_before_type_cast()","attributes_hash()","attributes_names()","audio_path()","audio_tag()","audio_url()","authenticate()","auto_discovery_link_tag()","autoload_once()","autoload_once_paths()","autoload_paths()","autoload_paths()","autosave=()","available_environments()","average()","backtrace_cleaner()","banner()","base_class()","base_name()","base_root()","basename()","becomes()","becomes!()","before()","before_configuration()","before_eager_load()","before_enqueue()","before_initialize()","before_perform()","before_setup()","before_setup()","before_validation()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","belongs_to()","belongs_to()","belongs_to()","belongs_to?()","bin()","bin()","binary?()","bind()","bind_value()","bit()","bit_varying()","blank?()","blank?()","block_format()","body()","body()","build()","build()","build()","build()","build()","build()","build_queue()","build_stack()","button()","button_tag()","button_to()","cache()","cache()","cache()","cache_fixtures()","cache_for_connection()","cache_fragment_name()","cache_if()","cache_key()","cache_template_loading()","cache_template_loading=()","cache_unless()","cached_attributes_deprecation_warning()","cached_fixtures()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_app()","capify!()","capture()","capture()","case_insensitive_comparison()","case_insensitive_comparison()","case_sensitive_comparison()","case_sensitive_comparison()","case_sensitive_modifier()","case_sensitive_modifier()","cdata_section()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","changed()","changed?()","changed_attributes()","changed_for_autosave?()","changes()","changes_applied()","charset()","charset()","charset_current()","check_box()","check_box()","check_box_tag()","check_class_collision()","check_pending!()","check_schema_file()","checkin()","checkout()","children()","cidr()","citext()","class_method_defined_within?()","class_name()","class_path()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_active_connections!()","clear_all_connections!()","clear_attribute_changes()","clear_cache()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_changes_information()","clear_destroy_state()","clear_enqueued_jobs()","clear_performed_jobs()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_table_cache!()","clear_validators!()","client_encoding()","client_min_messages()","client_min_messages=()","clone()","close()","collation()","collation()","collation()","collation_current()","collection_check_boxes()","collection_check_boxes()","collection_radio_buttons()","collection_radio_buttons()","collection_select()","collection_select()","collector()","color_field()","color_field_tag()","colorize_logging()","colorize_logging=()","column()","column()","column_aliases()","column_defaults()","column_exists?()","column_exists?()","column_for_attribute()","column_name_length()","column_names()","column_spec()","columns()","columns()","columns()","columns()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit()","commit()","commit_db_transaction()","commit_db_transaction()","committed?()","compile()","compile()","completed?()","component_root_dir()","component_root_dir()","composed_of()","compute_asset_extname()","compute_asset_host()","compute_asset_path()","compute_class()","compute_tags()","compute_type()","concat()","concat()","concat()","config()","config()","config()","config()","config()","config()","config_for()","config_when_updating()","configru()","configuration()","configurations()","configurations()","configurations=()","configure()","configure()","configure()","configure_rdoc_files()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection_config()","connection_handler()","connection_handler()","connection_handler=()","connection_id()","connection_id=()","connection_pool()","connection_pool_list()","connection_pools()","console()","console()","content_columns()","content_for()","content_for?()","content_tag()","content_tag()","content_tag_for()","context_class()","controller()","controller_path()","controller_path=()","convert()","convert()","convert_to_model()","copy()","count()","count()","count()","count_by_sql()","create()","create()","create()","create()","create()","create()","create()","create()","create!()","create!()","create!()","create!()","create_all()","create_current()","create_database()","create_database()","create_fixtures()","create_fixtures()","create_generated_attribute()","create_join_table()","create_migration()","create_savepoint()","create_schema()","create_table()","create_table()","create_with()","csrf_meta_tag()","csrf_meta_tags()","ctype()","current_config()","current_cycle()","current_database()","current_database()","current_page?()","current_savepoint_name()","current_schema()","custom()","cycle()","dangerous_attribute_method?()","dangerous_class_method?()","database_configuration()","database_yml()","date_field()","date_field_tag()","date_select()","date_select()","daterange()","datetime_field()","datetime_field_tag()","datetime_local_field()","datetime_local_field_tag()","datetime_select()","datetime_select()","db()","db_dir()","debug()","debugger?()","decrement()","decrement()","decrement!()","decrement_counter()","default()","default_aliases_for_option()","default_for_option()","default_generator_root()","default_i18n_subject()","default_options()","default_options=()","default_scope()","default_source_root()","default_value_for_option()","define()","define()","define_attribute_method()","define_attribute_methods()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_model_callbacks()","delegate_to()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete_all()","delete_all()","delete_entry()","delete_matched()","deliver()","deliver_later()","deliver_later!()","deliver_now()","deliver_now!()","dependencies()","deprecate()","desc()","desc()","descends_from_active_record?()","deserialize()","deserialize()","destination()","destroy()","destroy()","destroy()","destroy()","destroy!()","destroy_all()","destroy_all()","destroyed?()","destroyed_by_association()","destroyed_by_association=()","detail_args_for()","details_for_lookup()","determine_default_helper_class()","determine_default_mailer()","digest()","digest()","directories()","dirties_query_cache()","disable_cache()","disable_ddl_transaction!()","disable_extension()","disable_extension()","disable_implicit_join_references=()","disable_query_cache!()","disable_referential_integrity()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","display()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","distinct()","div_for()","dom_class()","dom_id()","down()","drop()","drop_all()","drop_current()","drop_join_table()","drop_schema()","drop_table()","drop_table()","drop_table()","drop_table()","dup()","each()","each()","each()","each()","each()","each()","each()","each()","each()","eager_load()","eager_load()","eager_load!()","eager_load_namespaces()","eager_load_paths()","eager_loading?()","email_exists?()","email_field()","email_field_tag()","emails()","emitted_hidden_id?()","empty?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","emulate_booleans()","enable_extension()","enable_extension()","enable_query_cache!()","encode!()","encode_with()","encode_with()","encoding()","encoding()","encoding=()","endpoint()","endpoint()","enlist_fixture_connections()","enqueue()","enqueued_jobs()","enum()","enumerate()","env()","env()","env=()","env_config()","env_config()","environment()","environment()","environment()","environment?()","eql?()","eql?()","eql?()","error_message()","error_number()","error_wrapping()","errors()","errors()","escape_bytea()","escape_javascript()","escape_once()","establish_connection()","establish_connection()","except()","excerpt()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_insert()","exec_migration()","exec_query()","exec_query()","exec_query()","exec_query()","exec_query()","exec_rollback_db_transaction()","exec_update()","exec_update()","exec_update()","exec_update()","exec_without_stmt()","execute()","execute()","execute()","execute()","exist?()","existent()","existent_directories()","existing_migration()","exists?()","exists?()","exists?()","exists?()","expand_hash_conditions_for_aggregates()","expanded()","expire()","expire()","explain()","explain()","explain()","explain()","extending()","extension_enabled?()","extensions()","extensions()","extensions()","extify()","extract_annotations_from()","extract_last_module()","fallbacks()","favicon_link_tag()","fetch_multi()","field_set_tag()","fields_for()","fields_for()","fifth()","fifth()","fifth!()","file_field()","file_field()","file_field_tag()","file_path()","finalized?()","find()","find()","find()","find()","find()","find()","find()","find_all()","find_all()","find_all_anywhere()","find_by()","find_by!()","find_by_sql()","find_cmd_and_exec()","find_each()","find_file()","find_in()","find_in_batches()","find_last()","find_nth()","find_nth!()","find_nth_with_limit()","find_one()","find_or_create_by()","find_or_create_by!()","find_or_initialize_by()","find_root()","find_root()","find_some()","find_take()","find_template()","find_with_ids()","finder()","finder()","finder()","first()","first()","first()","first!()","first?()","fixture_is_cached?()","fixtures()","fixtures_path()","flush_newline_if_pending()","font_path()","font_url()","foreign_key_present?()","foreign_keys()","foreign_keys()","foreign_keys()","form_for()","form_tag()","format_paragraph()","forty_two()","forty_two()","forty_two!()","fourth()","fourth()","fourth!()","freeze()","from()","from_json()","from_rails_root()","from_xml()","frozen?()","full_message()","full_messages()","full_messages_for()","full_rollback?()","gem()","gem_group()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gem_version()","gemfile()","gemfile()","gemfile_entry()","gemspec()","generate()","generate_message()","generate_railtie_name()","generate_test_dummy()","generated_association_methods()","generator()","generator_name()","generators()","generators()","generators()","get()","git()","github()","gitignore()","gitignore()","group()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","groups()","handles_encoding?()","has_and_belongs_to_many()","has_attribute?()","has_key?()","has_many()","has_one()","has_secure_password()","hash()","having()","headers()","help()","helper()","helper_class()","helper_method()","helpers()","helpers_paths()","hex?()","hidden_field()","hidden_field()","hidden_field_tag()","hidden_namespaces()","hide!()","hide_namespace()","hide_namespaces()","highlight()","hook_for()","hstore()","human()","human_attribute_name()","human_name()","i18n_scope()","i18n_scope()","id()","id=()","id?()","id_before_type_cast()","id_was()","identical?()","identify()","ids()","image_alt()","image_path()","image_submit_tag()","image_tag()","image_url()","in_clause_length()","include?()","include?()","includes()","increment()","increment()","increment!()","increment_counter()","indent()","index()","index()","index_algorithms()","index_algorithms()","index_algorithms()","index_exists?()","index_exists?()","index_helper()","index_name()","index_name_exists?()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inet()","inheritance_column()","inheritance_column=()","inherited()","inherited()","inherited()","inherited()","inherited()","init_with()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_internals_callback()","initialize_schema_migrations_table()","initialize_schema_migrations_table()","initialize_test_deliveries()","initialize_type_map()","initialized?()","initializer()","initializer()","initializer()","initializers()","initializers()","initializers_chain()","initializers_for()","inline()","insert()","insert()","insert_after()","insert_before()","insert_sql()","insert_sql()","inside_template()","inside_template?()","inspect()","inspect()","inspect()","inspect()","inspect()","instance()","instance()","instance()","instance_method_already_implemented?()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instrument()","int4range()","int8range()","invalid?()","inverse_of()","invoke()","isolate_namespace()","isolate_namespace()","j()","javascript_include_tag()","javascript_path()","javascript_tag()","javascript_url()","javascripts()","job_or_instantiate()","join_table()","joined_includes_values()","joins()","joins_per_query()","json()","jsonb()","key?()","key?()","key?()","key?()","key?()","key_generator()","key_matcher()","keys()","keys()","kind()","kind()","klass()","l()","label()","label()","label_tag()","last()","last()","last()","last()","last!()","last?()","last_inserted_id()","last_inserted_id()","last_inserted_id()","layout()","lease()","length()","length()","length()","length()","length()","length()","levenshtein_distance()","lib()","lib()","lib()","license()","limit()","link_to()","link_to_if()","link_to_unless()","link_to_unless_current()","load()","load_and_configure_sdoc()","load_and_configure_sdoc()","load_config_initializer()","load_console()","load_generators()","load_paths()","load_runner()","load_schema()","load_schema_current()","load_schema_current_if_exists()","load_schema_if_pending!()","load_seed()","load_seed()","load_target()","load_tasks()","loaded?()","localize()","locals_for()","lock()","lock!()","locking_column()","locking_column=()","locking_enabled?()","log()","log()","log()","log_level()","log_level=()","log_path()","logger()","logger()","logger()","lookup_ancestors()","lookup_context()","ltree()","macaddr()","mail()","mail_to()","mailer()","mailer_class()","mailer_name()","mailer_name()","many?()","many?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_load()","match()","maximum()","merge()","message()","message()","message_verifier()","method_missing()","method_missing()","method_missing()","method_missing()","middleware()","middleware()","migrate()","migrate()","migrate()","migration_dir()","migration_file_name()","migration_keys()","migration_keys()","migration_template()","migrations_paths()","migrations_paths()","minimum()","model_name()","model_name_from_record_or_class()","module_namespacing()","money()","month_field()","month_field_tag()","mountable_engine?()","mtime()","multipart=()","namespace()","namespace()","namespaced?()","namespaced_class_path()","namespaced_file_path()","namespaced_path()","native_database_types()","native_database_types()","nested_dependencies()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_column()","new_record?()","new_session()","next_key()","next_migration_number()","no_color!()","no_touching()","no_touching?()","none()","normalize_migration_number()","normalized_versions()","not()","num_waiting()","number_field()","number_field_tag()","number_to_currency()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_with_delimiter()","number_with_precision()","numrange()","object()","odd?()","offset()","on_conflict_behavior()","only()","opt_parser()","option_groups_from_collection_for_select()","options_for_select()","options_from_collection_for_select()","options_include_default?()","order()","param_key()","parse!()","parse_arguments()","parse_arguments()","password=()","password_confirmation=()","password_field()","password_field_tag()","path()","path_to_asset()","path_to_audio()","path_to_font()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_to_video()","paths()","paths()","pattern()","perform()","perform_enqueued_jobs()","perform_later()","perform_now()","perform_now()","performed_jobs()","persisted?()","persisted?()","phone_field()","phone_field_tag()","pk_and_sequence_for()","pluck()","plural()","plural_file_name()","plural_name()","plural_table_name()","pluralize()","pluralize_table_names?()","point()","poll()","populate_with_current_scope_attributes()","postgresql_version()","prefetch_primary_key?()","prefix()","prefix()","prefix()","preload()","prepare_column_options()","prepend()","prepend_view_path()","prepend_view_path()","pretty_print()","pretty_print()","preview_name()","previous_changes()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_keys()","print_generators()","process()","proper_table_name()","property()","provide()","proxy_association()","proxy_association()","public_directory()","public_namespaces()","public_path()","purge()","purge_all()","purge_current()","push()","push()","query()","query_attribute()","queue_adapter()","queue_adapter=()","queue_as()","queue_name()","quote()","quote()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_date()","quoted_false()","quoted_false()","quoted_id()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","radio_button()","radio_button()","radio_button_tag()","rails_root()","rails_version()","rails_version()","rails_version()","railtie_name()","railtie_namespace()","railties()","raise_errors?()","raise_record_invalid()","rake()","rake_tasks()","rake_tasks()","rakefile()","rakefile()","rakefile()","range_field()","range_field_tag()","raw()","raw_connection()","raw_write_attribute()","read_attribute()","read_attribute_before_type_cast()","read_entry()","read_multi()","read_store_attribute()","readme()","readme()","readme()","readonly()","readonly!()","readonly?()","readonly_attributes()","reap()","receive()","receive()","reconnect()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","record_key_for_dom_id()","recreate_database()","ref()","references()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reflections()","refresh()","register()","register_extensions()","register_interceptor()","register_interceptors()","register_observer()","register_observers()","register_preview_interceptor()","register_preview_interceptors()","register_task()","regular_class_path()","relative_existing_migration()","release_connection()","release_savepoint()","reload()","reload()","reload()","reload()","reload!()","reload!()","reload_routes!()","remove()","remove()","remove_belongs_to()","remove_belongs_to()","remove_column()","remove_column()","remove_column_sql()","remove_columns()","remove_columns_sql()","remove_connection()","remove_connection()","remove_foreign_key()","remove_hook_for()","remove_index()","remove_index()","remove_index_sql()","remove_reference()","remove_references()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column_indexes()","rename_column_sql()","rename_index()","rename_index()","rename_index()","rename_index()","rename_table()","rename_table()","rename_table()","rename_table()","rename_table_indexes()","render()","render()","render()","render()","render()","render()","render_bind()","render_body()","render_collection()","render_partial()","render_template()","render_to_body()","rendered_format()","rendered_views()","rendered_views()","reorder()","replace()","require_debugger()","require_engine()","requires_reloading?()","requires_reloading?()","reset()","reset()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_column_information()","reset_counters()","reset_cycle()","reset_locking_column()","reset_runtime()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_without_attributes?()","restore_attributes()","restore_delivery_method()","restore_test_deliveries()","result()","retrieve_connection()","retrieve_connection_pool()","retry_job()","reverse_order()","reversible()","revert()","revert()","reverting?()","revoke!()","rewhere()","rollback()","rollback()","rollback_db_transaction()","rolledback?()","root()","root()","root=()","route()","route_key()","route_url()","routes()","run()","run()","run()","run_generator()","run_in_transaction?()","run_initializers()","runner()","runner()","runtime()","runtime=()","safe_concat()","safe_join()","sandbox?()","sanitize()","sanitize_conditions()","sanitize_css()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","sanitize_sql_like()","save()","save()","save()","save!()","save!()","say()","say_status()","say_with_time()","schema_cache=()","schema_creation()","schema_creation()","schema_exists?()","schema_file()","schema_names()","schema_search_path()","schema_search_path=()","scope()","scope()","scope_for_create()","scoping()","scoping()","search_field()","search_field_tag()","second()","second()","second!()","secrets()","seed_loader()","select()","select()","select()","select()","select_all()","select_all()","select_date()","select_datetime()","select_day()","select_hour()","select_minute()","select_month()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_value()","select_values()","select_values()","select_year()","sequence_name()","sequence_name=()","serial_sequence()","serializable_hash()","serializable_hash()","serialize()","serialize()","serialize()","serialize_args_for_assertion()","serialized_attributes()","session_auth=()","set()","set()","set_content_type()","set_delivery_method()","set_environment()","set_environment!()","set_expected_mail()","set_fixture_class()","set_migration_assigns!()","set_standard_conforming_strings()","set_state()","setup_fixture_accessors()","setup_fixtures()","setup_horo_variables()","setup_with_controller()","show_variable()","signature()","simple_format()","singular()","singular_name()","singular_route_key()","singular_table_name()","size()","size()","size()","size()","size()","slice()","sorted_groups()","source_root()","spawn()","sql()","sql_for_insert()","sql_query_length()","sqlite_version()","start()","start()","start()","start()","start()","started_request_message()","stats()","sti_name()","store()","store_accessor()","stored_attributes()","strict_mode?()","strip_links()","strip_tags()","structure_dump()","structure_load()","stylesheet_link_tag()","stylesheet_path()","stylesheet_url()","stylesheets()","subclasses()","subclasses()","submit()","submit_tag()","subquery_for()","substitute_at()","suffix()","suffix()","sum()","supports_bulk_alter?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_extensions?()","supports_extensions?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_foreign_keys?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_indexes_in_create?()","supports_indexes_in_create?()","supports_materialized_views?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_partial_index?()","supports_partial_index?()","supports_partial_index?()","supports_path?()","supports_primary_key?()","supports_primary_key?()","supports_ranges?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_streaming?()","supports_streaming?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_views?()","supports_views?()","supports_views?()","supports_views?()","suppress_messages()","swap()","symbolized_base_class()","symbolized_sti_name()","t()","table()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name()","table_name=()","table_name_length()","table_name_options()","table_rows()","table_structure()","tables()","tables()","tag()","tag()","tail!()","take()","take()","take!()","target()","teardown_fixtures()","telephone_field()","telephone_field_tag()","template()","template_exists?()","test()","test()","test_dummy_assets()","test_dummy_clean()","test_dummy_config()","test_errors_aref()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","tests()","tests()","tests()","text_area()","text_area_tag()","text_field()","text_field_tag()","third()","third()","third!()","time_ago_in_words()","time_field()","time_field_tag()","time_select()","time_select()","time_tag()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timestamps()","timestamps()","tmp()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_date()","to_hash()","to_hash()","to_html()","to_key()","to_key()","to_model()","to_model()","to_param()","to_param()","to_param()","to_partial_path()","to_partial_path()","to_path()","to_prepare()","to_prepare_blocks()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sql()","to_sql()","to_str()","to_str()","to_xml()","to_xml()","to_xml()","toggle()","toggle!()","touch()","transaction()","transaction()","transaction_isolation_levels()","transaction_open?()","transaction_state()","translate()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","translate_exception_class()","truncate()","truncate()","truncate()","truncate()","tsort_each_child()","tsrange()","tstzrange()","tsvector()","type()","type_cast()","type_cast_config_to_boolean()","type_cast_config_to_integer()","type_to_sql()","type_to_sql()","uncached()","uncached()","uncountable?()","uncountable?()","undefine_attribute_methods()","unescape_bytea()","uniq()","uniq()","uniq_value()","unprepared_statement()","unquoted_false()","unquoted_false()","unquoted_true()","unquoted_true()","unscope()","unscoped()","unshift()","unshift()","up()","update()","update()","update()","update()","update!()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_column()","update_columns()","update_counters()","update_counters()","update_sql()","url_field()","url_field_tag()","url_for()","url_to_asset()","url_to_audio()","url_to_font()","url_to_image()","url_to_javascript()","url_to_stylesheet()","url_to_video()","usage_path()","use()","use_insert_returning?()","uses_transaction()","uses_transaction?()","utf8_enforcer_tag()","uuid()","valid?()","valid?()","valid?()","valid_alter_table_type?()","valid_type?()","valid_type?()","valid_type?()","validate()","validate()","validate()","validate()","validate!()","validates()","validates!()","validates_absence_of()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","values()","values()","values()","values_at()","vendor()","vendor()","vendor_javascripts()","vendor_stylesheets()","verify!()","version()","version()","version()","version()","version()","version()","version()","version()","version()","video_path()","video_tag()","video_url()","view_context()","view_context_class()","view_context_class()","view_paths()","view_paths=()","view_paths=()","view_rendered?()","view_renderer()","visit_addcolumn()","watchable_dirs()","watchable_files()","week_field()","week_field_tag()","where()","where_values_hash()","with()","with_connection()","with_fallbacks()","with_lock()","without_prepared_statement?()","word_wrap()","wrap_with_namespace()","write()","write()","write_attribute()","write_entry()","write_store_attribute()","xml()","readme","readme","readme","readme","readme","rdoc_main","readme"],"longSearchIndex":["actioncontroller","actioncontroller::testcase","actiondispatch","actiondispatch::integrationtest","actiondispatch::session","actiondispatch::session::redisstore","actionmailer","actionmailer::base","actionmailer::base::lateattachmentsproxy","actionmailer::collector","actionmailer::deliverymethods","actionmailer::deliverymethods::classmethods","actionmailer::deliverymethods::mail","actionmailer::inlinepreviewinterceptor","actionmailer::logsubscriber","actionmailer::mailhelper","actionmailer::messagedelivery","actionmailer::noninferrablemailererror","actionmailer::preview","actionmailer::previews","actionmailer::previews::classmethods","actionmailer::railtie","actionmailer::railtie::activesupport","actionmailer::testcase","actionmailer::testcase::behavior","actionmailer::testcase::behavior::classmethods","actionmailer::testhelper","actionmailer::version","actionview","actionview::base","actionview::context","actionview::dependencytracker","actionview::dependencytracker::threadsafe","actionview::digestor","actionview::digestor::threadsafe","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assettaghelper","actionview::helpers::asseturlhelper","actionview::helpers::atomfeedhelper","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::javascripthelper","actionview::helpers::javascripthelper::encoding","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::outputsafetyhelper","actionview::helpers::recordtaghelper","actionview::helpers::renderinghelper","actionview::helpers::sanitizehelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::helpers::urlhelper::classmethods","actionview::layouts","actionview::layouts::classmethods","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::detailscache","actionview::lookupcontext::detailskey","actionview::lookupcontext::detailskey::threadsafe","actionview::lookupcontext::template","actionview::lookupcontext::viewpaths","actionview::modelnaming","actionview::nullresolver","actionview::partialiteration","actionview::partialrenderer","actionview::railtie","actionview::railtie::actiondispatch","actionview::railtie::actiondispatch::routing","actionview::railtie::activesupport","actionview::recordidentifier","actionview::renderer","actionview::rendering","actionview::rendering::classmethods","actionview::resolver","actionview::resolver::cache","actionview::resolver::cache::smallcache","actionview::resolver::path","actionview::routingurlfor","actionview::template","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::erb","actionview::template::handlers::erubis","actionview::template::handlers::raw","actionview::template::types","actionview::template::types::type","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::behavior::renderedviewscollection","actionview::testcase::testcontroller","actionview::version","actionview::viewpaths","actionview::viewpaths::classmethods","activejob","activejob::arguments","activejob::base","activejob::callbacks","activejob::callbacks::classmethods","activejob::core","activejob::core::classmethods","activejob::deserializationerror","activejob::enqueuing","activejob::enqueuing::classmethods","activejob::execution","activejob::execution::classmethods","activejob::logging","activejob::logging::activesupport","activejob::queueadapter","activejob::queueadapter::classmethods","activejob::queueadapters","activejob::queueadapters::backburneradapter","activejob::queueadapters::delayedjobadapter","activejob::queueadapters::inlineadapter","activejob::queueadapters::quadapter","activejob::queueadapters::queadapter","activejob::queueadapters::queueclassicadapter","activejob::queueadapters::resqueadapter","activejob::queueadapters::sidekiqadapter","activejob::queueadapters::sneakersadapter","activejob::queueadapters::suckerpunchadapter","activejob::queueadapters::testadapter","activejob::queuename","activejob::queuename::classmethods","activejob::railtie","activejob::railtie::activesupport","activejob::serializationerror","activejob::testcase","activejob::testhelper","activejob::version","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::errors","activemodel::forbiddenattributeserror","activemodel::lint","activemodel::lint::tests","activemodel::missingattributeerror","activemodel::model","activemodel::name","activemodel::naming","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::strictvalidationfailed","activemodel::translation","activemodel::version","activemodel::validations","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::helpermethods","activemodel::validator","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationrelation","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::associationscope","activerecord::associations::associationscope::bindsubstitution","activerecord::associations::builder","activerecord::associations::builder::hasandbelongstomany","activerecord::associations::builder::hasandbelongstomany::jointableresolver","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass","activerecord::associations::classmethods","activerecord::associations::collectionproxy","activerecord::associations::foreignassociation","activerecord::associations::joindependency","activerecord::associations::joindependency::aliases","activerecord::associations::joindependency::aliases::table","activerecord::attributeassignment","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::attributemethodcache","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractadapter::bindcollector","activerecord::connectionadapters::abstractadapter::sqlstring","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::abstractmysqladapter::schemacreation","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::columndumper","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::connectionpool::queue","activerecord::connectionadapters::connectionpool::reaper","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::mysqladapter::fields","activerecord::connectionadapters::mysqladapter::fields::type","activerecord::connectionadapters::mysqladapter::statementpool","activerecord::connectionadapters::postgresql","activerecord::connectionadapters::postgresql::columndefinition","activerecord::connectionadapters::postgresql::columnmethods","activerecord::connectionadapters::postgresql::databasestatements","activerecord::connectionadapters::postgresql::oid","activerecord::connectionadapters::postgresql::oid::bit","activerecord::connectionadapters::postgresql::oid::bit::data","activerecord::connectionadapters::postgresql::quoting","activerecord::connectionadapters::postgresql::schemacreation","activerecord::connectionadapters::postgresql::schemastatements","activerecord::connectionadapters::postgresql::table","activerecord::connectionadapters::postgresql::tabledefinition","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::realtransaction","activerecord::connectionadapters::sqlite3adapter","activerecord::connectionadapters::sqlite3adapter::explainprettyprinter","activerecord::connectionadapters::sqlite3adapter::statementpool","activerecord::connectionadapters::sqlite3adapter::version","activerecord::connectionadapters::savepointtransaction","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionadapters::transactionstate","activerecord::connectionhandling","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::core","activerecord::core::classmethods","activerecord::countercache","activerecord::countercache::classmethods","activerecord::dangerousattributeerror","activerecord::delegation","activerecord::delegation::delegatecache","activerecord::dynamicmatchers","activerecord::dynamicmatchers::findby","activerecord::dynamicmatchers::findbybang","activerecord::dynamicmatchers::finder","activerecord::dynamicmatchers::method","activerecord::enum","activerecord::explain","activerecord::explainsubscriber","activerecord::explainsubscriber::activesupport","activerecord::findermethods","activerecord::fixtureset","activerecord::fixtureset::classcache","activerecord::immutablerelation","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::integration::classmethods","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::legacyyamladapter","activerecord::legacyyamladapter::rails41","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::checkpending","activerecord::migration::commandrecorder","activerecord::migration::commandrecorder::straightreversions","activerecord::migrationproxy","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::nodatabaseerror","activerecord::notouching","activerecord::notouching::classmethods","activerecord::persistence","activerecord::persistence::classmethods","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querymethods::wherechain","activerecord::querying","activerecord::railtie","activerecord::railtie::actiondispatch","activerecord::railtie::activesupport","activerecord::railtie::rails","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotdestroyed","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::result","activerecord::rollback","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::schemamigration","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::tasks","activerecord::tasks::databasetasks","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::timestamp","activerecord::transactionisolationerror","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::type","activerecord::unknownattributeerror","activerecord::unknownprimarykey","activerecord::version","activerecord::validations","activerecord::validations::classmethods","activerecord::wrappeddatabaseexception","activesupport","activesupport::cache","activesupport::cache::redisstore","activesupport::testcase","encoding","kernel","mysql","mysql::field","mysql::result","mysql::stmt","mysql::time","object","rails","rails::api","rails::api::apptask","rails::api::edgetask","rails::api::repotask","rails::api::stabletask","rails::api::task","rails::appbuilder","rails::application","rails::application::bootstrap","rails::application::bootstrap::activesupport","rails::application::bootstrap::activesupport::logger","rails::application::configuration","rails::application::defaultmiddlewarestack","rails::application::finisher","rails::application::finisher::actiondispatch","rails::application::finisher::activesupport","rails::application::routesreloader","rails::backtracecleaner","rails::configuration","rails::configuration::middlewarestackproxy","rails::console","rails::consolemethods","rails::dbconsole","rails::deprecatedconstant","rails::engine","rails::engine::activesupport","rails::engine::configuration","rails::engine::railties","rails::engine::rake","rails::generators","rails::generators::actions","rails::generators::actions::createmigration","rails::generators::activemodel","rails::generators::appbase","rails::generators::appbase::gemfileentry","rails::generators::base","rails::generators::migration","rails::generators::migration::classmethods","rails::generators::namedbase","rails::generators::testcase","rails::generators::testing","rails::generators::testing::assertions","rails::generators::testing::behaviour","rails::generators::testing::behaviour::classmethods","rails::generators::testing::setupandteardown","rails::info","rails::info::gem","rails::infocontroller","rails::infocontroller::actiondispatch","rails::infocontroller::actiondispatch::debugexceptions","rails::initializable","rails::initializable::classmethods","rails::initializable::collection","rails::initializable::initializer","rails::mailerscontroller","rails::mailerscontroller::actiondispatch","rails::mailerscontroller::actiondispatch::debugexceptions","rails::paths","rails::paths::path","rails::paths::root","rails::pluginbuilder","rails::rack","rails::rack::debugger","rails::rack::logtailer","rails::rack::logger","rails::railtie","rails::railtie::configurable","rails::railtie::configurable::classmethods","rails::railtie::configuration","rails::server","rails::server::options","rails::testunitrailtie","rails::version","rbconfig","sourceannotationextractor","sourceannotationextractor::annotation","activemodel::name#!~()","rails::initializable::collection#+()","rails::engine::railties#-()","activerecord::associations::collectionproxy#<<()","rails::paths::path#<<()","activemodel::name#<=>()","activerecord::connectionadapters::sqlite3adapter::version#<=>()","activerecord::core#<=>()","actionview::filesystemresolver#==()","actionview::template::types::type#==()","activemodel::name#==()","activerecord::associationrelation#==()","activerecord::associations::collectionproxy#==()","activerecord::core#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activemodel::name#===()","activerecord::core::classmethods#===()","activemodel::name#=~()","actionview::template::types::[]()","actionview::template::types::type::[]()","activemodel::errors#[]()","activerecord::attributemethods#[]()","activerecord::attributemethods::attributemethodcache#[]()","activerecord::connectionadapters::mysqladapter::statementpool#[]()","activerecord::connectionadapters::postgresqladapter::statementpool#[]()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]()","activerecord::connectionadapters::statementpool#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtureset#[]()","activerecord::fixtureset::classcache#[]()","activerecord::result#[]()","rails::paths::root#[]()","actionmailer::base::lateattachmentsproxy#[]=()","activemodel::errors#[]=()","activerecord::attributemethods#[]=()","activerecord::connectionadapters::mysqladapter::statementpool#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]=()","activerecord::connectionadapters::statementpool#[]=()","activerecord::fixtureset#[]=()","rails::paths::root#[]=()","actionview::context#_layout_for()","actionview::helpers::renderinghelper#_layout_for()","actionview::context#_prepare_context()","actionview::lookupcontext::detailscache#_set_detail()","actionview::helpers::formbuilder::_to_partial_path()","actionview::helpers::urlhelper::classmethods#_url_for_modules()","activerecord::inheritance::classmethods#abstract_class?()","rails::railtie::abstract_railtie?()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","actionview::layouts#action_has_layout?()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::sqlite3adapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","activerecord::countercache#actually_destroyed?()","activerecord::connectionadapters::abstractadapter#adapter_name()","actionview::testcase::behavior::renderedviewscollection#add()","activemodel::errors#add()","activerecord::connectionadapters::connectionpool::queue#add()","activerecord::connectionadapters::schemacache#add()","rails::paths::root#add()","activerecord::connectionadapters::schemastatements#add_belongs_to()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::abstractmysqladapter#add_column_sql()","actionmailer::deliverymethods::classmethods#add_delivery_method()","actionview::template::handlers::erubis#add_expr()","actionview::template::handlers::erubis#add_expr_escaped()","actionview::template::handlers::erubis#add_expr_literal()","activerecord::connectionadapters::schemastatements#add_foreign_key()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::abstractmysqladapter#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters::abstractmysqladapter#add_index_sql()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","actionview::template::handlers::erubis#add_postamble()","actionview::template::handlers::erubis#add_preamble()","activerecord::connectionadapters::schemastatements#add_reference()","rails::generators::base::add_shebang_option!()","rails::generators::actions#add_source()","actionview::template::handlers::erubis#add_stmt()","actionview::template::handlers::erubis#add_text()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::abstractmysqladapter#add_timestamps_sql()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activemodel::errors#added?()","rails::initializable::initializer#after()","rails::generators::actions#after_bundle()","activerecord::transactions::classmethods#after_commit()","activejob::callbacks::classmethods#after_enqueue()","rails::railtie::configuration#after_initialize()","activejob::callbacks::classmethods#after_perform()","activerecord::transactions::classmethods#after_rollback()","activejob::testhelper#after_teardown()","activerecord::testfixtures#after_teardown()","activemodel::validations::callbacks::classmethods#after_validation()","activemodel::attributemethods::classmethods#alias_attribute()","actionmailer::collector#all()","actionmailer::preview::all()","activerecord::scoping::named::classmethods#all()","rails::generators::activemodel::all()","rails::paths::root#all_paths()","activerecord::core::classmethods#allocate()","activerecord::connectionadapters::databaselimits#allowed_index_name_length()","activerecord::connectionadapters::sqlite3adapter#allowed_index_name_length()","activerecord::migration#announce()","actionmailer::collector#any()","activerecord::associations::collectionproxy#any?()","activerecord::relation#any?()","activerecord::connectionadapters::connectionpool::queue#any_waiting?()","rails::api::apptask#api_dir()","rails::api::repotask#api_dir()","rails::api::task#api_main()","rails::appbuilder#app()","rails::consolemethods#app()","rails::engine#app()","rails::pluginbuilder#app()","rails::server#app()","rails::railtie::configuration#app_generators()","rails::railtie::configuration#app_middleware()","activerecord::associations::collectionproxy#append()","actionview::viewpaths#append_view_path()","actionview::viewpaths::classmethods#append_view_path()","rails::application()","rails::generators::actions#application()","rails::generators::namedbase#application_name()","activerecord::associations::collectionproxy#arel()","rails::generators::testing::behaviour::classmethods#arguments()","activejob::callbacks::classmethods#around_enqueue()","activejob::callbacks::classmethods#around_perform()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","rails::generators::testing::assertions#assert_class_method()","rails::generators::testing::assertions#assert_directory()","actionmailer::testhelper#assert_emails()","activejob::testhelper#assert_enqueued_jobs()","activejob::testhelper#assert_enqueued_with()","rails::generators::testing::assertions#assert_field_default_value()","rails::generators::testing::assertions#assert_field_type()","rails::generators::testing::assertions#assert_file()","rails::generators::testing::assertions#assert_instance_method()","rails::generators::testing::assertions#assert_method()","rails::generators::testing::assertions#assert_migration()","rails::generators::testing::assertions#assert_no_directory()","actionmailer::testhelper#assert_no_emails()","activejob::testhelper#assert_no_enqueued_jobs()","rails::generators::testing::assertions#assert_no_file()","rails::generators::testing::assertions#assert_no_migration()","activejob::testhelper#assert_no_performed_jobs()","activejob::testhelper#assert_performed_jobs()","activejob::testhelper#assert_performed_with()","actionview::helpers::asseturlhelper#asset_path()","actionview::helpers::asseturlhelper#asset_url()","activerecord::attributeassignment#assign_attributes()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","actionview::helpers::atomfeedhelper#atom_feed()","actionmailer::base#attachments()","actionmailer::mailhelper#attachments()","activerecord::readonlyattributes::classmethods#attr_readonly()","activemodel::attributemethods::classmethods#attribute_alias()","activemodel::attributemethods::classmethods#attribute_alias?()","activerecord::attributemethods#attribute_for_inspect()","activemodel::validations::classmethods#attribute_method?()","activerecord::attributemethods::classmethods#attribute_method?()","activerecord::attributemethods::primarykey#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods#attribute_missing()","activerecord::attributemethods#attribute_names()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributemethods#attribute_present?()","activerecord::attributemethods#attributes()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::dynamicmatchers::finder#attributes_hash()","rails::generators::namedbase#attributes_names()","actionview::helpers::asseturlhelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","actionview::helpers::asseturlhelper#audio_url()","activemodel::securepassword::instancemethodsonactivation#authenticate()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","rails::paths::root#autoload_once()","rails::engine::configuration#autoload_once_paths()","rails::engine::configuration#autoload_paths()","rails::paths::root#autoload_paths()","activerecord::reflection::macroreflection#autosave=()","rails::dbconsole#available_environments()","activerecord::calculations#average()","rails::backtrace_cleaner()","rails::generators::base::banner()","activerecord::inheritance::classmethods#base_class()","rails::generators::base::base_name()","rails::generators::base::base_root()","activerecord::migrationproxy#basename()","activerecord::persistence#becomes()","activerecord::persistence#becomes!()","rails::initializable::initializer#before()","rails::railtie::configuration#before_configuration()","rails::railtie::configuration#before_eager_load()","activejob::callbacks::classmethods#before_enqueue()","rails::railtie::configuration#before_initialize()","activejob::callbacks::classmethods#before_perform()","activejob::testhelper#before_setup()","activerecord::testfixtures#before_setup()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresql::databasestatements#begin_db_transaction()","activerecord::connectionadapters::abstractmysqladapter#begin_isolated_db_transaction()","activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()","activerecord::connectionadapters::postgresql::databasestatements#begin_isolated_db_transaction()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","rails::initializable::initializer#belongs_to?()","rails::appbuilder#bin()","rails::pluginbuilder#bin()","activerecord::connectionadapters::postgresql::oid::bit::data#binary?()","rails::initializable::initializer#bind()","activerecord::associations::associationscope::bindsubstitution#bind_value()","activerecord::connectionadapters::postgresql::columnmethods#bit()","activerecord::connectionadapters::postgresql::columnmethods#bit_varying()","activemodel::errors#blank?()","activerecord::relation#blank?()","actionmailer::mailhelper#block_format()","activerecord::dynamicmatchers::finder#body()","activerecord::dynamicmatchers::method#body()","actionview::resolver::path::build()","activerecord::associationrelation#build()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::build()","activerecord::associations::collectionproxy#build()","activerecord::relation#build()","rails::generators::activemodel::build()","activejob::queueadapters::queueclassicadapter::build_queue()","rails::application::defaultmiddlewarestack#build_stack()","actionview::helpers::formbuilder#button()","actionview::helpers::formtaghelper#button_tag()","actionview::helpers::urlhelper#button_to()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","activerecord::fixtureset::cache_fixtures()","activerecord::fixtureset::cache_for_connection()","actionview::helpers::cachehelper#cache_fragment_name()","actionview::helpers::cachehelper#cache_if()","activerecord::integration#cache_key()","actionview::base::cache_template_loading()","actionview::base::cache_template_loading=()","actionview::helpers::cachehelper#cache_unless()","activerecord::attributemethods::read::classmethods#cached_attributes_deprecation_warning()","activerecord::fixtureset::cached_fixtures()","activerecord::calculations#calculate()","actionmailer::preview::call()","actionview::template::handlers::builder#call()","actionview::template::handlers::erb::call()","actionview::template::handlers::erb#call()","actionview::template::handlers::raw#call()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::migration::checkpending#call()","activerecord::querycache#call()","rails::application#call()","rails::engine#call()","rails::rack::debugger#call()","rails::rack::logtailer#call()","rails::rack::logger#call()","rails::rack::logger#call_app()","rails::generators::actions#capify!()","actionview::helpers::capturehelper#capture()","rails::generators::testing::behaviour#capture()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractadapter#case_sensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_comparison()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_modifier()","actionview::helpers::taghelper#cdata_section()","activerecord::connectionadapters::table#change()","activerecord::connectionadapters::postgresql::schemastatements#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::postgresql::schemastatements#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::abstractmysqladapter#change_column_null()","activerecord::connectionadapters::postgresql::schemastatements#change_column_null()","activerecord::connectionadapters::sqlite3adapter#change_column_null()","activerecord::connectionadapters::schemastatements#change_column_null()","activerecord::connectionadapters::abstractmysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::dirty#changes()","activemodel::dirty#changes_applied()","activerecord::connectionadapters::abstractmysqladapter#charset()","activerecord::tasks::databasetasks#charset()","activerecord::tasks::databasetasks#charset_current()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::formtaghelper#check_box_tag()","rails::generators::namedbase::check_class_collision()","activerecord::migration::check_pending!()","activerecord::tasks::databasetasks#check_schema_file()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","rails::paths::path#children()","activerecord::connectionadapters::postgresql::columnmethods#cidr()","activerecord::connectionadapters::postgresql::columnmethods#citext()","activerecord::attributemethods::classmethods#class_method_defined_within?()","rails::generators::namedbase#class_name()","rails::generators::namedbase#class_path()","activemodel::errors#clear()","activerecord::associations::collectionproxy#clear()","activerecord::connectionadapters::connectionpool::queue#clear()","activerecord::connectionadapters::mysqladapter::statementpool#clear()","activerecord::connectionadapters::postgresqladapter::statementpool#clear()","activerecord::connectionadapters::sqlite3adapter::statementpool#clear()","activerecord::connectionadapters::statementpool#clear()","activesupport::cache::redisstore#clear()","activerecord::connectionadapters::schemacache#clear!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activemodel::dirty#clear_attribute_changes()","actionview::resolver#clear_cache()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::abstractmysqladapter#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqlite3adapter#clear_cache!()","activemodel::dirty#clear_changes_information()","activerecord::countercache#clear_destroy_state()","activejob::testhelper#clear_enqueued_jobs()","activejob::testhelper#clear_performed_jobs()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activemodel::validations::classmethods#clear_validators!()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresql::schemastatements#client_min_messages()","activerecord::connectionadapters::postgresql::schemastatements#client_min_messages=()","activerecord::core#clone()","activerecord::connectionadapters::abstractadapter#close()","activerecord::connectionadapters::abstractmysqladapter#collation()","activerecord::connectionadapters::postgresql::schemastatements#collation()","activerecord::tasks::databasetasks#collation()","activerecord::tasks::databasetasks#collation_current()","actionview::helpers::formbuilder#collection_check_boxes()","actionview::helpers::formoptionshelper#collection_check_boxes()","actionview::helpers::formbuilder#collection_radio_buttons()","actionview::helpers::formoptionshelper#collection_radio_buttons()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","activerecord::connectionadapters::abstractadapter#collector()","actionview::helpers::formhelper#color_field()","actionview::helpers::formtaghelper#color_field_tag()","rails::application::configuration#colorize_logging()","rails::application::configuration#colorize_logging=()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::associations::joindependency::aliases::table#column_aliases()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::attributemethods::classmethods#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::columndumper#column_spec()","activerecord::connectionadapters::postgresql::schemastatements#columns()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::tabledefinition#columns()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::realtransaction#commit()","activerecord::connectionadapters::savepointtransaction#commit()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresql::databasestatements#commit_db_transaction()","activerecord::connectionadapters::transactionstate#committed?()","activerecord::connectionadapters::abstractadapter::bindcollector#compile()","activerecord::connectionadapters::abstractadapter::sqlstring#compile()","activerecord::connectionadapters::transactionstate#completed?()","rails::api::apptask#component_root_dir()","rails::api::repotask#component_root_dir()","activerecord::aggregations::classmethods#composed_of()","actionview::helpers::asseturlhelper#compute_asset_extname()","actionview::helpers::asseturlhelper#compute_asset_host()","actionview::helpers::asseturlhelper#compute_asset_path()","activerecord::reflection::macroreflection#compute_class()","rails::rack::logger#compute_tags()","activerecord::inheritance::classmethods#compute_type()","actionview::helpers::texthelper#concat()","activerecord::associations::collectionproxy#concat()","rails::paths::path#concat()","actionview::testcase::behavior#config()","rails::appbuilder#config()","rails::dbconsole#config()","rails::engine#config()","rails::pluginbuilder#config()","rails::railtie#config()","rails::application#config_for()","rails::appbuilder#config_when_updating()","rails::appbuilder#configru()","rails::configuration()","activerecord::core::configurations()","rails::dbconsole#configurations()","activerecord::core::configurations=()","rails::railtie::configure()","rails::railtie#configure()","rails::railtie::configurable::classmethods#configure()","rails::api::task#configure_rdoc_files()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::connectionhandling#connected?()","activerecord::connectionadapters::connectionpool#connection()","activerecord::connectionhandling#connection()","activerecord::migration#connection()","activerecord::connectionhandling#connection_config()","activerecord::core::connection_handler()","activerecord::core#connection_handler()","activerecord::core::connection_handler=()","activerecord::connectionhandling#connection_id()","activerecord::connectionhandling#connection_id=()","activerecord::connectionhandling#connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pool_list()","activerecord::connectionadapters::connectionhandler#connection_pools()","rails::application#console()","rails::railtie::console()","activerecord::modelschema::classmethods#content_columns()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actionview::helpers::activemodelinstancetag#content_tag()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","activerecord::fixtureset::context_class()","rails::consolemethods#controller()","actionmailer::base::controller_path()","actionview::testcase::testcontroller#controller_path=()","activerecord::legacyyamladapter::convert()","activerecord::legacyyamladapter::rails41::convert()","actionview::modelnaming#convert_to_model()","activerecord::migration#copy()","activemodel::errors#count()","activerecord::associations::collectionproxy#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activerecord::associationrelation#create()","activerecord::associations::collectionproxy#create()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::connectionadapters::postgresql::databasestatements#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::tasks::databasetasks#create()","rails::application::create()","activerecord::associationrelation#create!()","activerecord::associations::collectionproxy#create!()","activerecord::persistence::classmethods#create!()","activerecord::relation#create!()","activerecord::tasks::databasetasks#create_all()","activerecord::tasks::databasetasks#create_current()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresql::schemastatements#create_database()","activerecord::fixtureset::create_fixtures()","object#create_fixtures()","rails::generators::testing::behaviour#create_generated_attribute()","activerecord::connectionadapters::schemastatements#create_join_table()","rails::generators::migration#create_migration()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::postgresql::schemastatements#create_schema()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::schemamigration::create_table()","activerecord::querymethods#create_with()","actionview::helpers::csrfhelper#csrf_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tags()","activerecord::connectionadapters::postgresql::schemastatements#ctype()","activerecord::tasks::databasetasks#current_config()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresql::schemastatements#current_database()","actionview::helpers::urlhelper#current_page?()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","activerecord::connectionadapters::postgresql::schemastatements#current_schema()","actionmailer::collector#custom()","actionview::helpers::texthelper#cycle()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activerecord::attributemethods::classmethods#dangerous_class_method?()","rails::application::configuration#database_configuration()","rails::appbuilder#database_yml()","actionview::helpers::formhelper#date_field()","actionview::helpers::formtaghelper#date_field_tag()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","activerecord::connectionadapters::postgresql::columnmethods#daterange()","actionview::helpers::formhelper#datetime_field()","actionview::helpers::formtaghelper#datetime_field_tag()","actionview::helpers::formhelper#datetime_local_field()","actionview::helpers::formtaghelper#datetime_local_field_tag()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","rails::appbuilder#db()","activerecord::tasks::databasetasks#db_dir()","actionview::helpers::debughelper#debug()","rails::console#debugger?()","activerecord::persistence#decrement()","activesupport::cache::redisstore#decrement()","activerecord::persistence#decrement!()","activerecord::countercache::classmethods#decrement_counter()","actionmailer::base::default()","rails::generators::base::default_aliases_for_option()","rails::generators::base::default_for_option()","rails::generators::base::default_generator_root()","actionmailer::base#default_i18n_subject()","rails::server#default_options()","actionmailer::base::default_options=()","activerecord::scoping::default::classmethods#default_scope()","rails::generators::base::default_source_root()","rails::generators::base::default_value_for_option()","activerecord::dynamicmatchers::method#define()","activerecord::schema::define()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activemodel::callbacks#define_model_callbacks()","actionview::template::types::delegate_to()","activemodel::errors#delete()","activerecord::associations::collectionproxy#delete()","activerecord::connectionadapters::connectionpool::queue#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::connectionadapters::mysqladapter::statementpool#delete()","activerecord::connectionadapters::postgresqladapter::statementpool#delete()","activerecord::connectionadapters::statementpool#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","rails::configuration::middlewarestackproxy#delete()","activerecord::associations::collectionproxy#delete_all()","activerecord::relation#delete_all()","activesupport::cache::redisstore#delete_entry()","activesupport::cache::redisstore#delete_matched()","actionmailer::logsubscriber#deliver()","actionmailer::messagedelivery#deliver_later()","actionmailer::messagedelivery#deliver_later!()","actionmailer::messagedelivery#deliver_now()","actionmailer::messagedelivery#deliver_now!()","actionview::digestor#dependencies()","rails::deprecatedconstant::deprecate()","rails::api::task#desc()","rails::generators::base::desc()","activerecord::inheritance::classmethods#descends_from_active_record?()","activejob::arguments#deserialize()","activejob::core::classmethods#deserialize()","rails::generators::testing::behaviour::classmethods#destination()","activerecord::associations::collectionproxy#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","rails::generators::activemodel#destroy()","activerecord::persistence#destroy!()","activerecord::associations::collectionproxy#destroy_all()","activerecord::relation#destroy_all()","activerecord::persistence#destroyed?()","activerecord::autosaveassociation#destroyed_by_association()","activerecord::autosaveassociation#destroyed_by_association=()","actionview::lookupcontext::viewpaths#detail_args_for()","actionview::viewpaths#details_for_lookup()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","actionmailer::testcase::behavior::classmethods#determine_default_mailer()","actionview::digestor::digest()","actionview::digestor#digest()","sourceannotationextractor::annotation::directories()","activerecord::connectionadapters::querycache::dirties_query_cache()","actionview::lookupcontext::detailscache#disable_cache()","activerecord::migration::disable_ddl_transaction!()","activerecord::connectionadapters::abstractadapter#disable_extension()","activerecord::connectionadapters::postgresqladapter#disable_extension()","activerecord::core::disable_implicit_join_references=()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqlite3adapter#disconnect!()","sourceannotationextractor#display()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::associations::collectionproxy#distinct()","activerecord::querymethods#distinct()","actionview::helpers::recordtaghelper#div_for()","actionview::recordidentifier#dom_class()","actionview::recordidentifier#dom_id()","activerecord::migration#down()","activerecord::tasks::databasetasks#drop()","activerecord::tasks::databasetasks#drop_all()","activerecord::tasks::databasetasks#drop_current()","activerecord::connectionadapters::schemastatements#drop_join_table()","activerecord::connectionadapters::postgresql::schemastatements#drop_schema()","activerecord::connectionadapters::abstractmysqladapter#drop_table()","activerecord::connectionadapters::postgresql::schemastatements#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::schemamigration::drop_table()","activerecord::core#dup()","activemodel::errors#each()","activerecord::connectionadapters::mysqladapter::statementpool#each()","activerecord::connectionadapters::postgresqladapter::statementpool#each()","activerecord::connectionadapters::sqlite3adapter::statementpool#each()","activerecord::connectionadapters::statementpool#each()","activerecord::fixtureset#each()","activerecord::result#each()","rails::engine::railties#each()","rails::paths::path#each()","activerecord::querymethods#eager_load()","rails::paths::root#eager_load()","rails::engine#eager_load!()","rails::railtie::configuration#eager_load_namespaces()","rails::engine::configuration#eager_load_paths()","activerecord::relation#eager_loading?()","actionmailer::preview::email_exists?()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionmailer::preview::emails()","actionview::helpers::formbuilder#emitted_hidden_id?()","activemodel::errors#empty?()","activerecord::associations::collectionproxy#empty?()","activerecord::relation#empty?()","activerecord::result#empty?()","activerecord::connectionadapters::abstractmysqladapter#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::abstractadapter#enable_extension()","activerecord::connectionadapters::postgresqladapter#enable_extension()","activerecord::connectionadapters::querycache#enable_query_cache!()","actionview::template#encode!()","activerecord::core#encode_with()","activerecord::relation#encode_with()","activerecord::connectionadapters::postgresql::schemastatements#encoding()","activerecord::connectionadapters::sqlite3adapter#encoding()","rails::application::configuration#encoding=()","rails::engine::endpoint()","rails::engine#endpoint()","activerecord::testfixtures#enlist_fixture_connections()","activejob::enqueuing#enqueue()","activejob::queueadapters::testadapter#enqueued_jobs()","activerecord::enum#enum()","sourceannotationextractor::enumerate()","activerecord::tasks::databasetasks#env()","rails::env()","rails::env=()","rails::application#env_config()","rails::engine#env_config()","rails::console#environment()","rails::dbconsole#environment()","rails::generators::actions#environment()","rails::console#environment?()","actionview::filesystemresolver#eql?()","activemodel::name#eql?()","activerecord::core#eql?()","actionview::helpers::activemodelinstancetag#error_message()","activerecord::connectionadapters::mysql2adapter#error_number()","actionview::helpers::activemodelinstancetag#error_wrapping()","activemodel::validations#errors()","rails::generators::activemodel#errors()","activerecord::connectionadapters::postgresql::quoting#escape_bytea()","actionview::helpers::javascripthelper#escape_javascript()","actionview::helpers::taghelper#escape_once()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::connectionhandling#establish_connection()","activerecord::spawnmethods#except()","actionview::helpers::texthelper#excerpt()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::postgresql::databasestatements#exec_delete()","activerecord::connectionadapters::sqlite3adapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::postgresql::databasestatements#exec_insert()","activerecord::migration#exec_migration()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql2adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresql::databasestatements#exec_query()","activerecord::connectionadapters::sqlite3adapter#exec_query()","activerecord::connectionadapters::postgresql::databasestatements#exec_rollback_db_transaction()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::postgresql::databasestatements#exec_update()","activerecord::connectionadapters::sqlite3adapter#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_without_stmt()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresql::databasestatements#execute()","activesupport::cache::redisstore#exist?()","rails::paths::path#existent()","rails::paths::path#existent_directories()","rails::generators::actions::createmigration#existing_migration()","actionmailer::preview::exists?()","actionview::lookupcontext::viewpaths#exists?()","activerecord::findermethods#exists?()","rails::generators::actions::createmigration#exists?()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","rails::paths::path#expanded()","activerecord::connectionadapters::abstractadapter#expire()","activesupport::cache::redisstore#expire()","activerecord::connectionadapters::mysql2adapter#explain()","activerecord::connectionadapters::postgresql::databasestatements#explain()","activerecord::connectionadapters::sqlite3adapter#explain()","activerecord::relation#explain()","activerecord::querymethods#extending()","activerecord::connectionadapters::postgresqladapter#extension_enabled?()","activerecord::connectionadapters::abstractadapter#extensions()","activerecord::connectionadapters::postgresqladapter#extensions()","sourceannotationextractor::annotation::extensions()","rails::generators::actions#extify()","sourceannotationextractor#extract_annotations_from()","rails::generators::base#extract_last_module()","rails::generators::fallbacks()","actionview::helpers::assettaghelper#favicon_link_tag()","activesupport::cache::redisstore#fetch_multi()","actionview::helpers::formtaghelper#field_set_tag()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","activerecord::associations::collectionproxy#fifth()","activerecord::findermethods#fifth()","activerecord::findermethods#fifth!()","actionview::helpers::formbuilder#file_field()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","rails::generators::namedbase#file_path()","activerecord::connectionadapters::transactionstate#finalized?()","actionmailer::preview::find()","actionview::lookupcontext::viewpaths#find()","activerecord::associations::collectionproxy#find()","activerecord::findermethods#find()","rails::engine::find()","rails::generators::activemodel::find()","sourceannotationextractor#find()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","actionview::resolver#find_all_anywhere()","activerecord::findermethods#find_by()","activerecord::findermethods#find_by!()","activerecord::querying#find_by_sql()","rails::dbconsole#find_cmd_and_exec()","activerecord::batches#find_each()","actionview::lookupcontext::viewpaths#find_file()","sourceannotationextractor#find_in()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_nth()","activerecord::findermethods#find_nth!()","activerecord::findermethods#find_nth_with_limit()","activerecord::findermethods#find_one()","activerecord::relation#find_or_create_by()","activerecord::relation#find_or_create_by!()","activerecord::relation#find_or_initialize_by()","rails::application::find_root()","rails::engine::find_root()","activerecord::findermethods#find_some()","activerecord::findermethods#find_take()","actionview::lookupcontext::viewpaths#find_template()","activerecord::findermethods#find_with_ids()","activerecord::dynamicmatchers::findby#finder()","activerecord::dynamicmatchers::findbybang#finder()","activerecord::dynamicmatchers::finder#finder()","activerecord::associations::collectionproxy#first()","activerecord::findermethods#first()","rails::paths::path#first()","activerecord::findermethods#first!()","actionview::partialiteration#first?()","activerecord::fixtureset::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","activerecord::tasks::databasetasks#fixtures_path()","actionview::template::handlers::erubis#flush_newline_if_pending()","actionview::helpers::asseturlhelper#font_path()","actionview::helpers::asseturlhelper#font_url()","activerecord::associations::foreignassociation#foreign_key_present?()","activerecord::connectionadapters::abstractmysqladapter#foreign_keys()","activerecord::connectionadapters::postgresql::schemastatements#foreign_keys()","activerecord::connectionadapters::schemastatements#foreign_keys()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","actionmailer::mailhelper#format_paragraph()","activerecord::associations::collectionproxy#forty_two()","activerecord::findermethods#forty_two()","activerecord::findermethods#forty_two!()","activerecord::associations::collectionproxy#fourth()","activerecord::findermethods#fourth()","activerecord::findermethods#fourth!()","activerecord::core#freeze()","activerecord::querymethods#from()","activemodel::serializers::json#from_json()","actionview::logsubscriber#from_rails_root()","activemodel::serializers::xml#from_xml()","activerecord::core#frozen?()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#full_messages_for()","activerecord::connectionadapters::savepointtransaction#full_rollback?()","rails::generators::actions#gem()","rails::generators::actions#gem_group()","actionmailer::gem_version()","actionview::gem_version()","activejob::gem_version()","activemodel::gem_version()","activerecord::gem_version()","rails::gem_version()","rails::appbuilder#gemfile()","rails::pluginbuilder#gemfile()","rails::pluginbuilder#gemfile_entry()","rails::pluginbuilder#gemspec()","rails::generators::actions#generate()","activemodel::errors#generate_message()","rails::railtie::generate_railtie_name()","rails::pluginbuilder#generate_test_dummy()","activerecord::core::classmethods#generated_association_methods()","rails::generators::testing::behaviour#generator()","rails::generators::base::generator_name()","rails::application#generators()","rails::engine::configuration#generators()","rails::railtie::generators()","activemodel::errors#get()","rails::generators::actions#git()","rails::generators::appbase::gemfileentry::github()","rails::appbuilder#gitignore()","rails::pluginbuilder#gitignore()","activerecord::querymethods#group()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","rails::groups()","actionview::template::handlers::erb#handles_encoding?()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::attributemethods#has_attribute?()","activemodel::errors#has_key?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activemodel::securepassword::classmethods#has_secure_password()","activerecord::core#hash()","activerecord::querymethods#having()","actionmailer::base#headers()","rails::generators::help()","rails::consolemethods#helper()","actionview::testcase::behavior::classmethods#helper_class()","actionview::testcase::behavior::classmethods#helper_method()","rails::engine#helpers()","rails::engine#helpers_paths()","activerecord::connectionadapters::postgresql::oid::bit::data#hex?()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","rails::generators::hidden_namespaces()","rails::generators::base::hide!()","rails::generators::hide_namespace()","rails::generators::hide_namespaces()","actionview::helpers::texthelper#highlight()","rails::generators::base::hook_for()","activerecord::connectionadapters::postgresql::columnmethods#hstore()","activemodel::name#human()","activemodel::translation#human_attribute_name()","rails::generators::namedbase#human_name()","activemodel::translation#i18n_scope()","rails::generators::namedbase#i18n_scope()","activerecord::attributemethods::primarykey#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::attributemethods::primarykey#id_before_type_cast()","activerecord::attributemethods::primarykey#id_was()","rails::generators::actions::createmigration#identical?()","activerecord::fixtureset::identify()","activerecord::calculations#ids()","actionview::helpers::assettaghelper#image_alt()","actionview::helpers::asseturlhelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","actionview::helpers::asseturlhelper#image_url()","activerecord::connectionadapters::databaselimits#in_clause_length()","activemodel::errors#include?()","activerecord::associations::collectionproxy#include?()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activesupport::cache::redisstore#increment()","activerecord::persistence#increment!()","activerecord::countercache::classmethods#increment_counter()","rails::generators::namedbase#indent()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::tabledefinition#index()","activerecord::connectionadapters::abstractadapter#index_algorithms()","activerecord::connectionadapters::abstractmysqladapter#index_algorithms()","activerecord::connectionadapters::postgresqladapter#index_algorithms()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","rails::generators::namedbase#index_helper()","activerecord::schemamigration::index_name()","activerecord::connectionadapters::postgresql::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresql::schemastatements#index_name_length()","activerecord::connectionadapters::postgresql::schemastatements#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activerecord::connectionadapters::postgresql::columnmethods#inet()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","activerecord::delegation::delegatecache#inherited()","rails::application::inherited()","rails::engine::inherited()","rails::railtie::inherited()","rails::railtie::configurable::classmethods#inherited()","activerecord::core#init_with()","activerecord::relation#initialize_copy()","activerecord::result#initialize_copy()","activerecord::inheritance#initialize_dup()","activerecord::scoping#initialize_internals_callback()","activerecord::connectionadapters::mysql2adapter#initialize_schema_migrations_table()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","actionmailer::testcase::behavior#initialize_test_deliveries()","activerecord::connectionadapters::sqlite3adapter#initialize_type_map()","rails::application#initialized?()","rails::application#initializer()","rails::generators::actions#initializer()","rails::initializable::classmethods#initializer()","rails::initializable#initializers()","rails::initializable::classmethods#initializers()","rails::initializable::classmethods#initializers_chain()","rails::initializable::classmethods#initializers_for()","actionmailer::base::lateattachmentsproxy#inline()","activerecord::connectionadapters::databasestatements#insert()","rails::configuration::middlewarestackproxy#insert()","rails::configuration::middlewarestackproxy#insert_after()","rails::configuration::middlewarestackproxy#insert_before()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresql::databasestatements#insert_sql()","rails::generators::namedbase#inside_template()","rails::generators::namedbase#inside_template?()","actionview::template#inspect()","activerecord::core#inspect()","activerecord::core::classmethods#inspect()","activerecord::relation#inspect()","rails::info::inspect()","rails::application::instance()","rails::railtie::instance()","rails::railtie::configurable::classmethods#instance()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::persistence::classmethods#instantiate()","activerecord::fixtureset::instantiate_all_loaded_fixtures()","activerecord::fixtureset::instantiate_fixtures()","actionview::template#instrument()","activerecord::connectionadapters::postgresql::columnmethods#int4range()","activerecord::connectionadapters::postgresql::columnmethods#int8range()","activemodel::validations#invalid?()","activerecord::migration::commandrecorder#inverse_of()","rails::generators::invoke()","rails::application#isolate_namespace()","rails::engine::isolate_namespace()","actionview::helpers::javascripthelper#j()","actionview::helpers::assettaghelper#javascript_include_tag()","actionview::helpers::asseturlhelper#javascript_path()","actionview::helpers::javascripthelper#javascript_tag()","actionview::helpers::asseturlhelper#javascript_url()","rails::pluginbuilder#javascripts()","activejob::enqueuing::classmethods#job_or_instantiate()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass#join_table()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","activerecord::connectionadapters::postgresql::columnmethods#json()","activerecord::connectionadapters::postgresql::columnmethods#jsonb()","activemodel::errors#key?()","activerecord::connectionadapters::mysqladapter::statementpool#key?()","activerecord::connectionadapters::postgresqladapter::statementpool#key?()","activerecord::connectionadapters::sqlite3adapter::statementpool#key?()","activerecord::connectionadapters::statementpool#key?()","rails::application#key_generator()","activesupport::cache::redisstore#key_matcher()","activemodel::errors#keys()","rails::paths::root#keys()","activemodel::validator::kind()","activemodel::validator#kind()","activerecord::reflection::macroreflection#klass()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","activerecord::associations::collectionproxy#last()","activerecord::findermethods#last()","activerecord::result#last()","rails::paths::path#last()","activerecord::findermethods#last!()","actionview::partialiteration#last?()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqlite3adapter#last_inserted_id()","actionview::layouts::classmethods#layout()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::associations::collectionproxy#length()","activerecord::connectionadapters::mysqladapter::statementpool#length()","activerecord::connectionadapters::postgresqladapter::statementpool#length()","activerecord::connectionadapters::sqlite3adapter::statementpool#length()","activerecord::connectionadapters::statementpool#length()","activerecord::result#length()","rails::generators::levenshtein_distance()","rails::appbuilder#lib()","rails::generators::actions#lib()","rails::pluginbuilder#lib()","rails::pluginbuilder#license()","activerecord::querymethods#limit()","actionview::helpers::urlhelper#link_to()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","activerecord::relation#load()","rails::api::repotask#load_and_configure_sdoc()","rails::api::task#load_and_configure_sdoc()","rails::engine#load_config_initializer()","rails::engine#load_console()","rails::engine#load_generators()","rails::paths::root#load_paths()","rails::engine#load_runner()","activerecord::tasks::databasetasks#load_schema()","activerecord::tasks::databasetasks#load_schema_current()","activerecord::tasks::databasetasks#load_schema_current_if_exists()","activerecord::migration::load_schema_if_pending!()","activerecord::tasks::databasetasks#load_seed()","rails::engine#load_seed()","activerecord::associations::collectionproxy#load_target()","rails::engine#load_tasks()","activerecord::associations::collectionproxy#loaded?()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior::renderedviewscollection#locals_for()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","rails::appbuilder#log()","rails::generators::actions#log()","rails::application::configuration#log_level()","rails::application::configuration#log_level=()","rails::server#log_path()","actionmailer::logsubscriber#logger()","actionview::logsubscriber#logger()","activerecord::logsubscriber#logger()","activemodel::translation#lookup_ancestors()","actionview::viewpaths#lookup_context()","activerecord::connectionadapters::postgresql::columnmethods#ltree()","activerecord::connectionadapters::postgresql::columnmethods#macaddr()","actionmailer::base#mail()","actionview::helpers::urlhelper#mail_to()","actionmailer::mailhelper#mailer()","actionmailer::testcase::behavior::classmethods#mailer_class()","actionmailer::base::mailer_name()","actionmailer::base#mailer_name()","activerecord::associations::collectionproxy#many?()","activerecord::relation#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::connectionadapters::schemacache#marshal_dump()","activerecord::connectionadapters::schemacache#marshal_load()","activerecord::dynamicmatchers::method::match()","activerecord::calculations#maximum()","activerecord::spawnmethods#merge()","actionmailer::mailhelper#message()","actionmailer::messagedelivery#message()","rails::application#message_verifier()","activemodel::attributemethods#method_missing()","activerecord::migration#method_missing()","rails::railtie::method_missing()","rails::railtie::configurable::classmethods#method_missing()","rails::engine::configuration#middleware()","rails::server#middleware()","activerecord::migration::migrate()","activerecord::migration#migrate()","activerecord::tasks::databasetasks#migrate()","rails::generators::actions::createmigration#migration_dir()","rails::generators::actions::createmigration#migration_file_name()","activerecord::connectionadapters::columndumper#migration_keys()","activerecord::connectionadapters::postgresqladapter#migration_keys()","rails::generators::migration#migration_template()","activerecord::schema#migrations_paths()","activerecord::tasks::databasetasks#migrations_paths()","activerecord::calculations#minimum()","activemodel::naming#model_name()","actionview::modelnaming#model_name_from_record_or_class()","rails::generators::namedbase#module_namespacing()","activerecord::connectionadapters::postgresql::columnmethods#money()","actionview::helpers::formhelper#month_field()","actionview::helpers::formtaghelper#month_field_tag()","rails::generators::namedbase#mountable_engine?()","activerecord::migrationproxy#mtime()","actionview::helpers::formbuilder#multipart=()","rails::generators::base::namespace()","rails::generators::namedbase#namespace()","rails::generators::namedbase#namespaced?()","rails::generators::namedbase#namespaced_class_path()","rails::generators::namedbase#namespaced_file_path()","rails::generators::namedbase#namespaced_path()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","actionview::digestor#nested_dependencies()","actiondispatch::session::redisstore::new()","actionmailer::base::new()","actionmailer::collector::new()","actionmailer::noninferrablemailererror::new()","actionview::digestor::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::formbuilder::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::logsubscriber::new()","actionview::partialiteration::new()","actionview::partialrenderer::new()","actionview::renderer::new()","actionview::resolver::new()","actionview::resolver::cache::smallcache::new()","actionview::resolver::path::new()","actionview::template::new()","actionview::template::types::type::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::behavior::renderedviewscollection::new()","actionview::testcase::testcontroller::new()","activejob::core::new()","activejob::queueadapters::testadapter::new()","activemodel::errors::new()","activemodel::model::new()","activemodel::name::new()","activemodel::validator::new()","activerecord::associationrelation::new()","activerecord::associationrelation#new()","activerecord::associations::associationscope::bindsubstitution::new()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass::new()","activerecord::associations::collectionproxy#new()","activerecord::attributeassignmenterror::new()","activerecord::attributemethods::attributemethodcache::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::connectionpool::queue::new()","activerecord::connectionadapters::connectionpool::reaper::new()","activerecord::connectionadapters::databasestatements::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::mysqladapter::statementpool::new()","activerecord::connectionadapters::postgresql::oid::bit::data::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::querycache::new()","activerecord::connectionadapters::realtransaction::new()","activerecord::connectionadapters::sqlite3adapter::new()","activerecord::connectionadapters::sqlite3adapter::statementpool::new()","activerecord::connectionadapters::sqlite3adapter::version::new()","activerecord::connectionadapters::savepointtransaction::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::statementpool::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::connectionadapters::transactionstate::new()","activerecord::core::new()","activerecord::dynamicmatchers::method::new()","activerecord::fixtureset::new()","activerecord::fixtureset::classcache::new()","activerecord::inheritance::classmethods#new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::checkpending::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querycache::new()","activerecord::querymethods::wherechain::new()","activerecord::recordinvalid::new()","activerecord::recordnotdestroyed::new()","activerecord::recordnotsaved::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::staleobjecterror::new()","activerecord::statementinvalid::new()","activerecord::unknownattributeerror::new()","activerecord::unknownprimarykey::new()","activesupport::cache::redisstore::new()","rails::api::task::new()","rails::application::new()","rails::application::configuration::new()","rails::application::defaultmiddlewarestack::new()","rails::application::routesreloader::new()","rails::backtracecleaner::new()","rails::configuration::middlewarestackproxy::new()","rails::console::new()","rails::dbconsole::new()","rails::engine::new()","rails::engine::configuration::new()","rails::engine::railties::new()","rails::generators::activemodel::new()","rails::generators::appbase::gemfileentry::new()","rails::initializable::initializer::new()","rails::paths::path::new()","rails::paths::root::new()","rails::rack::debugger::new()","rails::rack::logtailer::new()","rails::rack::logger::new()","rails::railtie::new()","rails::railtie::configuration::new()","rails::server::new()","sourceannotationextractor::new()","activerecord::connectionadapters::abstractadapter#new_column()","activerecord::persistence#new_record?()","rails::consolemethods#new_session()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::migration#next_migration_number()","rails::generators::no_color!()","activerecord::notouching::classmethods#no_touching()","activerecord::notouching#no_touching?()","activerecord::querymethods#none()","activerecord::schemamigration::normalize_migration_number()","activerecord::schemamigration::normalized_versions()","activerecord::querymethods::wherechain#not()","activerecord::connectionadapters::connectionpool::queue#num_waiting()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","actionview::helpers::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","activerecord::connectionadapters::postgresql::columnmethods#numrange()","actionview::helpers::activemodelinstancetag#object()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","rails::generators::actions::createmigration#on_conflict_behavior()","activerecord::spawnmethods#only()","rails::server#opt_parser()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#order()","activemodel::naming::param_key()","rails::server::options#parse!()","rails::console::parse_arguments()","rails::dbconsole#parse_arguments()","activemodel::securepassword::instancemethodsonactivation#password=()","activemodel::securepassword::instancemethodsonactivation#password_confirmation=()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","rails::generators::appbase::gemfileentry::path()","actionview::helpers::asseturlhelper#path_to_asset()","actionview::helpers::asseturlhelper#path_to_audio()","actionview::helpers::asseturlhelper#path_to_font()","actionview::helpers::asseturlhelper#path_to_image()","actionview::helpers::asseturlhelper#path_to_javascript()","actionview::helpers::asseturlhelper#path_to_stylesheet()","actionview::helpers::asseturlhelper#path_to_video()","rails::application::configuration#paths()","rails::engine::configuration#paths()","activerecord::dynamicmatchers::method::pattern()","activejob::execution#perform()","activejob::testhelper#perform_enqueued_jobs()","activejob::enqueuing::classmethods#perform_later()","activejob::execution#perform_now()","activejob::execution::classmethods#perform_now()","activejob::queueadapters::testadapter#performed_jobs()","activemodel::model#persisted?()","activerecord::persistence#persisted?()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","activerecord::connectionadapters::abstractmysqladapter#pk_and_sequence_for()","activerecord::calculations#pluck()","activemodel::naming::plural()","rails::generators::namedbase#plural_file_name()","rails::generators::namedbase#plural_name()","rails::generators::namedbase#plural_table_name()","actionview::helpers::texthelper#pluralize()","rails::generators::namedbase#pluralize_table_names?()","activerecord::connectionadapters::postgresql::columnmethods#point()","activerecord::connectionadapters::connectionpool::queue#poll()","activerecord::scoping#populate_with_current_scope_attributes()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::dynamicmatchers::findby::prefix()","activerecord::dynamicmatchers::findbybang::prefix()","activerecord::dynamicmatchers::method::prefix()","activerecord::querymethods#preload()","activerecord::connectionadapters::columndumper#prepare_column_options()","activerecord::associations::collectionproxy#prepend()","actionview::viewpaths#prepend_view_path()","actionview::viewpaths::classmethods#prepend_view_path()","activerecord::core#pretty_print()","activerecord::relation#pretty_print()","actionmailer::preview::preview_name()","activemodel::dirty#previous_changes()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::abstractmysqladapter#primary_key()","activerecord::connectionadapters::postgresql::schemastatements#primary_key()","activerecord::connectionadapters::postgresql::tabledefinition#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::schemamigration::primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::connectionadapters::schemacache#primary_keys()","rails::generators::print_generators()","actionmailer::logsubscriber#process()","activerecord::migration#proper_table_name()","rails::info::property()","actionview::helpers::capturehelper#provide()","activerecord::associationrelation#proxy_association()","activerecord::associations::collectionproxy#proxy_association()","rails::appbuilder#public_directory()","rails::generators::public_namespaces()","rails::public_path()","activerecord::tasks::databasetasks#purge()","activerecord::tasks::databasetasks#purge_all()","activerecord::tasks::databasetasks#purge_current()","activerecord::associations::collectionproxy#push()","rails::paths::path#push()","actionview::nullresolver#query()","activerecord::attributemethods::query#query_attribute()","activejob::testhelper#queue_adapter()","activejob::queueadapter::classmethods#queue_adapter=()","activejob::queuename::classmethods#queue_as()","activejob::queuename#queue_name()","activerecord::connectionadapters::quoting#quote()","rails::generators::actions#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::postgresql::quoting#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::postgresql::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::sqlite3adapter#quote_table_name_for_assignment()","activerecord::connectionadapters::abstractmysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::mysql2adapter#quoted_date()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::abstractmysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::sanitization#quoted_id()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::formtaghelper#radio_button_tag()","actionview::logsubscriber#rails_root()","rails::api::apptask#rails_version()","rails::api::edgetask#rails_version()","rails::api::stabletask#rails_version()","rails::railtie::railtie_name()","rails::railtie#railtie_namespace()","rails::engine#railties()","activesupport::cache::redisstore#raise_errors?()","activerecord::validations#raise_record_invalid()","rails::generators::actions#rake()","rails::application#rake_tasks()","rails::railtie::rake_tasks()","rails::appbuilder#rakefile()","rails::generators::actions#rakefile()","rails::pluginbuilder#rakefile()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","actionview::helpers::outputsafetyhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","activerecord::attributemethods::write#raw_write_attribute()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activesupport::cache::redisstore#read_entry()","activesupport::cache::redisstore#read_multi()","activerecord::store#read_store_attribute()","rails::appbuilder#readme()","rails::generators::actions#readme()","rails::pluginbuilder#readme()","activerecord::querymethods#readonly()","activerecord::core#readonly!()","activerecord::core#readonly?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","activerecord::connectionadapters::connectionpool#reap()","actionmailer::base::receive()","actionmailer::logsubscriber#receive()","activesupport::cache::redisstore#reconnect()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","actionview::recordidentifier#record_key_for_dom_id()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","actionview::template::types::type#ref()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::querymethods#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activerecord::reflection::classmethods#reflections()","actionview::template#refresh()","actionview::template::types::type::register()","sourceannotationextractor::annotation::register_extensions()","actionmailer::base::register_interceptor()","actionmailer::base::register_interceptors()","actionmailer::base::register_observer()","actionmailer::base::register_observers()","actionmailer::previews::classmethods#register_preview_interceptor()","actionmailer::previews::classmethods#register_preview_interceptors()","activerecord::tasks::databasetasks#register_task()","rails::generators::namedbase#regular_class_path()","rails::generators::actions::createmigration#relative_existing_migration()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::associations::collectionproxy#reload()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","rails::application::routesreloader#reload!()","rails::consolemethods#reload!()","rails::application#reload_routes!()","activerecord::connectionadapters::connectionpool#remove()","activerecord::connectionadapters::table#remove()","activerecord::connectionadapters::schemastatements#remove_belongs_to()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::tabledefinition#remove_column()","activerecord::connectionadapters::abstractmysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::connectionadapters::abstractmysqladapter#remove_columns_sql()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionhandling#remove_connection()","activerecord::connectionadapters::schemastatements#remove_foreign_key()","rails::generators::base::remove_hook_for()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::abstractmysqladapter#remove_index_sql()","activerecord::connectionadapters::schemastatements#remove_reference()","activerecord::connectionadapters::table#remove_references()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::abstractmysqladapter#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column_indexes()","activerecord::connectionadapters::abstractmysqladapter#rename_column_sql()","activerecord::connectionadapters::abstractmysqladapter#rename_index()","activerecord::connectionadapters::postgresql::schemastatements#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::table#rename_index()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresql::schemastatements#rename_table()","activerecord::connectionadapters::sqlite3adapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","activerecord::connectionadapters::schemastatements#rename_table_indexes()","actionview::helpers::renderinghelper#render()","actionview::partialrenderer#render()","actionview::renderer#render()","actionview::template#render()","actionview::testcase::behavior#render()","actionview::testcase::behavior::locals#render()","activerecord::logsubscriber#render_bind()","actionview::renderer#render_body()","actionview::logsubscriber#render_collection()","actionview::logsubscriber#render_partial()","actionview::logsubscriber#render_template()","actionview::rendering#render_to_body()","actionview::rendering#rendered_format()","actionview::testcase::behavior#rendered_views()","actionview::testcase::behavior::renderedviewscollection#rendered_views()","activerecord::querymethods#reorder()","activerecord::associations::collectionproxy#replace()","rails::console#require_debugger()","actionview::template::handlers::builder#require_engine()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqlite3adapter#requires_reloading?()","activerecord::associations::collectionproxy#reset()","activerecord::relation#reset()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activerecord::fixtureset::reset_cache()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache::classmethods#reset_counters()","actionview::helpers::texthelper#reset_cycle()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activemodel::attributemethods#respond_to?()","activerecord::attributemethods#respond_to?()","rails::railtie::configurable::classmethods#respond_to?()","rails::railtie::configuration#respond_to?()","rails::railtie::respond_to_missing?()","activemodel::attributemethods#respond_to_without_attributes?()","activemodel::dirty#restore_attributes()","actionmailer::testcase::behavior#restore_delivery_method()","actionmailer::testcase::behavior#restore_test_deliveries()","activerecord::dynamicmatchers::finder#result()","activerecord::connectionhandling#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activejob::enqueuing#retry_job()","activerecord::querymethods#reverse_order()","activerecord::migration#reversible()","activerecord::migration#revert()","activerecord::migration::commandrecorder#revert()","activerecord::migration#reverting?()","rails::generators::actions::createmigration#revoke!()","activerecord::querymethods#rewhere()","activerecord::connectionadapters::realtransaction#rollback()","activerecord::connectionadapters::savepointtransaction#rollback()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::transactionstate#rolledback?()","activerecord::tasks::databasetasks#root()","rails::root()","rails::engine::configuration#root=()","rails::generators::actions#route()","activemodel::naming::route_key()","rails::generators::namedbase#route_url()","rails::engine#routes()","activerecord::connectionadapters::connectionpool::reaper#run()","activerecord::migration#run()","rails::initializable::initializer#run()","rails::generators::testing::behaviour#run_generator()","activerecord::testfixtures#run_in_transaction?()","rails::initializable#run_initializers()","rails::application#runner()","rails::railtie::runner()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","actionview::helpers::texthelper#safe_concat()","actionview::helpers::outputsafetyhelper#safe_join()","rails::console#sandbox?()","actionview::helpers::sanitizehelper#sanitize()","activerecord::sanitization::classmethods#sanitize_conditions()","actionview::helpers::sanitizehelper#sanitize_css()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_hash()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_like()","activerecord::persistence#save()","activerecord::validations#save()","rails::generators::activemodel#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::migration#say()","rails::generators::actions::createmigration#say_status()","activerecord::migration#say_with_time()","activerecord::connectionadapters::abstractadapter#schema_cache=()","activerecord::connectionadapters::abstractadapter#schema_creation()","activerecord::connectionadapters::abstractmysqladapter#schema_creation()","activerecord::connectionadapters::postgresql::schemastatements#schema_exists?()","activerecord::tasks::databasetasks#schema_file()","activerecord::connectionadapters::postgresql::schemastatements#schema_names()","activerecord::connectionadapters::postgresql::schemastatements#schema_search_path()","activerecord::connectionadapters::postgresql::schemastatements#schema_search_path=()","activerecord::associations::collectionproxy#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::associations::collectionproxy#scoping()","activerecord::relation#scoping()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","activerecord::associations::collectionproxy#second()","activerecord::findermethods#second()","activerecord::findermethods#second!()","rails::application#secrets()","activerecord::tasks::databasetasks#seed_loader()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","activerecord::associations::collectionproxy#select()","activerecord::querymethods#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresql::databasestatements#select_rows()","activerecord::connectionadapters::sqlite3adapter#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::postgresql::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","activerecord::connectionadapters::postgresql::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresql::schemastatements#serial_sequence()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activejob::arguments#serialize()","activejob::core#serialize()","activerecord::attributemethods::serialization::classmethods#serialize()","activejob::testhelper#serialize_args_for_assertion()","activerecord::attributemethods::serialization::classmethods#serialized_attributes()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activejob::core::classmethods#set()","activemodel::errors#set()","actionmailer::base#set_content_type()","actionmailer::testcase::behavior#set_delivery_method()","rails::server#set_environment()","rails::console#set_environment!()","actionmailer::testcase::behavior#set_expected_mail()","activerecord::testfixtures::classmethods#set_fixture_class()","rails::generators::migration#set_migration_assigns!()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::connectionadapters::transactionstate#set_state()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","rails::api::task#setup_horo_variables()","actionview::testcase::behavior#setup_with_controller()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","activerecord::dynamicmatchers::finder#signature()","actionview::helpers::texthelper#simple_format()","activemodel::naming::singular()","rails::generators::namedbase#singular_name()","activemodel::naming::singular_route_key()","rails::generators::namedbase#singular_table_name()","activemodel::errors#size()","activerecord::associations::collectionproxy#size()","activerecord::connectionadapters::schemacache#size()","activerecord::fixtureset#size()","activerecord::relation#size()","activerecord::core#slice()","rails::generators::sorted_groups()","rails::generators::base::source_root()","activerecord::associations::collectionproxy#spawn()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::postgresql::databasestatements#sql_for_insert()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqlite3adapter#sqlite_version()","rails::console::start()","rails::console#start()","rails::dbconsole::start()","rails::dbconsole#start()","rails::server#start()","rails::rack::logger#started_request_message()","activesupport::cache::redisstore#stats()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activerecord::store::classmethods#store_accessor()","activerecord::store::classmethods#stored_attributes()","activerecord::connectionadapters::abstractmysqladapter#strict_mode?()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","activerecord::tasks::databasetasks#structure_dump()","activerecord::tasks::databasetasks#structure_load()","actionview::helpers::assettaghelper#stylesheet_link_tag()","actionview::helpers::asseturlhelper#stylesheet_path()","actionview::helpers::asseturlhelper#stylesheet_url()","rails::pluginbuilder#stylesheets()","rails::generators::subclasses()","rails::railtie::subclasses()","actionview::helpers::formbuilder#submit()","actionview::helpers::formtaghelper#submit_tag()","activerecord::connectionadapters::abstractmysqladapter#subquery_for()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::dynamicmatchers::findbybang::suffix()","activerecord::dynamicmatchers::method::suffix()","activerecord::calculations#sum()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::mysql2adapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqlite3adapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_extensions?()","activerecord::connectionadapters::postgresqladapter#supports_extensions?()","activerecord::connectionadapters::abstractadapter#supports_foreign_keys?()","activerecord::connectionadapters::abstractmysqladapter#supports_foreign_keys?()","activerecord::connectionadapters::postgresqladapter#supports_foreign_keys?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractadapter#supports_indexes_in_create?()","activerecord::connectionadapters::abstractmysqladapter#supports_indexes_in_create?()","activerecord::connectionadapters::postgresqladapter#supports_materialized_views?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::abstractmysqladapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_partial_index?()","activerecord::connectionadapters::postgresqladapter#supports_partial_index?()","activerecord::connectionadapters::sqlite3adapter#supports_partial_index?()","actionmailer::base::supports_path?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractmysqladapter#supports_primary_key?()","activerecord::connectionadapters::postgresqladapter#supports_ranges?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqlite3adapter#supports_statement_cache?()","actionview::template#supports_streaming?()","actionview::template::handlers::erb#supports_streaming?()","activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractmysqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractadapter#supports_views?()","activerecord::connectionadapters::abstractmysqladapter#supports_views?()","activerecord::connectionadapters::postgresqladapter#supports_views?()","activerecord::connectionadapters::sqlite3adapter#supports_views?()","activerecord::migration#suppress_messages()","rails::configuration::middlewarestackproxy#swap()","activerecord::inheritance::classmethods#symbolized_base_class()","activerecord::inheritance::classmethods#symbolized_sti_name()","actionview::helpers::translationhelper#t()","activerecord::associations::joindependency::aliases::table#table()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::abstractmysqladapter#table_exists?()","activerecord::connectionadapters::postgresql::schemastatements#table_exists?()","activerecord::connectionadapters::sqlite3adapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::schemamigration::table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::schemamigration::table_name()","rails::generators::namedbase#table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::migration#table_name_options()","activerecord::fixtureset#table_rows()","activerecord::connectionadapters::sqlite3adapter#table_structure()","activerecord::connectionadapters::postgresql::schemastatements#tables()","activerecord::connectionadapters::schemacache#tables()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","rails::rack::logtailer#tail!()","activerecord::associations::collectionproxy#take()","activerecord::findermethods#take()","activerecord::findermethods#take!()","activerecord::associations::collectionproxy#target()","activerecord::testfixtures#teardown_fixtures()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","rails::generators::namedbase#template()","actionview::lookupcontext::viewpaths#template_exists?()","rails::appbuilder#test()","rails::pluginbuilder#test()","rails::pluginbuilder#test_dummy_assets()","rails::pluginbuilder#test_dummy_clean()","rails::pluginbuilder#test_dummy_config()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","actionmailer::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","rails::generators::testing::behaviour::classmethods#tests()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","activerecord::associations::collectionproxy#third()","activerecord::findermethods#third()","activerecord::findermethods#third!()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::formhelper#time_field()","actionview::helpers::formtaghelper#time_field_tag()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","actionview::helpers::datehelper#time_tag()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","rails::appbuilder#tmp()","activemodel::errors#to_a()","activerecord::associations::collectionproxy#to_a()","activerecord::relation#to_a()","rails::paths::path#to_a()","activerecord::associations::collectionproxy#to_ary()","activerecord::result#to_ary()","rails::paths::path#to_ary()","mysql::time#to_date()","activemodel::errors#to_hash()","activerecord::result#to_hash()","rails::info::to_html()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","actionview::helpers::formbuilder#to_model()","activemodel::conversion#to_model()","activemodel::conversion#to_param()","activerecord::integration#to_param()","activerecord::integration::classmethods#to_param()","actionview::helpers::formbuilder#to_partial_path()","activemodel::conversion#to_partial_path()","actionview::filesystemresolver#to_path()","rails::railtie::configuration#to_prepare()","rails::railtie::configuration#to_prepare_blocks()","actionview::filesystemresolver#to_s()","actionview::fixtureresolver#to_s()","actionview::resolver::path#to_s()","activemodel::name#to_s()","activerecord::connectionadapters::postgresql::oid::bit::data#to_s()","rails::info::to_s()","sourceannotationextractor::annotation#to_s()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::relation#to_sql()","actionview::resolver::path#to_str()","activemodel::name#to_str()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activerecord::serialization#to_xml()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","activerecord::persistence#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::databasestatements#transaction_isolation_levels()","activerecord::connectionadapters::databasestatements#transaction_open?()","activerecord::connectionadapters::databasestatements#transaction_state()","actionview::helpers::translationhelper#translate()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::abstractmysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqlite3adapter#translate_exception()","activerecord::connectionadapters::abstractadapter#translate_exception_class()","actionview::helpers::texthelper#truncate()","activerecord::connectionadapters::abstractmysqladapter#truncate()","activerecord::connectionadapters::databasestatements#truncate()","activerecord::connectionadapters::postgresqladapter#truncate()","rails::initializable::collection#tsort_each_child()","activerecord::connectionadapters::postgresql::columnmethods#tsrange()","activerecord::connectionadapters::postgresql::columnmethods#tstzrange()","activerecord::connectionadapters::postgresql::columnmethods#tsvector()","actionview::template#type()","activerecord::connectionadapters::quoting#type_cast()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()","activerecord::connectionadapters::abstractmysqladapter#type_to_sql()","activerecord::connectionadapters::postgresql::schemastatements#type_to_sql()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activemodel::naming::uncountable?()","rails::generators::namedbase#uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activerecord::connectionadapters::postgresql::quoting#unescape_bytea()","activerecord::associations::collectionproxy#uniq()","activerecord::querymethods#uniq()","activerecord::relation#uniq_value()","activerecord::connectionadapters::abstractadapter#unprepared_statement()","activerecord::connectionadapters::abstractmysqladapter#unquoted_false()","activerecord::connectionadapters::quoting#unquoted_false()","activerecord::connectionadapters::abstractmysqladapter#unquoted_true()","activerecord::connectionadapters::quoting#unquoted_true()","activerecord::querymethods#unscope()","activerecord::scoping::default::classmethods#unscoped()","rails::configuration::middlewarestackproxy#unshift()","rails::paths::path#unshift()","activerecord::migration#up()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::relation#update()","rails::generators::activemodel#update()","activerecord::persistence#update!()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::persistence#update_columns()","activerecord::countercache::classmethods#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::postgresql::databasestatements#update_sql()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actionview::routingurlfor#url_for()","actionview::helpers::asseturlhelper#url_to_asset()","actionview::helpers::asseturlhelper#url_to_audio()","actionview::helpers::asseturlhelper#url_to_font()","actionview::helpers::asseturlhelper#url_to_image()","actionview::helpers::asseturlhelper#url_to_javascript()","actionview::helpers::asseturlhelper#url_to_stylesheet()","actionview::helpers::asseturlhelper#url_to_video()","rails::generators::base::usage_path()","rails::configuration::middlewarestackproxy#use()","activerecord::connectionadapters::postgresqladapter#use_insert_returning?()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","actionview::helpers::formtaghelper#utf8_enforcer_tag()","activerecord::connectionadapters::postgresql::columnmethods#uuid()","activemodel::validations#valid?()","activerecord::dynamicmatchers::method#valid?()","activerecord::validations#valid?()","activerecord::connectionadapters::sqlite3adapter#valid_alter_table_type?()","activerecord::connectionadapters::abstractadapter#valid_type?()","activerecord::connectionadapters::abstractmysqladapter#valid_type?()","activerecord::connectionadapters::postgresqladapter#valid_type?()","activemodel::validations#validate()","activemodel::validations::classmethods#validate()","activemodel::validator#validate()","activerecord::validations#validate()","activerecord::validations#validate!()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_absence_of()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activerecord::validations::classmethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activemodel::errors#values()","activerecord::relation#values()","rails::paths::root#values()","rails::paths::root#values_at()","rails::appbuilder#vendor()","rails::generators::actions#vendor()","rails::appbuilder#vendor_javascripts()","rails::appbuilder#vendor_stylesheets()","activerecord::connectionadapters::abstractadapter#verify!()","actionmailer::version()","actionview::version()","activejob::version()","activemodel::version()","activerecord::version()","activerecord::schemamigration#version()","rails::version()","rails::generators::appbase::gemfileentry::version()","rails::generators::appbase::gemfileentry#version()","actionview::helpers::asseturlhelper#video_path()","actionview::helpers::assettaghelper#video_tag()","actionview::helpers::asseturlhelper#video_url()","actionview::rendering#view_context()","actionview::rendering#view_context_class()","actionview::rendering::classmethods#view_context_class()","actionview::viewpaths::classmethods#view_paths()","actionview::lookupcontext::viewpaths#view_paths=()","actionview::viewpaths::classmethods#view_paths=()","actionview::testcase::behavior::renderedviewscollection#view_rendered?()","actionview::rendering#view_renderer()","activerecord::connectionadapters::abstractmysqladapter::schemacreation#visit_addcolumn()","rails::railtie::configuration#watchable_dirs()","rails::railtie::configuration#watchable_files()","actionview::helpers::formhelper#week_field()","actionview::helpers::formtaghelper#week_field_tag()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","activesupport::cache::redisstore#with()","activerecord::connectionadapters::connectionpool#with_connection()","actionview::lookupcontext::viewpaths#with_fallbacks()","activerecord::locking::pessimistic#with_lock()","activerecord::connectionadapters::abstractadapter#without_prepared_statement?()","actionview::helpers::texthelper#word_wrap()","rails::generators::namedbase#wrap_with_namespace()","activerecord::migration#write()","activesupport::cache::redisstore#write()","activerecord::attributemethods::write#write_attribute()","activesupport::cache::redisstore#write_entry()","activerecord::store#write_store_attribute()","activerecord::connectionadapters::postgresql::columnmethods#xml()","","","","","","",""],"info":[["ActionController","","classes/ActionController.html","",""],["ActionController::TestCase","","classes/ActionController/TestCase.html","",""],["ActionDispatch","","classes/ActionDispatch.html","",""],["ActionDispatch::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","",""],["ActionDispatch::Session","","classes/ActionDispatch/Session.html","",""],["ActionDispatch::Session::RedisStore","","classes/ActionDispatch/Session/RedisStore.html","",""],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionMailer::Base::LateAttachmentsProxy","","classes/ActionMailer/Base/LateAttachmentsProxy.html","",""],["ActionMailer::Collector","","classes/ActionMailer/Collector.html","",""],["ActionMailer::DeliveryMethods","","classes/ActionMailer/DeliveryMethods.html","","<p>This module handles everything related to mail delivery, from registering\nnew delivery methods to configuring …\n"],["ActionMailer::DeliveryMethods::ClassMethods","","classes/ActionMailer/DeliveryMethods/ClassMethods.html","","<p>Helpers for creating and wrapping delivery behavior, used by\nDeliveryMethods.\n"],["ActionMailer::DeliveryMethods::Mail","","classes/ActionMailer/DeliveryMethods/Mail.html","",""],["ActionMailer::InlinePreviewInterceptor","","classes/ActionMailer/InlinePreviewInterceptor.html","","<p>Implements a mailer preview interceptor that converts image tag src\nattributes that use inline cid: style …\n"],["ActionMailer::LogSubscriber","","classes/ActionMailer/LogSubscriber.html","","<p>Implements the ActiveSupport::LogSubscriber for logging notifications when\nemail is delivered and received. …\n"],["ActionMailer::MailHelper","","classes/ActionMailer/MailHelper.html","","<p>Provides helper methods for ActionMailer::Base that can be used for easily\nformatting messages, accessing …\n"],["ActionMailer::MessageDelivery","","classes/ActionMailer/MessageDelivery.html","","<p>The <code>ActionMailer::MessageDelivery</code> class is used by\n<code>ActionMailer::Base</code> when creating a new mailer.\n<code>MessageDelivery</code> …\n"],["ActionMailer::NonInferrableMailerError","","classes/ActionMailer/NonInferrableMailerError.html","",""],["ActionMailer::Preview","","classes/ActionMailer/Preview.html","",""],["ActionMailer::Previews","","classes/ActionMailer/Previews.html","",""],["ActionMailer::Previews::ClassMethods","","classes/ActionMailer/Previews/ClassMethods.html","",""],["ActionMailer::Railtie","","classes/ActionMailer/Railtie.html","",""],["ActionMailer::Railtie::ActiveSupport","","classes/ActionMailer/Railtie/ActiveSupport.html","",""],["ActionMailer::TestCase","","classes/ActionMailer/TestCase.html","",""],["ActionMailer::TestCase::Behavior","","classes/ActionMailer/TestCase/Behavior.html","",""],["ActionMailer::TestCase::Behavior::ClassMethods","","classes/ActionMailer/TestCase/Behavior/ClassMethods.html","",""],["ActionMailer::TestHelper","","classes/ActionMailer/TestHelper.html","","<p>Provides helper methods for testing Action Mailer, including #assert_emails\nand #assert_no_emails\n"],["ActionMailer::VERSION","","classes/ActionMailer/VERSION.html","",""],["ActionView","","classes/ActionView.html","",""],["ActionView::Base","","classes/ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file\nhas a <code>.erb</code> …\n"],["ActionView::Context","","classes/ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render a\ntemplate. The default …\n"],["ActionView::DependencyTracker","","classes/ActionView/DependencyTracker.html","",""],["ActionView::DependencyTracker::ThreadSafe","","classes/ActionView/DependencyTracker/ThreadSafe.html","",""],["ActionView::Digestor","","classes/ActionView/Digestor.html","",""],["ActionView::Digestor::ThreadSafe","","classes/ActionView/Digestor/ThreadSafe.html","",""],["ActionView::FileSystemResolver","","classes/ActionView/FileSystemResolver.html","","<p>A resolver that loads files from the filesystem. It allows setting your own\nresolving pattern. Such pattern …\n"],["ActionView::FixtureResolver","","classes/ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],["ActionView::Helpers","","classes/ActionView/Helpers.html","","<p>Active Model Helpers\n<p>Action View Asset URL Helpers\n<p>Action View Atom Feed Helpers\n"],["ActionView::Helpers::ActiveModelHelper","","classes/ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","classes/ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetTagHelper","","classes/ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, JavaScripts …\n"],["ActionView::Helpers::AssetUrlHelper","","classes/ActionView/Helpers/AssetUrlHelper.html","","<p>This module provides methods for generating asset paths and urls.\n\n<pre><code>image_path(&quot;rails.png&quot;)\n# =&gt; &quot;/assets/rails.png&quot; ...\n</code></pre>\n"],["ActionView::Helpers::AtomFeedHelper","","classes/ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::CacheHelper","","classes/ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CaptureHelper","","classes/ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::CsrfHelper","","classes/ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","classes/ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],["ActionView::Helpers::DebugHelper","","classes/ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","classes/ActionView/Helpers/FormBuilder.html","","<p>A <code>FormBuilder</code> object is associated with a particular model\nobject and allows you to generate fields associated …\n"],["ActionView::Helpers::FormHelper","","classes/ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],["ActionView::Helpers::FormOptionsHelper","","classes/ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>The …\n"],["ActionView::Helpers::FormTagHelper","","classes/ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that don&#39;t rely on\nan Active Record object assigned …\n"],["ActionView::Helpers::JavaScriptHelper","","classes/ActionView/Helpers/JavaScriptHelper.html","",""],["ActionView::Helpers::JavaScriptHelper::Encoding","","classes/ActionView/Helpers/JavaScriptHelper/Encoding.html","",""],["ActionView::Helpers::NumberHelper","","classes/ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],["ActionView::Helpers::OutputSafetyHelper","","classes/ActionView/Helpers/OutputSafetyHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","classes/ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::RenderingHelper","","classes/ActionView/Helpers/RenderingHelper.html","","<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to\nuse this …\n"],["ActionView::Helpers::SanitizeHelper","","classes/ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::TagHelper","","classes/ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can&#39;t\nuse a Builder. By default, …\n"],["ActionView::Helpers::TextHelper","","classes/ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","classes/ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","classes/ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::Helpers::UrlHelper::ClassMethods","","classes/ActionView/Helpers/UrlHelper/ClassMethods.html","",""],["ActionView::Layouts","","classes/ActionView/Layouts.html","","<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],["ActionView::Layouts::ClassMethods","","classes/ActionView/Layouts/ClassMethods.html","",""],["ActionView::LogSubscriber","","classes/ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","classes/ActionView/LookupContext.html","",""],["ActionView::LookupContext::DetailsCache","","classes/ActionView/LookupContext/DetailsCache.html","","<p>Add caching behavior on top of Details.\n"],["ActionView::LookupContext::DetailsKey","","classes/ActionView/LookupContext/DetailsKey.html","",""],["ActionView::LookupContext::DetailsKey::ThreadSafe","","classes/ActionView/LookupContext/DetailsKey/ThreadSafe.html","",""],["ActionView::LookupContext::Template","","classes/ActionView/LookupContext/Template.html","",""],["ActionView::LookupContext::ViewPaths","","classes/ActionView/LookupContext/ViewPaths.html","","<p>Helpers related to template lookup using the lookup context information.\n"],["ActionView::ModelNaming","","classes/ActionView/ModelNaming.html","",""],["ActionView::NullResolver","","classes/ActionView/NullResolver.html","",""],["ActionView::PartialIteration","","classes/ActionView/PartialIteration.html","",""],["ActionView::PartialRenderer","","classes/ActionView/PartialRenderer.html","","<p>Action View Partials\n<p>There&#39;s also a convenience method for rendering sub templates within\nthe current …\n"],["ActionView::Railtie","","classes/ActionView/Railtie.html","",""],["ActionView::Railtie::ActionDispatch","","classes/ActionView/Railtie/ActionDispatch.html","",""],["ActionView::Railtie::ActionDispatch::Routing","","classes/ActionView/Railtie/ActionDispatch/Routing.html","",""],["ActionView::Railtie::ActiveSupport","","classes/ActionView/Railtie/ActiveSupport.html","",""],["ActionView::RecordIdentifier","","classes/ActionView/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionView::Renderer","","classes/ActionView/Renderer.html","","<p>This is the main entry point for rendering. It basically delegates to other\nobjects like TemplateRenderer …\n"],["ActionView::Rendering","","classes/ActionView/Rendering.html","",""],["ActionView::Rendering::ClassMethods","","classes/ActionView/Rendering/ClassMethods.html","",""],["ActionView::Resolver","","classes/ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::Resolver::Cache","","classes/ActionView/Resolver/Cache.html","",""],["ActionView::Resolver::Cache::SmallCache","","classes/ActionView/Resolver/Cache/SmallCache.html","",""],["ActionView::Resolver::Path","","classes/ActionView/Resolver/Path.html","","<p>Keeps all information about view path and builds virtual path.\n"],["ActionView::RoutingUrlFor","","classes/ActionView/RoutingUrlFor.html","",""],["ActionView::Template","","classes/ActionView/Template.html","","<p>Action View Template\n<p>Action View Template Handlers\n<p>Action View HTML Template\n"],["ActionView::Template::Handlers","","classes/ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","classes/ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::ERB","","classes/ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Erubis","","classes/ActionView/Template/Handlers/Erubis.html","",""],["ActionView::Template::Handlers::Raw","","classes/ActionView/Template/Handlers/Raw.html","",""],["ActionView::Template::Types","","classes/ActionView/Template/Types.html","",""],["ActionView::Template::Types::Type","","classes/ActionView/Template/Types/Type.html","",""],["ActionView::TestCase","","classes/ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","classes/ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","classes/ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","classes/ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::Behavior::RenderedViewsCollection","","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html","","<p>Need to experiment if this priority is the best one: rendered =&gt;\noutput_buffer\n"],["ActionView::TestCase::TestController","","classes/ActionView/TestCase/TestController.html","",""],["ActionView::VERSION","","classes/ActionView/VERSION.html","",""],["ActionView::ViewPaths","","classes/ActionView/ViewPaths.html","",""],["ActionView::ViewPaths::ClassMethods","","classes/ActionView/ViewPaths/ClassMethods.html","",""],["ActiveJob","","classes/ActiveJob.html","",""],["ActiveJob::Arguments","","classes/ActiveJob/Arguments.html","",""],["ActiveJob::Base","","classes/ActiveJob/Base.html","","<p>Active Job\n<p>Active Job objects can be configured to work with different backend queuing\nframeworks. To …\n"],["ActiveJob::Callbacks","","classes/ActiveJob/Callbacks.html","","<p>Active Job Callbacks\n<p>Active Job provides hooks during the lifecycle of a job. Callbacks allow\nyou to trigger …\n"],["ActiveJob::Callbacks::ClassMethods","","classes/ActiveJob/Callbacks/ClassMethods.html","","<p>These methods will be included into any Active Job object, adding callbacks\nfor <code>perform</code> and <code>enqueue</code> methods. …\n"],["ActiveJob::Core","","classes/ActiveJob/Core.html","",""],["ActiveJob::Core::ClassMethods","","classes/ActiveJob/Core/ClassMethods.html","","<p>These methods will be included into any Active Job object, adding helpers\nfor de/serialization and creation …\n"],["ActiveJob::DeserializationError","","classes/ActiveJob/DeserializationError.html","","<p>Raised when an exception is raised during job arguments deserialization.\n<p>Wraps the original exception …\n"],["ActiveJob::Enqueuing","","classes/ActiveJob/Enqueuing.html","",""],["ActiveJob::Enqueuing::ClassMethods","","classes/ActiveJob/Enqueuing/ClassMethods.html","","<p>Includes the <code>perform_later</code> method for job initialization.\n"],["ActiveJob::Execution","","classes/ActiveJob/Execution.html","",""],["ActiveJob::Execution::ClassMethods","","classes/ActiveJob/Execution/ClassMethods.html","","<p>Includes methods for executing and performing jobs instantly.\n"],["ActiveJob::Logging","","classes/ActiveJob/Logging.html","",""],["ActiveJob::Logging::ActiveSupport","","classes/ActiveJob/Logging/ActiveSupport.html","",""],["ActiveJob::QueueAdapter","","classes/ActiveJob/QueueAdapter.html","",""],["ActiveJob::QueueAdapter::ClassMethods","","classes/ActiveJob/QueueAdapter/ClassMethods.html","","<p>Includes the setter method for changing the active queue adapter.\n"],["ActiveJob::QueueAdapters","","classes/ActiveJob/QueueAdapters.html","","<p>Active Job adapters\n<p>Active Job has adapters for the following queueing backends:\n<p>Backburner\n"],["ActiveJob::QueueAdapters::BackburnerAdapter","","classes/ActiveJob/QueueAdapters/BackburnerAdapter.html","","<p>Backburner adapter for Active Job\n<p>Backburner is a beanstalkd-powered job queue that can handle a very …\n"],["ActiveJob::QueueAdapters::DelayedJobAdapter","","classes/ActiveJob/QueueAdapters/DelayedJobAdapter.html","","<p>Delayed Job adapter for Active Job\n<p>Delayed::Job (or DJ) encapsulates the common pattern of asynchronously …\n"],["ActiveJob::QueueAdapters::InlineAdapter","","classes/ActiveJob/QueueAdapters/InlineAdapter.html","","<p>Active Job Inline adapter\n<p>When enqueueing jobs with the Inline adapter the job will be executed\nimmediately. …\n"],["ActiveJob::QueueAdapters::QuAdapter","","classes/ActiveJob/QueueAdapters/QuAdapter.html","","<p>Qu adapter for Active Job\n<p>Qu is a Ruby library for queuing and processing background jobs. It is\nheavily …\n"],["ActiveJob::QueueAdapters::QueAdapter","","classes/ActiveJob/QueueAdapters/QueAdapter.html","","<p>Que adapter for Active Job\n<p>Que is a high-performance alternative to DelayedJob or QueueClassic that\nimproves …\n"],["ActiveJob::QueueAdapters::QueueClassicAdapter","","classes/ActiveJob/QueueAdapters/QueueClassicAdapter.html","","<p>queue_classic adapter for Active Job\n<p>queue_classic provides a simple interface to a PostgreSQL-backed …\n"],["ActiveJob::QueueAdapters::ResqueAdapter","","classes/ActiveJob/QueueAdapters/ResqueAdapter.html","","<p>Resque adapter for Active Job\n<p>Resque (pronounced like “rescue”) is a Redis-backed library for …\n"],["ActiveJob::QueueAdapters::SidekiqAdapter","","classes/ActiveJob/QueueAdapters/SidekiqAdapter.html","","<p>Sidekiq adapter for Active Job\n<p>Simple, efficient background processing for Ruby. Sidekiq uses threads …\n"],["ActiveJob::QueueAdapters::SneakersAdapter","","classes/ActiveJob/QueueAdapters/SneakersAdapter.html","","<p>Sneakers adapter for Active Job\n<p>A high-performance RabbitMQ background processing framework for Ruby. …\n"],["ActiveJob::QueueAdapters::SuckerPunchAdapter","","classes/ActiveJob/QueueAdapters/SuckerPunchAdapter.html","","<p>Sucker Punch adapter for Active Job\n<p>Sucker Punch is a single-process Ruby asynchronous processing library. …\n"],["ActiveJob::QueueAdapters::TestAdapter","","classes/ActiveJob/QueueAdapters/TestAdapter.html","","<p>Test adapter for Active Job\n<p>The test adapter should be used only in testing. Along with\n<code>ActiveJob::TestCase</code> …\n"],["ActiveJob::QueueName","","classes/ActiveJob/QueueName.html","",""],["ActiveJob::QueueName::ClassMethods","","classes/ActiveJob/QueueName/ClassMethods.html","","<p>Includes the ability to override the default queue name and prefix.\n"],["ActiveJob::Railtie","","classes/ActiveJob/Railtie.html","",""],["ActiveJob::Railtie::ActiveSupport","","classes/ActiveJob/Railtie/ActiveSupport.html","",""],["ActiveJob::SerializationError","","classes/ActiveJob/SerializationError.html","","<p>Raised when an unsupported argument type is being set as job argument. We\ncurrently support NilClass …\n"],["ActiveJob::TestCase","","classes/ActiveJob/TestCase.html","",""],["ActiveJob::TestHelper","","classes/ActiveJob/TestHelper.html","","<p>Provides helper methods for testing Active Job\n"],["ActiveJob::VERSION","","classes/ActiveJob/VERSION.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p>Provides a way to add prefixes and suffixes to your methods as well as …\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>Hash</code> that you can include in your object\nfor handling error messages …\n"],["ActiveModel::ForbiddenAttributesError","","classes/ActiveModel/ForbiddenAttributesError.html","","<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre><code>class Person &lt; ActiveRecord::Base\nend\n ...</code></pre>\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","","<p>Raised when an attribute is not defined.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = ...</code></pre>\n"],["ActiveModel::Model","","classes/ActiveModel/Model.html","","<p>Active Model Basic Model\n<p>Includes the required interface for an object to interact with\n<code>ActionPack</code>, using …\n"],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::SecurePassword","","classes/ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","classes/ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your objects.\n<p>A minimal …\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::Serializers::Xml","","classes/ActiveModel/Serializers/Xml.html","","<p>Active Model XML Serializer\n"],["ActiveModel::StrictValidationFailed","","classes/ActiveModel/StrictValidationFailed.html","","<p>Raised when a validation cannot be corrected by end users and are\nconsidered exceptional.\n\n<pre><code>class Person ...</code></pre>\n"],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::VERSION","","classes/ActiveModel/VERSION.html","",""],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","","<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code>\nand <code>after_validation</code> …\n"],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationRelation","","classes/ActiveRecord/AssociationRelation.html","",""],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre><code>class Ticket &lt; ActiveRecord::Base ...</code></pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","","<p>Active Record Belongs To Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::AssociationScope","","classes/ActiveRecord/Associations/AssociationScope.html","",""],["ActiveRecord::Associations::AssociationScope::BindSubstitution","","classes/ActiveRecord/Associations/AssociationScope/BindSubstitution.html","",""],["ActiveRecord::Associations::Builder","","classes/ActiveRecord/Associations/Builder.html","","<p>This is the parent Association class which defines the variables used by\nall associations.\n<p>The hierarchy …\n"],["ActiveRecord::Associations::Builder::HasAndBelongsToMany","","classes/ActiveRecord/Associations/Builder/HasAndBelongsToMany.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver","","classes/ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","","classes/ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html","",""],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::CollectionProxy","","classes/ActiveRecord/Associations/CollectionProxy.html","","<p>Association proxies in Active Record are middlemen between the object that\nholds the association, known …\n"],["ActiveRecord::Associations::ForeignAssociation","","classes/ActiveRecord/Associations/ForeignAssociation.html","",""],["ActiveRecord::Associations::JoinDependency","","classes/ActiveRecord/Associations/JoinDependency.html","",""],["ActiveRecord::Associations::JoinDependency::Aliases","","classes/ActiveRecord/Associations/JoinDependency/Aliases.html","",""],["ActiveRecord::Associations::JoinDependency::Aliases::Table","","classes/ActiveRecord/Associations/JoinDependency/Aliases/Table.html","",""],["ActiveRecord::AttributeAssignment","","classes/ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","","<p>Active Record Attribute Methods\n"],["ActiveRecord::AttributeMethods::AttributeMethodCache","","classes/ActiveRecord/AttributeMethods/AttributeMethodCache.html","",""],["ActiveRecord::AttributeMethods::BeforeTypeCast","","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html","","<p>Active Record Attribute Methods Before Type Cast\n<p><code>ActiveRecord::AttributeMethods::BeforeTypeCast</code> provides …\n"],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","classes/ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","classes/ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","classes/ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","classes/ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","classes/ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving …\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them …\n"],["ActiveRecord::Batches","","classes/ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Callbacks::ClassMethods","","classes/ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/BindCollector.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SQLString.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","classes/ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDumper","","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html","","<p>The goal of this module is to move Adapter specific column definitions to\nthe Adapter instead of having …\n"],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html","","<p>Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool with\nwhich it shares a Monitor.  But …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html","","<p>Every <code>frequency</code> seconds, the reaper will call\n<code>reap</code> on <code>pool</code>. A reaper instantiated with a nil\nfrequency …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::Table","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Table.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works with the native C (bitbucket.org/ged/ruby-pg)\ndriver.\n<p>Options:\n<p><code>:host</code> - Defaults …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::RealTransaction","","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html","","<p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby\ndrivers (available as gem from …\n"],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::ExplainPrettyPrinter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SavepointTransaction","","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","classes/ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionAdapters::TransactionState","","classes/ActiveRecord/ConnectionAdapters/TransactionState.html","",""],["ActiveRecord::ConnectionHandling","","classes/ActiveRecord/ConnectionHandling.html","",""],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period: because …\n"],["ActiveRecord::Core","","classes/ActiveRecord/Core.html","",""],["ActiveRecord::Core::ClassMethods","","classes/ActiveRecord/Core/ClassMethods.html","",""],["ActiveRecord::CounterCache","","classes/ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::CounterCache::ClassMethods","","classes/ActiveRecord/CounterCache/ClassMethods.html","",""],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Delegation","","classes/ActiveRecord/Delegation.html","",""],["ActiveRecord::Delegation::DelegateCache","","classes/ActiveRecord/Delegation/DelegateCache.html","",""],["ActiveRecord::DynamicMatchers","","classes/ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicMatchers::FindBy","","classes/ActiveRecord/DynamicMatchers/FindBy.html","",""],["ActiveRecord::DynamicMatchers::FindByBang","","classes/ActiveRecord/DynamicMatchers/FindByBang.html","",""],["ActiveRecord::DynamicMatchers::Finder","","classes/ActiveRecord/DynamicMatchers/Finder.html","",""],["ActiveRecord::DynamicMatchers::Method","","classes/ActiveRecord/DynamicMatchers/Method.html","",""],["ActiveRecord::Enum","","classes/ActiveRecord/Enum.html","","<p>Declare an enum attribute where the values map to integers in the database,\nbut can be queried by name. …\n"],["ActiveRecord::Explain","","classes/ActiveRecord/Explain.html","",""],["ActiveRecord::ExplainSubscriber","","classes/ActiveRecord/ExplainSubscriber.html","",""],["ActiveRecord::ExplainSubscriber::ActiveSupport","","classes/ActiveRecord/ExplainSubscriber/ActiveSupport.html","",""],["ActiveRecord::FinderMethods","","classes/ActiveRecord/FinderMethods.html","",""],["ActiveRecord::FixtureSet","","classes/ActiveRecord/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::FixtureSet::ClassCache","","classes/ActiveRecord/FixtureSet/ClassCache.html","",""],["ActiveRecord::ImmutableRelation","","classes/ActiveRecord/ImmutableRelation.html","","<p>Raised when a relation cannot be mutated because it&#39;s already loaded.\n\n<pre><code>class Task &lt; ActiveRecord::Base ...</code></pre>\n"],["ActiveRecord::Inheritance","","classes/ActiveRecord/Inheritance.html","","<p>Single table inheritance\n<p>Active Record allows inheritance by storing the name of the class in a\ncolumn …\n"],["ActiveRecord::Inheritance::ClassMethods","","classes/ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","classes/ActiveRecord/Integration.html","",""],["ActiveRecord::Integration::ClassMethods","","classes/ActiveRecord/Integration/ClassMethods.html","",""],["ActiveRecord::InvalidForeignKey","","classes/ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","classes/ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::LegacyYamlAdapter","","classes/ActiveRecord/LegacyYamlAdapter.html","",""],["ActiveRecord::LegacyYamlAdapter::Rails41","","classes/ActiveRecord/LegacyYamlAdapter/Rails41.html","",""],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","classes/ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CheckPending","","classes/ActiveRecord/Migration/CheckPending.html","","<p>This class is used to verify that all migrations have been run before\nloading a web page if config.active_record.migration_error …\n"],["ActiveRecord::Migration::CommandRecorder","","classes/ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse …\n"],["ActiveRecord::Migration::CommandRecorder::StraightReversions","","classes/ActiveRecord/Migration/CommandRecorder/StraightReversions.html","",""],["ActiveRecord::MigrationProxy","","classes/ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::ModelSchema","","classes/ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","classes/ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::NoDatabaseError","","classes/ActiveRecord/NoDatabaseError.html","","<p>Raised when a given database does not exist.\n"],["ActiveRecord::NoTouching","","classes/ActiveRecord/NoTouching.html","","<p>Active Record No Touching\n"],["ActiveRecord::NoTouching::ClassMethods","","classes/ActiveRecord/NoTouching/ClassMethods.html","",""],["ActiveRecord::Persistence","","classes/ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","classes/ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","classes/ActiveRecord/QueryMethods.html","",""],["ActiveRecord::QueryMethods::WhereChain","","classes/ActiveRecord/QueryMethods/WhereChain.html","","<p>WhereChain objects act as placeholder for queries in which #where does not\nhave any parameter. In this …\n"],["ActiveRecord::Querying","","classes/ActiveRecord/Querying.html","",""],["ActiveRecord::Railtie","","classes/ActiveRecord/Railtie.html","",""],["ActiveRecord::Railtie::ActionDispatch","","classes/ActiveRecord/Railtie/ActionDispatch.html","",""],["ActiveRecord::Railtie::ActiveSupport","","classes/ActiveRecord/Railtie/ActiveSupport.html","",""],["ActiveRecord::Railtie::Rails","","classes/ActiveRecord/Railtie/Rails.html","",""],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","classes/ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid. Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotDestroyed","","classes/ActiveRecord/RecordNotDestroyed.html","","<p>Raised by ActiveRecord::Base.destroy! when a call to destroy would return\nfalse.\n\n<pre><code>begin\n  complex_operation_that_internally_calls_destroy! ...</code></pre>\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","classes/ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables interrogating of Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Base class for AggregateReflection and AssociationReflection. Objects of\nAggregateReflection and AssociationReflection …\n"],["ActiveRecord::Relation","","classes/ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Result","","classes/ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::Sanitization","","classes/ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","classes/ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::SchemaMigration","","classes/ActiveRecord/SchemaMigration.html","",""],["ActiveRecord::Scoping","","classes/ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","classes/ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","classes/ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","classes/ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","classes/ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","classes/ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SpawnMethods","","classes/ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>original_exception</code> …\n"],["ActiveRecord::Store","","classes/ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","classes/ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::Tasks","","classes/ActiveRecord/Tasks.html","",""],["ActiveRecord::Tasks::DatabaseTasks","","classes/ActiveRecord/Tasks/DatabaseTasks.html","","<p><code>ActiveRecord::Tasks::DatabaseTasks</code> is a utility class, which\nencapsulates logic behind common tasks used …\n"],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::TransactionIsolationError","","classes/ActiveRecord/TransactionIsolationError.html","","<p>TransactionIsolationError will be raised under the following conditions:\n<p>The adapter does not support …\n"],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","classes/ActiveRecord/Translation.html","",""],["ActiveRecord::Type","","classes/ActiveRecord/Type.html","",""],["ActiveRecord::UnknownAttributeError","","classes/ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::UnknownPrimaryKey","","classes/ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but not specified in the schema or\nmodel.\n"],["ActiveRecord::VERSION","","classes/ActiveRecord/VERSION.html","",""],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::WrappedDatabaseException","","classes/ActiveRecord/WrappedDatabaseException.html","","<p>Defunct wrapper class kept for compatibility. <code>StatementInvalid</code>\nwraps the original exception now.\n"],["ActiveSupport","","classes/ActiveSupport.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","",""],["ActiveSupport::Cache::RedisStore","","classes/ActiveSupport/Cache/RedisStore.html","",""],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["Encoding","","classes/Encoding.html","",""],["Kernel","","classes/Kernel.html","",""],["Mysql","","classes/Mysql.html","",""],["Mysql::Field","","classes/Mysql/Field.html","",""],["Mysql::Result","","classes/Mysql/Result.html","",""],["Mysql::Stmt","","classes/Mysql/Stmt.html","",""],["Mysql::Time","","classes/Mysql/Time.html","",""],["Object","","classes/Object.html","",""],["Rails","","classes/Rails.html","",""],["Rails::API","","classes/Rails/API.html","",""],["Rails::API::AppTask","","classes/Rails/API/AppTask.html","",""],["Rails::API::EdgeTask","","classes/Rails/API/EdgeTask.html","",""],["Rails::API::RepoTask","","classes/Rails/API/RepoTask.html","",""],["Rails::API::StableTask","","classes/Rails/API/StableTask.html","",""],["Rails::API::Task","","classes/Rails/API/Task.html","",""],["Rails::AppBuilder","","classes/Rails/AppBuilder.html","","<p>The application builder allows you to override elements of the application\ngenerator without being forced …\n"],["Rails::Application","","classes/Rails/Application.html","","<p>In Rails 3.0, a Rails::Application object was introduced which is nothing\nmore than an Engine but with …\n"],["Rails::Application::Bootstrap","","classes/Rails/Application/Bootstrap.html","",""],["Rails::Application::Bootstrap::ActiveSupport","","classes/Rails/Application/Bootstrap/ActiveSupport.html","",""],["Rails::Application::Bootstrap::ActiveSupport::Logger","","classes/Rails/Application/Bootstrap/ActiveSupport/Logger.html","",""],["Rails::Application::Configuration","","classes/Rails/Application/Configuration.html","",""],["Rails::Application::DefaultMiddlewareStack","","classes/Rails/Application/DefaultMiddlewareStack.html","",""],["Rails::Application::Finisher","","classes/Rails/Application/Finisher.html","",""],["Rails::Application::Finisher::ActionDispatch","","classes/Rails/Application/Finisher/ActionDispatch.html","",""],["Rails::Application::Finisher::ActiveSupport","","classes/Rails/Application/Finisher/ActiveSupport.html","",""],["Rails::Application::RoutesReloader","","classes/Rails/Application/RoutesReloader.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","",""],["Rails::Configuration::MiddlewareStackProxy","","classes/Rails/Configuration/MiddlewareStackProxy.html","","<p>MiddlewareStackProxy is a proxy for the Rails middleware stack that allows\nyou to configure middlewares …\n"],["Rails::Console","","classes/Rails/Console.html","",""],["Rails::ConsoleMethods","","classes/Rails/ConsoleMethods.html","",""],["Rails::DBConsole","","classes/Rails/DBConsole.html","",""],["Rails::DeprecatedConstant","","classes/Rails/DeprecatedConstant.html","",""],["Rails::Engine","","classes/Rails/Engine.html","","<p><code>Rails::Engine</code> allows you to wrap a specific Rails application\nor subset of functionality and share it …\n"],["Rails::Engine::ActiveSupport","","classes/Rails/Engine/ActiveSupport.html","",""],["Rails::Engine::Configuration","","classes/Rails/Engine/Configuration.html","",""],["Rails::Engine::Railties","","classes/Rails/Engine/Railties.html","",""],["Rails::Engine::Rake","","classes/Rails/Engine/Rake.html","",""],["Rails::Generators","","classes/Rails/Generators.html","",""],["Rails::Generators::Actions","","classes/Rails/Generators/Actions.html","",""],["Rails::Generators::Actions::CreateMigration","","classes/Rails/Generators/Actions/CreateMigration.html","",""],["Rails::Generators::ActiveModel","","classes/Rails/Generators/ActiveModel.html","","<p>ActiveModel is a class to be implemented by each ORM to allow Rails to\ngenerate customized controller …\n"],["Rails::Generators::AppBase","","classes/Rails/Generators/AppBase.html","",""],["Rails::Generators::AppBase::GemfileEntry","","classes/Rails/Generators/AppBase/GemfileEntry.html","",""],["Rails::Generators::Base","","classes/Rails/Generators/Base.html","",""],["Rails::Generators::Migration","","classes/Rails/Generators/Migration.html","","<p>Holds common methods for migrations. It assumes that migrations has the\n[0-9]*_name format and can be …\n"],["Rails::Generators::Migration::ClassMethods","","classes/Rails/Generators/Migration/ClassMethods.html","",""],["Rails::Generators::NamedBase","","classes/Rails/Generators/NamedBase.html","",""],["Rails::Generators::TestCase","","classes/Rails/Generators/TestCase.html","","<p>This class provides a TestCase for testing generators. To setup, you need\njust to configure the destination …\n"],["Rails::Generators::Testing","","classes/Rails/Generators/Testing.html","",""],["Rails::Generators::Testing::Assertions","","classes/Rails/Generators/Testing/Assertions.html","",""],["Rails::Generators::Testing::Behaviour","","classes/Rails/Generators/Testing/Behaviour.html","",""],["Rails::Generators::Testing::Behaviour::ClassMethods","","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html","",""],["Rails::Generators::Testing::SetupAndTeardown","","classes/Rails/Generators/Testing/SetupAndTeardown.html","",""],["Rails::Info","","classes/Rails/Info.html","","<p>This module helps build the runtime properties used to display in the\nRails::InfoController responses. …\n"],["Rails::Info::Gem","","classes/Rails/Info/Gem.html","",""],["Rails::InfoController","","classes/Rails/InfoController.html","",""],["Rails::InfoController::ActionDispatch","","classes/Rails/InfoController/ActionDispatch.html","",""],["Rails::InfoController::ActionDispatch::DebugExceptions","","classes/Rails/InfoController/ActionDispatch/DebugExceptions.html","",""],["Rails::Initializable","","classes/Rails/Initializable.html","",""],["Rails::Initializable::ClassMethods","","classes/Rails/Initializable/ClassMethods.html","",""],["Rails::Initializable::Collection","","classes/Rails/Initializable/Collection.html","",""],["Rails::Initializable::Initializer","","classes/Rails/Initializable/Initializer.html","",""],["Rails::MailersController","","classes/Rails/MailersController.html","",""],["Rails::MailersController::ActionDispatch","","classes/Rails/MailersController/ActionDispatch.html","",""],["Rails::MailersController::ActionDispatch::DebugExceptions","","classes/Rails/MailersController/ActionDispatch/DebugExceptions.html","",""],["Rails::Paths","","classes/Rails/Paths.html","",""],["Rails::Paths::Path","","classes/Rails/Paths/Path.html","",""],["Rails::Paths::Root","","classes/Rails/Paths/Root.html","","<p>This object is an extended hash that behaves as root of the\n<code>Rails::Paths</code> system. It allows you to collect …\n"],["Rails::PluginBuilder","","classes/Rails/PluginBuilder.html","","<p>The plugin builder allows you to override elements of the plugin generator\nwithout being forced to reverse …\n"],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::Rack::Debugger","","classes/Rails/Rack/Debugger.html","",""],["Rails::Rack::LogTailer","","classes/Rails/Rack/LogTailer.html","",""],["Rails::Rack::Logger","","classes/Rails/Rack/Logger.html","","<p>Sets log tags, logs the request, calls the app, and flushes the logs.\n"],["Rails::Railtie","","classes/Rails/Railtie.html","","<p>Railtie is the core of the Rails framework and provides several hooks to\nextend Rails and/or modify the …\n"],["Rails::Railtie::Configurable","","classes/Rails/Railtie/Configurable.html","",""],["Rails::Railtie::Configurable::ClassMethods","","classes/Rails/Railtie/Configurable/ClassMethods.html","",""],["Rails::Railtie::Configuration","","classes/Rails/Railtie/Configuration.html","",""],["Rails::Server","","classes/Rails/Server.html","",""],["Rails::Server::Options","","classes/Rails/Server/Options.html","",""],["Rails::TestUnitRailtie","","classes/Rails/TestUnitRailtie.html","",""],["Rails::VERSION","","classes/Rails/VERSION.html","",""],["RbConfig","","classes/RbConfig.html","",""],["SourceAnnotationExtractor","","classes/SourceAnnotationExtractor.html","","<p>Implements the logic behind the rake tasks for annotations like\n\n<pre><code>rake notes\nrake notes:optimize\n</code></pre>\n<p>and friends. …\n"],["SourceAnnotationExtractor::Annotation","","classes/SourceAnnotationExtractor/Annotation.html","",""],["!~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-21-7E","","<p>Equivalent to <code>String#!~</code>. Match the class name against the\ngiven regexp. Returns <code>true</code> if there is no match, …\n"],["+","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-2B","(other)",""],["-","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-2D","(others)",""],["<<","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-3C-3C","(*records)","<p>Adds one or more <code>records</code> to the collection by setting their\nforeign keys to the association&#39;s primary …\n"],["<<","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-3C-3C","(path)",""],["<=>","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3C-3D-3E","","<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; ...</code></pre>\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["==","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-3D-3D","(type)",""],["==","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D","","<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the\nclass name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre><code>class BlogPost ...</code></pre>\n"],["==","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-3D-3D","(other)",""],["==","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-3D-3D","(other)","<p>Equivalent to <code>Array#==</code>. Returns <code>true</code> if the two\narrays contain the same number of elements and if each …\n"],["==","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-3D-3D","(other)","<p>Compares two relations for equality.\n"],["===","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D-3D","","<p>Equivalent to <code>#==</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === &#39;BlogPost&#39; ...</code></pre>\n"],["===","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["=~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-7E","","<p>Equivalent to <code>String#=~</code>. Match the class name against the\ngiven regexp. Returns the position where the …\n"],["[]","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-5B-5D","(type)",""],["[]","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-5B-5D","(type)",""],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre><code>person.errors[:name] ...</code></pre>\n"],["[]","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::AttributeMethods::AttributeMethodCache","classes/ActiveRecord/AttributeMethods/AttributeMethodCache.html#method-i-5B-5D","(name)",""],["[]","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D","(x)",""],["[]","ActiveRecord::FixtureSet::ClassCache","classes/ActiveRecord/FixtureSet/ClassCache.html#method-i-5B-5D","(fs_name)",""],["[]","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-5B-5D","(idx)",""],["[]","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D","(path)",""],["[]=","ActionMailer::Base::LateAttachmentsProxy","classes/ActionMailer/Base/LateAttachmentsProxy.html#method-i-5B-5D-3D","(_name, _content)",""],["[]=","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre><code>person.errors[:name] = &quot;must be set&quot;\nperson.errors[:name] ...</code></pre>\n"],["[]=","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected\n<code>write_attribute</code> …\n"],["[]=","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D-3D","(k,v)",""],["[]=","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D-3D","(path, value)",""],["_layout_for","ActionView::Context","classes/ActionView/Context.html#method-i-_layout_for","(name=nil)","<p>Encapsulates the interaction with the view flow so it returns the correct\nbuffer on <code>yield</code>. This is usually …\n"],["_layout_for","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-_layout_for","(*args, &block)","<p>Overwrites _layout_for in the context object so it supports the case a\nblock is passed to a partial. …\n"],["_prepare_context","ActionView::Context","classes/ActionView/Context.html#method-i-_prepare_context","()","<p>Prepares the context by setting the appropriate instance variables. :api:\nplugin\n"],["_set_detail","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-_set_detail","(key, value)",""],["_to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-_to_partial_path","()",""],["_url_for_modules","ActionView::Helpers::UrlHelper::ClassMethods","classes/ActionView/Helpers/UrlHelper/ClassMethods.html#method-i-_url_for_modules","()",""],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["abstract_railtie?","Rails::Railtie","classes/Rails/Railtie.html#method-c-abstract_railtie-3F","()",""],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, …\n"],["action_has_layout?","ActionView::Layouts","classes/ActionView/Layouts.html#method-i-action_has_layout-3F","()","<p>Controls whether an action should be rendered using a layout. If you want\nto disable any <code>layout</code> settings …\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()",""],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()",""],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["actually_destroyed?","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-actually_destroyed-3F","()",""],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["add","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-add","(view, locals)",""],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, message = :invalid, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>.\nMore than one error can be added to the same <code>attribute</code> …\n"],["add","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add","(element)","<p>Add <code>element</code> to the queue.  Never blocks.\n"],["add","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add","(table_name)","<p>Add internal cache for table with <code>table_name</code>.\n"],["add","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-add","(path, options = {})",""],["add_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to","(table_name, ref_name, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_delivery_method","ActionMailer::DeliveryMethods::ClassMethods","classes/ActionMailer/DeliveryMethods/ClassMethods.html#method-i-add_delivery_method","(symbol, klass, default_options={})","<p>Adds a new delivery method through the given class using the given symbol\nas alias and the default options …\n"],["add_expr","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr","(src, code, indicator)","<p>Erubis toggles &lt;%= and &lt;%== behavior when escaping is enabled. We\noverride to always treat &lt;%== …\n"],["add_expr_escaped","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_literal","(src, code)",""],["add_foreign_key","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_foreign_key","(from_table, to_table, options = {})","<p>Adds a new foreign key. <code>from_table</code> is the table with the key\ncolumn, <code>to_table</code> contains the referenced …\n"],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_length","(option_strings, column_names, options = {})",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(option_strings, column_names, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_on_blank","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n\n<pre><code>person.errors.add_on_empty(:name) ...</code></pre>\n"],["add_postamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_postamble","(src)",""],["add_preamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_preamble","(src)",""],["add_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference","(table_name, ref_name, options = {})","<p>Adds a reference. The reference column is an integer by default, the\n<code>:type</code> option can be used to specify …\n"],["add_shebang_option!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-add_shebang_option-21","()","<p>Small macro to add ruby as an option to the generator with proper default\nvalue plus an instance helper …\n"],["add_source","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-add_source","(source, options={})","<p>Add the given source to <code>Gemfile</code>\n\n<pre><code>add_source &quot;http://gems.github.com/&quot;\n</code></pre>\n"],["add_stmt","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_stmt","(src, code)",""],["add_text","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_text","(src, text)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name, options = {})","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to <code>table_name</code>. Additional options (like <code>null:\nfalse</code> …\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_timestamps_sql","(table_name, options = {})",""],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["added?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-added-3F","(attribute, message = :invalid, options = {})","<p>Returns <code>true</code> if an error on the attribute with the given\nmessage is present, <code>false</code> otherwise. <code>message</code> …\n"],["after","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-after","()",""],["after_bundle","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-after_bundle","(&block)","<p>Registers a callback to be executed after bundle and spring binstubs have\nrun.\n\n<pre><code>after_bundle do\n  git add: ...</code></pre>\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],["after_enqueue","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-after_enqueue","(*filters, &blk)","<p>Defines a callback that will get called right after the job is enqueued.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],["after_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-after_initialize","(&block)","<p>Last configurable block to run. Called after frameworks initialize.\n"],["after_perform","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-after_perform","(*filters, &blk)","<p>Defines a callback that will get called right after the job&#39;s perform\nmethod has finished.\n\n<pre><code>class VideoProcessJob ...</code></pre>\n"],["after_rollback","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],["after_teardown","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-after_teardown","()",""],["after_teardown","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-after_teardown","()",""],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)","<p>Defines a callback that will get called right after validation happens.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods\n\n  attr_accessor ...</code></pre>\n"],["all","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-all","(*args, &block)",""],["all","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-all","()","<p>Returns all mailer preview classes\n"],["all","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all","()","<p>Returns an <code>ActiveRecord::Relation</code> scope object.\n\n<pre><code>posts = Post.all\nposts.size # Fires &quot;select count(*) from ...\n</code></pre>\n"],["all","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-all","(klass)","<p>GET index\n"],["all_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-all_paths","()",""],["allocate","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-allocate","()",""],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-allowed_index_name_length","()","<p>Returns the maximum allowed length for an index name. This limit is\nenforced by rails and Is less than …\n"],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-allowed_index_name_length","()","<p>Returns 62. SQLite supports index names up to 64 characters. The rest is\nused by rails internally to …\n"],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-announce","(message)",""],["any","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-any","(*args, &block)",""],["any?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F","(&block)","<p>Returns <code>true</code> if the collection is not empty.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</code></pre>\n"],["any?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-any-3F","()","<p>Returns true if there are any records.\n"],["any_waiting?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F","()","<p>Test if any threads are currently waiting on the queue.\n"],["api_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-api_dir","()",""],["api_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-api_dir","()",""],["api_main","Rails::API::Task","classes/Rails/API/Task.html#method-i-api_main","()",""],["app","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-app","()",""],["app","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-app","(create=false)","<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],["app","Rails::Engine","classes/Rails/Engine.html#method-i-app","()","<p>Returns the underlying rack application for this engine.\n"],["app","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-app","()",""],["app","Rails::Server","classes/Rails/Server.html#method-i-app","()","<p>TODO: this is no longer required but we keep it for the moment to support\nolder config.ru files.\n"],["app_generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_generators","()","<p>This allows you to modify application&#39;s generators from Railties.\n<p>Values set on app_generators will …\n"],["app_middleware","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_middleware","()","<p>This allows you to modify the application&#39;s middlewares from Engines.\n<p>All operations you run on the …\n"],["append","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-append","(*records)",""],["append_view_path","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-append_view_path","(path)",""],["append_view_path","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],["application","Rails","classes/Rails.html#method-c-application","()",""],["application","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-application","(data=nil, options={})",""],["application_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-application_name","()","<p>Tries to retrieve the application name or simple return application.\n"],["arel","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-arel","()",""],["arguments","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-arguments","(array)","<p>Sets default arguments on generator invocation. This can be overwritten\nwhen invoking it.\n\n<pre><code>arguments %w(app_name ...</code></pre>\n"],["around_enqueue","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-around_enqueue","(*filters, &blk)","<p>Defines a callback that will get called before and after the job is\nenqueued.\n\n<pre><code>class VideoProcessJob &lt; ...</code></pre>\n"],["around_perform","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-around_perform","(*filters, &blk)","<p>Defines a callback that will get called around the job&#39;s perform\nmethod.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns a Hash that can be used as the JSON representation for this object.\nYou can pass the <code>:full_messages</code> …\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["assert_class_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_class_method","(method, content, &block)","<p>Asserts the given class method exists in the given content. This method\ndoes not detect class methods …\n"],["assert_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_directory","(relative, *contents)",""],["assert_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_emails","(number)","<p>Asserts that the number of emails sent matches the given number.\n\n<pre><code>def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver_now ...</code></pre>\n"],["assert_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_enqueued_jobs","(number)","<p>Asserts that the number of enqueued jobs matches the given number.\n\n<pre><code>def test_jobs\n  assert_enqueued_jobs ...</code></pre>\n"],["assert_enqueued_with","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_enqueued_with","(args = {}, &_block)","<p>Asserts that the job passed in the block has been enqueued with the given\narguments.\n\n<pre><code>def test_assert_enqueued_with ...</code></pre>\n"],["assert_field_default_value","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_default_value","(attribute_type, value)","<p>Asserts the given attribute type gets a proper default value:\n\n<pre><code>assert_field_default_value :string, &quot;MyString&quot;\n</code></pre>\n"],["assert_field_type","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_type","(attribute_type, field_type)","<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre><code>assert_field_type :date, :date_select\n</code></pre>\n"],["assert_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_file","(relative, *contents)","<p>Asserts a given file exists. You need to supply an absolute path or a path\nrelative to the configured …\n"],["assert_instance_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_instance_method","(method, content)","<p>Asserts the given method exists in the given content. When a block is\ngiven, it yields the content of …\n"],["assert_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_method","(method, content)",""],["assert_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_migration","(relative, *contents, &block)","<p>Asserts a given migration exists. You need to supply an absolute path or a\npath relative to the configured …\n"],["assert_no_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_directory","(relative)",""],["assert_no_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_no_emails","(&block)","<p>Assert that no emails have been sent.\n\n<pre><code>def test_emails\n  assert_no_emails\n  ContactMailer.welcome.deliver_now ...</code></pre>\n"],["assert_no_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_no_enqueued_jobs","(&block)","<p>Asserts that no jobs have been enqueued.\n\n<pre><code>def test_jobs\n  assert_no_enqueued_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...</code></pre>\n"],["assert_no_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_file","(relative)","<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],["assert_no_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_migration","(relative)","<p>Asserts a given migration does not exist. You need to supply an absolute\npath or a path relative to the …\n"],["assert_no_performed_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_no_performed_jobs","(&block)","<p>Asserts that no jobs have been performed.\n\n<pre><code>def test_jobs\n  assert_no_performed_jobs\n\n  perform_enqueued_jobs ...</code></pre>\n"],["assert_performed_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_performed_jobs","(number)","<p>Asserts that the number of performed jobs matches the given number. If no\nblock is passed, <code>perform_enqueued_jobs</code> …\n"],["assert_performed_with","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-assert_performed_with","(args = {}, &_block)","<p>Asserts that the job passed in the block has been performed with the given\narguments.\n\n<pre><code>def test_assert_performed_with ...</code></pre>\n"],["asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_path","(source, options = {})","<p>Computes the path to asset in public directory. If :type options is set, a\nfile extension will be appended …\n"],["asset_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_url","(source, options = {})","<p>Computes the full URL to an asset in the public directory. This will use\n<code>asset_path</code> internally, so most …\n"],["assign_attributes","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-assign_attributes","(new_attributes)","<p>Allows you to set all the attributes by passing in a hash of attributes\nwith keys matching the attribute …\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERB …\n"],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre><code>mail.attachments[&#39;filename.jpg&#39;] = File.read(&#39;/path/to/filename.jpg&#39;)\n</code></pre>\n"],["attachments","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-attachments","()","<p>Access the message attachments list.\n"],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute_alias","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias","(name)","<p>Returns the original name for the alias <code>name</code>\n"],["attribute_alias?","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_alias-3F","(new_name)","<p>Is <code>new_name</code> an alias?\n"],["attribute_for_inspect","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method,\n<code>false</code> otherwise.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method\nand table exists, <code>false</code> otherwise.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to?</code> …\n"],["attribute_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p><code>attribute_missing</code> is like <code>method_missing</code>, but for\nattributes. When <code>method_missing</code> is called we check …\n"],["attribute_names","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it&#39;s not an abstract\nclass and table exists. Otherwise …\n"],["attribute_present?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F","(attribute)","<p>Returns <code>true</code> if the specified <code>attribute</code> has been\nset by the user or by a database load and is neither …\n"],["attributes","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)",""],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre><code>class Task &lt; ActiveRecord::Base\nend ...</code></pre>\n"],["attributes_hash","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-attributes_hash","()","<p>Given that the parameters starts with `_`, the finder needs to use the same\nparameter name.\n"],["attributes_names","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-attributes_names","()",""],["audio_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_path","(source, options = {})","<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(*sources)","<p>Returns an HTML audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],["audio_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_url","(source, options = {})","<p>Computes the full URL to an audio asset in the public audios directory.\nThis will use <code>audio_path</code> internally, …\n"],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns <code>self</code> if the password is correct, otherwise\n<code>false</code>.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_secure_password ...</code></pre>\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and feed readers can use to auto-detect an\nRSS or Atom feed. The <code>type</code> …\n"],["autoload_once","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_once","()",""],["autoload_once_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths","()",""],["autoload_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_paths","()",""],["autoload_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_paths","()",""],["autosave=","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-autosave-3D","(autosave)",""],["available_environments","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-available_environments","()",""],["average","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere&#39;s no row. See <code>calculate</code> for …\n"],["backtrace_cleaner","Rails","classes/Rails.html#method-c-backtrace_cleaner","()",""],["banner","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-banner","()","<p>Use Rails default banner.\n"],["base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the class descending directly from ActiveRecord::Base, or an\nabstract class, if any, in the inheritance …\n"],["base_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n"],["base_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_root","()","<p>Returns the base root for a common set of generators. This is used to\ndynamically guess the default source …\n"],["basename","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["becomes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["becomes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes-21","(klass)","<p>Wrapper around <code>becomes</code> that also changes the instance&#39;s\nsti column value. This is especially useful …\n"],["before","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-before","()",""],["before_configuration","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_configuration","(&block)","<p>First configurable block to run. Called before any initializers are run.\n"],["before_eager_load","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_eager_load","(&block)","<p>Third configurable block to run. Does not run if\n<code>config.cache_classes</code> set to false.\n"],["before_enqueue","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-before_enqueue","(*filters, &blk)","<p>Defines a callback that will get called right before the job is enqueued.\n\n<pre><code>class VideoProcessJob &lt; ActiveJob::Base ...</code></pre>\n"],["before_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_initialize","(&block)","<p>Second configurable block to run. Called before frameworks initialize.\n"],["before_perform","ActiveJob::Callbacks::ClassMethods","classes/ActiveJob/Callbacks/ClassMethods.html#method-i-before_perform","(*filters, &blk)","<p>Defines a callback that will get called right before the job&#39;s perform\nmethod is executed.\n\n<pre><code>class VideoProcessJob ...</code></pre>\n"],["before_setup","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-before_setup","()",""],["before_setup","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-before_setup","()",""],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)","<p>Defines a callback that will get called right before validation happens.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_isolated_db_transaction","(isolation)",""],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)","<p>Begins the transaction with the isolation level set. Raises an error by\ndefault; adapters that support …\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)",""],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["belongs_to?","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-belongs_to-3F","(group)",""],["bin","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-bin","()",""],["bin","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-bin","(force = false)",""],["binary?","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-binary-3F","()",""],["bind","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-bind","(context)",""],["bind_value","ActiveRecord::Associations::AssociationScope::BindSubstitution","classes/ActiveRecord/Associations/AssociationScope/BindSubstitution.html#method-i-bind_value","(scope, column, value, alias_tracker)",""],["bit","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit","(name, options = {})",""],["bit_varying","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-bit_varying","(name, options = {})",""],["blank?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-blank-3F","()","<p>aliases empty?\n"],["blank?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-blank-3F","()","<p>Returns true if relation is blank.\n"],["block_format","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-block_format","(text)","<p>Take the text and format it, indented two spaces for each line, and wrapped\nat 72 columns.\n"],["body","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-body","()","<p>Extended in activerecord-deprecated_finders\n"],["body","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-body","()",""],["build","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-c-build","(name, prefix, partial)",""],["build","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-build","(*args, &block)",""],["build","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver","classes/ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver.html#method-c-build","(lhs_class, name, options)",""],["build","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-build","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\n<code>attributes</code> and linked to …\n"],["build","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-build","(klass, params=nil)","<p>GET new POST create\n"],["build_queue","ActiveJob::QueueAdapters::QueueClassicAdapter","classes/ActiveJob/QueueAdapters/QueueClassicAdapter.html#method-c-build_queue","(queue_name)","<p>Builds a <code>QC::Queue</code> object to schedule jobs on.\n<p>If you have a custom <code>QC::Queue</code> subclass you&#39;ll need …\n"],["build_stack","Rails::Application::DefaultMiddlewareStack","classes/Rails/Application/DefaultMiddlewareStack.html#method-i-build_stack","()",""],["button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-button","(value = nil, options = {}, &block)","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag","(content_or_options = nil, options = nil, &block)","<p>Creates a button element that defines a <code>submit</code> button,\n<code>reset</code>button or a generic button which can be used …\n"],["button_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-button_to","(name = nil, options = nil, html_options = nil, &block)","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["cache","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>This helper exposes a method for caching fragments of a view rather than an\nentire action or page. This …\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["cache_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_for_connection","(connection)",""],["cache_fragment_name","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_fragment_name","(name = {}, options = nil)","<p>This helper returns the name of a cache key for a given fragment cache\ncall. By supplying skip_digest …\n"],["cache_if","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_if","(condition, name = {}, options = nil, &block)","<p>Cache fragments of a view if <code>condition</code> is true\n\n<pre><code>&lt;% cache_if admin?, project do %&gt;\n  &lt;b&gt;All the topics on ...</code></pre>\n"],["cache_key","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_key","(*timestamp_names)","<p>Returns a cache key that can be used to identify this record.\n\n<pre><code>Product.new.cache_key     # =&gt; &quot;products/new&quot; ...\n</code></pre>\n"],["cache_template_loading","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading","()",""],["cache_template_loading=","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading-3D","(value)",""],["cache_unless","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_unless","(condition, name = {}, options = nil, &block)","<p>Cache fragments of a view unless <code>condition</code> is true\n\n<pre><code>&lt;% cache_unless admin?, project do %&gt;\n  &lt;b&gt;All the ...</code></pre>\n"],["cached_attributes_deprecation_warning","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes_deprecation_warning","(method_name)",""],["cached_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["calculate","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column. Methods for count,\nsum, average, minimum, and maximum …\n"],["call","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-call","(email)","<p>Returns the mail object for the given email name. The registered preview\ninterceptors will be informed …\n"],["call","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-c-call","(template)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::Raw","classes/ActionView/Template/Handlers/Raw.html#method-i-call","(template)",""],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","Rails::Application","classes/Rails/Application.html#method-i-call","(env)","<p>Implements call according to the Rack API. It simply dispatches the request\nto the underlying middleware …\n"],["call","Rails::Engine","classes/Rails/Engine.html#method-i-call","(env)","<p>Define the Rack API for this engine.\n"],["call","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-i-call","(env)",""],["call","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-call","(env)",""],["call","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call","(env)",""],["call_app","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call_app","(request, env)",""],["capify!","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-capify-21","()","<p>Just run the capify command in root\n\n<pre><code>capify!\n</code></pre>\n"],["capture","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method allows you to extract part of a template into a\nvariable. You can then use this variable …\n"],["capture","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-capture","(stream)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node, table_attribute)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_modifier","(node, table_attribute)",""],["cdata_section","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>. CDATA sections\nare used to escape blocks of text containing …\n"],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column:\n\n<pre><code>change_column_default(:suppliers, :qualification, &#39;new&#39;)\nchange_column_default(:accounts, ...</code></pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)","<p>Sets or removes a +NOT NULL+ constraint on a column. The <code>null</code>\nflag indicates whether the value can be …\n"],["change_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n\n<pre><code>t.change_default(:qualification, ...</code></pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n\n<pre><code># change_table() yields a Table instance\nchange_table(:suppliers) ...</code></pre>\n"],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre><code>person.changed # =&gt; []\nperson.name ...</code></pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns <code>true</code> if any attribute have unsaved changes,\n<code>false</code> otherwise.\n\n<pre><code>person.changed? # =&gt; false\nperson.name ...</code></pre>\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Returns a hash of the attributes with unsaved changes indicating their\noriginal values like <code>attr =&gt;</code> …\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Returns a hash of changed attributes indicating their original and new\nvalues like <code>attr =&gt; [original</code> …\n"],["changes_applied","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes_applied","()","<p>Removes current changes and makes them accessible through\n<code>previous_changes</code>.\n"],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset","(*arguments)",""],["charset_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current","(environment = env)",""],["check_box","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use …\n"],["check_class_collision","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-c-check_class_collision","(options={})","<p>Add a class collisions name to be checked on class initialization. You can\nsupply a hash with a :prefix …\n"],["check_pending!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-check_pending-21","(connection = Base.connection)",""],["check_schema_file","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_schema_file","(filename)",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["children","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-children","()",""],["cidr","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-cidr","(name, options = {})",""],["citext","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-citext","(name, options = {})",""],["class_method_defined_within?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-class_method_defined_within-3F","(name, klass, superklass = klass.superclass)",""],["class_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_name","()",""],["class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_path","()",""],["clear","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-clear","()","<p>Clear the error messages.\n\n<pre><code>person.errors.full_messages # =&gt; [&quot;name cannot be nil&quot;]\nperson.errors.clear ...</code></pre>\n"],["clear","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-clear","()","<p>Equivalent to <code>delete_all</code>. The difference is that returns\n<code>self</code>, instead of an array with the deleted objects, …\n"],["clear","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear","()","<p>Remove all elements from the queue.\n"],["clear","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-clear","()","<p>Clear all the data from the store.\n"],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_attribute_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-clear_attribute_changes","(attributes)","<p>Remove changes information for the provided attributes.\n"],["clear_cache","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-clear_cache-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_changes_information","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-clear_changes_information","()","<p>Clear all dirty data: current changes and previous changes.\n"],["clear_destroy_state","ActiveRecord::CounterCache","classes/ActiveRecord/CounterCache.html#method-i-clear_destroy_state","()",""],["clear_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-clear_enqueued_jobs","()",""],["clear_performed_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-clear_performed_jobs","()",""],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["clear_validators!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21","()","<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to …\n"],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-clone","","<p>Identical to Ruby&#39;s clone method.  This is a “shallow” copy.  Be warned\nthat your attributes …\n"],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-collation","()","<p>Returns the current database collation.\n"],["collation","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation","(*arguments)",""],["collation_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current","(environment = env)",""],["collection_check_boxes","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes","(method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_check_boxes for\nform builders:\n\n<pre><code>&lt;%= form_for @post ...</code></pre>\n"],["collection_check_boxes","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes","(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Returns check box tags for the collection of existing return values of\n<code>method</code> for <code>object</code>&#39;s class. …\n"],["collection_radio_buttons","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_radio_buttons","(method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_radio_buttons for\nform builders:\n\n<pre><code>&lt;%= form_for ...</code></pre>\n"],["collection_radio_buttons","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons","(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Returns radio button tags for the collection of existing return values of\n<code>method</code> for <code>object</code>&#39;s class. …\n"],["collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_select for form\nbuilders:\n\n<pre><code>&lt;%= form_for @post do ...</code></pre>\n"],["collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["collector","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-collector","()",""],["color_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-color_field","(object_name, method, options = {})","<p>Returns a text_field of type “color”.\n\n<pre><code>color_field(&quot;car&quot;, &quot;color&quot;)\n# =&gt; &lt;input id=&quot;car_color&quot; ...\n</code></pre>\n"],["color_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-color_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “color”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["colorize_logging","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging","()",""],["colorize_logging=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D","(val)",""],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_aliases","ActiveRecord::Associations::JoinDependency::Aliases::Table","classes/ActiveRecord/Associations/JoinDependency/Aliases/Table.html#method-i-column_aliases","()",""],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n\n<pre><code># Check a column exists\ncolumn_exists?(:suppliers, ...</code></pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_for_attribute","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute. Returns nil if the named\nattribute does not exist. …\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["column_spec","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec","(column, types)",""],["columns","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table_name)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns","()",""],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table_name)","<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit","ActiveRecord::ConnectionAdapters::RealTransaction","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-commit","()",""],["commit","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-commit","()",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["committed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F","()",""],["compile","ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/BindCollector.html#method-i-compile","(bvs, conn)",""],["compile","ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SQLString.html#method-i-compile","(bvs, conn)",""],["completed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-completed-3F","()",""],["component_root_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-component_root_dir","(gem_name)",""],["component_root_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-component_root_dir","(component)",""],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compute_asset_extname","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_extname","(source, options = {})","<p>Compute extname to append to asset path. Returns nil if nothing should be\nadded.\n"],["compute_asset_host","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_host","(source = \"\", options = {})","<p>Pick an asset host for this source. Returns <code>nil</code> if no host is\nset, the host if no wildcard is set, the …\n"],["compute_asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_path","(source, options = {})","<p>Computes asset path to public directory. Plugins and extensions can\noverride this method to point to …\n"],["compute_class","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-compute_class","(name)",""],["compute_tags","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-compute_tags","(request)",""],["compute_type","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["concat","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-concat","(*records)","<p>Add one or more records to the collection by setting their foreign keys to\nthe association&#39;s primary …\n"],["concat","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-concat","(paths)",""],["config","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config","()",""],["config","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-config","()",""],["config","Rails::Engine","classes/Rails/Engine.html#method-i-config","()","<p>Define the configuration object for the engine.\n"],["config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-config","()",""],["config","Rails::Railtie","classes/Rails/Railtie.html#method-i-config","()",""],["config_for","Rails::Application","classes/Rails/Application.html#method-i-config_for","(name)","<p>Convenience for loading config/foo.yml for the current Rails env.\n<p>Example:\n\n<pre><code># config/exception_notification.yml: ...\n</code></pre>\n"],["config_when_updating","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config_when_updating","()",""],["configru","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-configru","()",""],["configuration","Rails","classes/Rails.html#method-c-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configurations","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-configurations","()","<p>Returns fully resolved configurations hash\n"],["configurations","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-configurations","()",""],["configurations=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-configurations-3D","(config)","<p>Contains the database configuration - as is typically stored in\nconfig/database.yml - as a Hash.\n<p>For example, …\n"],["configure","Rails::Railtie","classes/Rails/Railtie.html#method-c-configure","(&block)","<p>Allows you to configure the railtie. This is the same method seen in\nRailtie::Configurable, but this …\n"],["configure","Rails::Railtie","classes/Rails/Railtie.html#method-i-configure","(&block)",""],["configure","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-configure","(&block)",""],["configure_rdoc_files","Rails::API::Task","classes/Rails/API/Task.html#method-i-configure_rdoc_files","()",""],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connected?","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected-3F","()","<p>Returns <code>true</code> if Active Record is connected.\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-connection","()",""],["connection_config","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre><code>ActiveRecord::Base.connection_config ...</code></pre>\n"],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler","()",""],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-connection_handler","()",""],["connection_handler=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler-3D","(handler)",""],["connection_id","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_id","()",""],["connection_id=","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_pool","()",""],["connection_pool_list","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list","()",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","()",""],["console","Rails::Application","classes/Rails/Application.html#method-i-console","(&blk)","<p>Sends any console called in the instance of a new application up to the\n<code>console</code> method defined in Rails::Railtie …\n"],["console","Rails::Railtie","classes/Rails/Railtie.html#method-c-console","(&blk)",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["content_for","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, options = {}, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. In order to access this …\n"],["content_for?","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p>content_for? checks whether any content has been captured yet using\n`content_for`. Useful to render parts …\n"],["content_tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-content_tag","(*)",""],["content_tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, single_or_multiple_records, prefix = nil, options = nil, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["context_class","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-context_class","()","<p>Superclass for the evaluation contexts used by ERB fixtures.\n"],["controller","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-controller","()","<p>Gets a new instance of a controller object.\n<p>This method assumes an <code>ApplicationController</code> exists, and it …\n"],["controller_path","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_path","()",""],["controller_path=","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["convert","ActiveRecord::LegacyYamlAdapter","classes/ActiveRecord/LegacyYamlAdapter.html#method-c-convert","(klass, coder)",""],["convert","ActiveRecord::LegacyYamlAdapter::Rails41","classes/ActiveRecord/LegacyYamlAdapter/Rails41.html#method-c-convert","(klass, coder)",""],["convert_to_model","ActionView::ModelNaming","classes/ActionView/ModelNaming.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["copy","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, &quot;can&#39;t be blank&quot;)\nperson.errors.count # ...\n</code></pre>\n"],["count","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-count","(column_name = nil, options = {})","<p>Count all records using SQL.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets.count ...</code></pre>\n"],["count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count the records.\n\n<pre><code>Person.count\n# =&gt; the total count of all people\n\nPerson.count(:age)\n# =&gt; returns the ...\n</code></pre>\n"],["count_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-create","(*args, &block)",""],["create","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\nattributes, linked to this …\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-create","()",""],["create","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create","(*args, &block)","<p>Tries to create a new record with the same scoped attributes defined in the\nrelation. Returns the initialized …\n"],["create","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create","(*arguments)",""],["create","Rails::Application","classes/Rails/Application.html#method-c-create","(initial_variable_values = {}, &block)",""],["create!","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-create-21","(*args, &block)",""],["create!","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create-21","(attributes = {}, &block)","<p>Like <code>create</code>, except that if the record is invalid, raises an\nexception.\n\n<pre><code>class Person\n  has_many :pets ...</code></pre>\n"],["create!","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. Raises a  …\n"],["create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create-21","(*args, &block)","<p>Similar to #create, but calls <code>create!</code> on the base class.\nRaises an exception if a validation error occurs. …\n"],["create_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all","()",""],["create_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current","(environment = env)",""],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code> (defaults to utf8),\n<code>:collation</code> …\n"],["create_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-create_fixtures","(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base)",""],["create_fixtures","Object","classes/Object.html#method-i-create_fixtures","(*fixture_set_names, &block)",""],["create_generated_attribute","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-create_generated_attribute","(attribute_type, name = 'test', index = nil)","<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute\ntype and, optionally, the attribute …\n"],["create_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table","(table_1, table_2, options = {})","<p>Creates a new join table with the name created using the lexical order of\nthe first two arguments. These …\n"],["create_migration","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-create_migration","(destination, data, config = {}, &block)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","(name = nil)",""],["create_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-create_schema","(schema_name)","<p>Creates a schema for the given schema name.\n"],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_table","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-create_table","(limit=nil)",""],["create_with","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-create_with","(value)","<p>Sets attributes to be used when creating new records from a relation\nobject.\n\n<pre><code>users = User.where(name: ...</code></pre>\n"],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>For backwards compatibility.\n"],["csrf_meta_tags","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags","()","<p>Returns meta tags “csrf-param” and “csrf-token” with the name of the\ncross-site request …\n"],["ctype","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-ctype","()","<p>Returns the current database ctype.\n"],["current_config","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-current_config","(options = {})",""],["current_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let&#39;s say we&#39;re in …\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["custom","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-custom","(mime, options = {})",""],["cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["dangerous_class_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_class_method-3F","(method_name)","<p>A class method is &#39;dangerous&#39; if it is already (re)defined by\nActive Record, but not by any ancestors. …\n"],["database_configuration","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the entire raw configuration of database from values\nstored in `config/database.yml`. …\n"],["database_yml","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-database_yml","()",""],["date_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-date_field","(object_name, method, options = {})","<p>Returns a text_field of type “date”.\n\n<pre><code>date_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["date_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-date_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “date”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["date_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#date_select for form builders:\n\n<pre><code>&lt;%= form_for @person do |f| %&gt;\n  ...</code></pre>\n"],["daterange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-daterange","(name, options = {})",""],["datetime_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-datetime_field","(object_name, method, options = {})","<p>Returns a text_field of type “datetime”.\n\n<pre><code>datetime_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["datetime_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “datetime”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["datetime_local_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-datetime_local_field","(object_name, method, options = {})","<p>Returns a text_field of type “datetime-local”.\n\n<pre><code>datetime_local_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; ...\n</code></pre>\n"],["datetime_local_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_local_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “datetime-local”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["datetime_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#datetime_select for form builders:\n\n<pre><code>&lt;%= form_for @person do |f| %&gt; ...</code></pre>\n"],["db","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-db","()",""],["db_dir","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-db_dir","()",""],["debug","ActionView::Helpers::DebugHelper","classes/ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["debugger?","Rails::Console","classes/Rails/Console.html#method-i-debugger-3F","()",""],["decrement","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-decrement","(key, amount = 1)","<p>Decrement a key in the store\n<p>If the key doesn&#39;t exist it will be initialized on 0. If the key exist\n…\n"],["decrement!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as increment_counter but …\n"],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default","(value = nil)","<p>Sets the defaults through app configuration:\n\n<pre><code>config.action_mailer.default(from: &quot;no-reply@example.org&quot;)\n</code></pre>\n"],["default_aliases_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_aliases_for_option","(name, options)","<p>Return default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n"],["default_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_for_option","(config, name, options, default)","<p>Return default for the option name given doing a lookup in config.\n"],["default_generator_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_generator_root","()",""],["default_i18n_subject","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default_i18n_subject","(interpolations = {})","<p>Translates the <code>subject</code> using Rails I18n class under\n<code>[mailer_scope, action_name]</code> scope. If it does not …\n"],["default_options","Rails::Server","classes/Rails/Server.html#method-i-default_options","()",""],["default_options=","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default_options-3D","(value = nil)","<p>Allows to set defaults through app configuration:\n\n<pre><code>config.action_mailer.default_options = { from: &quot;no-reply@example.org&quot; ...</code></pre>\n"],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = nil)","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre><code>class Article &lt; ActiveRecord::Base ...</code></pre>\n"],["default_source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_source_root","()","<p>Returns the default source root for a given generator. This is used\ninternally by rails to set its generators …\n"],["default_value_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_value_for_option","(name, options)","<p>Returns the default value for the option name given doing a lookup in\nRails::Generators.options.\n"],["define","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-define","()",""],["define","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)","<p>Declares an attribute that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, pass …\n"],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(*attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(name)",""],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(name)",""],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options\n<code>define_callbacks</code> does, in case you want to overwrite …\n"],["delegate_to","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-delegate_to","(klass)",""],["delete","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre><code>person.errors.get(:name)    # =&gt; [&quot;cannot be nil&quot;] ...\n</code></pre>\n"],["delete","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete","(*records)","<p>Deletes the <code>records</code> supplied from the collection according to\nthe strategy specified by the <code>:dependent</code> …\n"],["delete","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete","(element)","<p>If <code>element</code> is in the queue, remove and return it, or nil.\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-delete","(sql_key)",""],["delete","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-delete","(*args, &block)",""],["delete_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all","(dependent = nil)","<p>Deletes all the records from the collection according to the strategy\nspecified by the <code>:dependent</code> option. …\n"],["delete_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_entry","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-delete_entry","(key, options)","<p>Implement the ActiveSupport::Cache#delete_entry\n<p>It&#39;s really needed and use\n"],["delete_matched","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete objects for matched keys.\n<p>Performance note: this operation can be dangerous for large production …\n"],["deliver","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-deliver","(event)","<p>An email was delivered.\n"],["deliver_later","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_later","(options={})","<p>Enqueues the email to be delivered through Active Job. When the job runs it\nwill send the email using …\n"],["deliver_later!","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_later-21","(options={})","<p>Enqueues the email to be delivered through Active Job. When the job runs it\nwill send the email using …\n"],["deliver_now","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_now","()","<p>Delivers an email:\n\n<pre><code>Notifier.welcome(User.first).deliver_now\n</code></pre>\n"],["deliver_now!","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-deliver_now-21","()","<p>Delivers an email without checking <code>perform_deliveries</code> and\n<code>raise_delivery_errors</code>, so use with caution. …\n"],["dependencies","ActionView::Digestor","classes/ActionView/Digestor.html#method-i-dependencies","()",""],["deprecate","Rails::DeprecatedConstant","classes/Rails/DeprecatedConstant.html#method-c-deprecate","(old, current)",""],["desc","Rails::API::Task","classes/Rails/API/Task.html#method-i-desc","(description)","<p>Hack, ignore the desc calls performed by the original initializer.\n"],["desc","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-desc","(description=nil)","<p>Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default …\n"],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>Returns <code>true</code> if this does not need STI type condition. Returns\n<code>false</code> if STI type condition needs to be …\n"],["deserialize","ActiveJob::Arguments","classes/ActiveJob/Arguments.html#method-i-deserialize","(arguments)","<p>Deserializes a set of arguments. Whitelisted types are returned as-is.\nArrays/Hashes are deserialized …\n"],["deserialize","ActiveJob::Core::ClassMethods","classes/ActiveJob/Core/ClassMethods.html#method-i-deserialize","(job_data)","<p>Creates a new job instance from a hash created with <code>serialize</code>\n"],["destination","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-destination","(path)","<p>Sets the destination of generator files:\n\n<pre><code>destination File.expand_path(&quot;../tmp&quot;, File.dirname(__FILE__))\n</code></pre>\n"],["destroy","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy","(*records)","<p>Destroys the <code>records</code> supplied and removes them from the\ncollection. This method will <em>always</em> remove record …\n"],["destroy","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id. The object\nis instantiated first, therefore …\n"],["destroy","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-destroy","()","<p>DELETE destroy\n"],["destroy!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy-21","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all","()","<p>Deletes the records of the collection directly from the database ignoring\nthe <code>:dependent</code> option. Records …\n"],["destroy_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroyed?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["destroyed_by_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association","()","<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. …\n"],["destroyed_by_association=","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D","(reflection)","<p>Records the association that is being destroyed and destroying this record\nin the process.\n"],["detail_args_for","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-detail_args_for","(options)","<p>Compute details hash and key according to user options (e.g. passed from\n#render).\n"],["details_for_lookup","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-details_for_lookup","()",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["determine_default_mailer","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-determine_default_mailer","(name)",""],["digest","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-digest","(options)","<p>Supported options:\n<p><code>name</code>   - Template name\n<p><code>finder</code>  - An instance of ActionView::LookupContext\n"],["digest","ActionView::Digestor","classes/ActionView/Digestor.html#method-i-digest","()",""],["directories","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-c-directories","()",""],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_cache","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-disable_cache","()","<p>Temporary skip passing the details_key forward.\n"],["disable_ddl_transaction!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-disable_ddl_transaction-21","()","<p>Disable the transaction wrapping this migration. You can still create your\nown transactions even after …\n"],["disable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["disable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension","(name)",""],["disable_implicit_join_references=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-disable_implicit_join_references-3D","(value)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["display","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-display","(results, options={})","<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],["distance_of_time_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, options = {})","<p>Reports the approximate distance in time between two Time, Date or DateTime\nobjects or integers as seconds. …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, options = {})",""],["distinct","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-distinct","()","<p>Specifies whether the records should be unique or not.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets ...</code></pre>\n"],["distinct","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-distinct","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre><code>User.select(:name)\n# =&gt; Might return ...\n</code></pre>\n"],["div_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["dom_class","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\n\n<pre><code>dom_class(post)   # =&gt; &quot;post&quot; ...\n</code></pre>\n"],["dom_id","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["down","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-down","()",""],["drop","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop","(*arguments)",""],["drop_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all","()",""],["drop_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current","(environment = env)",""],["drop_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table","(table_1, table_2, options = {})","<p>Drops the join table specified by the given arguments. See\n<code>create_join_table</code> for details.\n<p>Although this …\n"],["drop_schema","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-drop_schema","(schema_name)","<p>Drops the schema for the given schema name.\n"],["drop_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n<p><code>:force</code> &mdash; Set to <code>:cascade</code> to drop dependent objects as well. Defaults to\n…\n\n"],["drop_table","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-drop_table","()",""],["dup","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-dup","","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["each","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-each","()",""],["each","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-each","()",""],["each","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-each","(*args, &block)",""],["each","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-each","(&block)",""],["eager_load","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)","<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre><code>User.eager_load(:posts)\n=&gt; SELECT &quot;users&quot;.&quot;id&quot; ...</code></pre>\n"],["eager_load","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-eager_load","()",""],["eager_load!","Rails::Engine","classes/Rails/Engine.html#method-i-eager_load-21","()","<p>Eager load the application by loading all ruby files inside eager_load\npaths.\n"],["eager_load_namespaces","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-eager_load_namespaces","()","<p>All namespaces that are eager loaded\n"],["eager_load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-eager_load_paths","()",""],["eager_loading?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-eager_loading-3F","()","<p>Returns true if relation needs eager loading.\n"],["email_exists?","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-email_exists-3F","(email)","<p>Returns true if the email exists\n"],["email_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type “email”.\n\n<pre><code>email_field(&quot;user&quot;, &quot;address&quot;)\n# =&gt; &lt;input id=&quot;user_address&quot; ...\n</code></pre>\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emails","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-emails","()","<p>Returns all of the available email previews\n"],["emitted_hidden_id?","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F","()",""],["empty?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns <code>true</code> if no errors are found, <code>false</code>\notherwise. If the error message is a string it can be empty. …\n"],["empty?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the collection is empty. If the collection has\nbeen loaded it is equivalent to <code>collection.size.zero?</code> …\n"],["empty?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-enable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["enable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension","(name)",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["encode!","ActionView::Template","classes/ActionView/Template.html#method-i-encode-21","()","<p>This method is responsible for properly setting the encoding of the source.\nUntil this point, we assume …\n"],["encode_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encode_with","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-encode_with","(coder)","<p>Serializes the relation objects Array.\n"],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding","()","<p>Returns the current database encoding format as a string, eg:\n&#39;UTF-8&#39;\n"],["encoding=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-encoding-3D","(value)",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-c-endpoint","(endpoint = nil)",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-i-endpoint","()","<p>Returns the endpoint for this engine. If none is registered, defaults to an\nActionDispatch::Routing::RouteSet …\n"],["enlist_fixture_connections","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["enqueue","ActiveJob::Enqueuing","classes/ActiveJob/Enqueuing.html#method-i-enqueue","(options={})","<p>Enqueues the job to be performed by the queue adapter.\n<p>Options\n<p><code>:wait</code> - Enqueues the job with the specified …\n"],["enqueued_jobs","ActiveJob::QueueAdapters::TestAdapter","classes/ActiveJob/QueueAdapters/TestAdapter.html#method-i-enqueued_jobs","()","<p>Provides a store of all the enqueued jobs with the TestAdapter so you can\ncheck them.\n"],["enum","ActiveRecord::Enum","classes/ActiveRecord/Enum.html#method-i-enum","(definitions)",""],["enumerate","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-enumerate","(tag, options={})","<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>config</code>, <code>db</code>, <code>lib</code>,\nand <code>test</code> (recursively). …\n"],["env","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-env","()",""],["env","Rails","classes/Rails.html#method-c-env","()",""],["env=","Rails","classes/Rails.html#method-c-env-3D","(environment)",""],["env_config","Rails::Application","classes/Rails/Application.html#method-i-env_config","()","<p>Stores some of the Rails initial environment parameters which will be used\nby middlewares and engines …\n"],["env_config","Rails::Engine","classes/Rails/Engine.html#method-i-env_config","()","<p>Defines additional Rack env configuration that is added on each call.\n"],["environment","Rails::Console","classes/Rails/Console.html#method-i-environment","()",""],["environment","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-environment","()",""],["environment","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-environment","(data=nil, options={})","<p>Adds a line inside the Application class for\n<code>config/application.rb</code>.\n<p>If options <code>:env</code> is specified, the …\n"],["environment?","Rails::Console","classes/Rails/Console.html#method-i-environment-3F","()",""],["eql?","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["eql?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-eql-3F","","<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the\nclass name and <code>other</code> have the same length and content, …\n"],["eql?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-eql-3F","(comparison_object)",""],["error_message","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n\n<pre><code>class Person\n  include ...</code></pre>\n"],["errors","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-errors","()","<p>POST create PATCH/PUT update\n"],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escapes carriage returns and single and double quotes for JavaScript\nsegments.\n<p>Also available through …\n"],["escape_once","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n\n<pre><code>escape_once(&quot;1 &lt; 2 &amp;amp; ...</code></pre>\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(owner, spec)",""],["establish_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-establish_connection","(spec = nil)","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["except","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre><code>Post.order(&#39;id asc&#39;).except(:order)       ...</code></pre>\n"],["excerpt","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, options = {})","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_insert","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_migration","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-exec_migration","(conn, direction)",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_query","(sql, name = nil, binds = [])",""],["exec_rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_rollback_db_transaction","()","<p>Aborts a transaction.\n"],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_without_stmt","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_without_stmt","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["exist?","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-exist-3F","(name, options = nil)","<p>fixed problem with invalid exists? method\ngithub.com/rails/rails/commit/cad2c8f5791d5bd4af0f240d96e00bae76eabd2f …\n"],["existent","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent","()","<p>Returns all expanded paths but only if they exist in the filesystem.\n"],["existent_directories","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent_directories","()",""],["existing_migration","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-existing_migration","()",""],["exists?","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-exists-3F","(preview)","<p>Returns true if the preview exists\n"],["exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["exists?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-exists-3F","(conditions = :none)","<p>Returns <code>true</code> if a record exists in the table that matches the\n<code>id</code> or conditions given, or <code>false</code> otherwise. …\n"],["exists?","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-exists-3F","()",""],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expanded","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-expanded","()","<p>Expands all paths against the root and return all unique values.\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()",""],["expire","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-expire","(key, ttl)",""],["explain","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["extending","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extension_enabled?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F","(name)",""],["extensions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions","()","<p>A list of extensions, to be filled in by adapters that support them.\n"],["extensions","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions","()",""],["extensions","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-c-extensions","()",""],["extify","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-extify","(name)","<p>Add an extension to the given name based on the platform.\n"],["extract_annotations_from","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],["extract_last_module","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-i-extract_last_module","(nesting)","<p>Takes in an array of nested modules and extracts the last module\n"],["fallbacks","Rails::Generators","classes/Rails/Generators.html#method-c-fallbacks","()","<p>Hold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another …\n"],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source='favicon.ico', options={})","<p>Returns a link tag for a favicon managed by the asset pipeline.\n<p>If a page has no link like the one generated …\n"],["fetch_multi","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-fetch_multi","(*names)",""],["field_set_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset&#39;s title (optional …\n"],["fields_for","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_name, record_object = nil, fields_options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],["fields_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_name, record_object = nil, options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],["fifth","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-fifth","(*args)","<p>Same as <code>first</code> except returns only the fifth record.\n"],["fifth","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fifth","()","<p>Find the fifth record. If no order is defined it will order by primary key.\n\n<pre><code>Person.fifth # returns the ...\n</code></pre>\n"],["fifth!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fifth-21","()","<p>Same as <code>fifth</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["file_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-file_field","(method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field. If you are using file uploads then you will\nalso need to set the multipart …\n"],["file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-file_path","()",""],["finalized?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-finalized-3F","()",""],["find","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-find","(preview)","<p>Find a mailer preview by its underscored class name\n"],["find","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-find","(*args, &block)","<p>Finds an object in the collection responding to the <code>id</code>. Uses\nthe same rules as <code>ActiveRecord::Base.find</code> …\n"],["find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6),\nor an array of ids ([5, 6, …\n"],["find","Rails::Engine","classes/Rails/Engine.html#method-c-find","(path)","<p>Finds engine with given path\n"],["find","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-find","(klass, params=nil)","<p>GET show GET edit PATCH/PUT update DELETE destroy\n"],["find","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find","(dirs)","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations.\n"],["find_all","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_all","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_all","(name, prefix=nil, partial=false, details={}, key=nil, locals=[])","<p>Normalizes the arguments and passes it on to find_templates.\n"],["find_all_anywhere","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_all_anywhere","(name, prefix, partial=false, details={}, key=nil, locals=[])",""],["find_by","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by","(*args)","<p>Finds the first record matching the specified conditions. There is no\nimplied ordering so if order matters, …\n"],["find_by!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by-21","(*args)","<p>Like <code>find_by</code>, except that if no record is found, raises an\n<code>ActiveRecord::RecordNotFound</code> error.\n"],["find_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_cmd_and_exec","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-find_cmd_and_exec","(commands, *args)",""],["find_each","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Looping through a collection of records from the database (using the\n<code>all</code> method, for example) is very …\n"],["find_file","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_file","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_in","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_in_batches","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array.\n\n<pre><code>Person.where(&quot;age &gt; 21&quot;).find_in_batches ...</code></pre>\n"],["find_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_nth","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_nth","(index, offset)",""],["find_nth!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_nth-21","(index)",""],["find_nth_with_limit","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_nth_with_limit","(offset, limit)",""],["find_one","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_create_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by","(attributes, &block)","<p>Finds the first record with the given attributes, or creates a record with\nthe attributes if one is not …\n"],["find_or_create_by!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by-21","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>create!</code> so an\nexception is raised if the created record is invalid. …\n"],["find_or_initialize_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>new</code> instead of\n<code>create</code>.\n"],["find_root","Rails::Application","classes/Rails/Application.html#method-c-find_root","(from)",""],["find_root","Rails::Engine","classes/Rails/Engine.html#method-c-find_root","(from)",""],["find_some","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_take","()",""],["find_template","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_with_ids","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["finder","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-finder","()",""],["first","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-first","(*args)","<p>Returns the first record, or the first <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first","(limit = nil)","<p>Find the first record (or first N records if a parameter is supplied). If\nno order is defined it will …\n"],["first","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-first","()",""],["first!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["first?","ActionView::PartialIteration","classes/ActionView/PartialIteration.html#method-i-first-3F","()","<p>Check if this is the first iteration of the partial.\n"],["fixture_is_cached?","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_set_names)",""],["fixtures_path","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-fixtures_path","()",""],["flush_newline_if_pending","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-flush_newline_if_pending","(src)",""],["font_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_path","(source, options = {})","<p>Computes the path to a font asset. Full paths from the document root will\nbe passed through.\n\n<pre><code>font_path(&quot;font&quot;) ...</code></pre>\n"],["font_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_url","(source, options = {})","<p>Computes the full URL to a font asset. This will use <code>font_path</code>\ninternally, so most of their behaviors …\n"],["foreign_key_present?","ActiveRecord::Associations::ForeignAssociation","classes/ActiveRecord/Associations/ForeignAssociation.html#method-i-foreign_key_present-3F","()",""],["foreign_keys","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-foreign_keys","(table_name)",""],["foreign_keys","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-foreign_keys","(table_name)","<p>Returns an array of foreign keys for the given table. The foreign keys are\nrepresented as <code>ForeignKeyDefinition</code> …\n"],["form_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_for","(record, options = {}, &block)","<p>Creates a form that allows the user to create or update the attributes of a\nspecific model object.\n<p>The …\n"],["form_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["format_paragraph","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-format_paragraph","(text, len = 72, indent = 2)","<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented\n<code>indent</code> spaces.\n\n<pre><code>my_text = &#39;Here is a sample text with ...</code></pre>\n"],["forty_two","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two","(*args)","<p>Same as <code>first</code> except returns only the forty second record.\nAlso known as accessing “the reddit”. …\n"],["forty_two","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-forty_two","()","<p>Find the forty-second record. Also known as accessing “the reddit”. If no\norder is defined …\n"],["forty_two!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-forty_two-21","()","<p>Same as <code>forty_two</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["fourth","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-fourth","(*args)","<p>Same as <code>first</code> except returns only the fourth record.\n"],["fourth","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fourth","()","<p>Find the fourth record. If no order is defined it will order by primary\nkey.\n\n<pre><code>Person.fourth # returns the ...\n</code></pre>\n"],["fourth!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-fourth-21","()","<p>Same as <code>fourth</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["freeze","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-freeze","()","<p>Clone and freeze the attributes hash such that associations are still\naccessible, even on destroyed records, …\n"],["from","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-from","(value, subquery_name = nil)","<p>Specifies table from which the records will be fetched. For example:\n\n<pre><code>Topic.select(&#39;title&#39;).from(&#39;posts&#39;) ...</code></pre>\n"],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::JSON ...</code></pre>\n"],["from_rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)","<p>Sets the model <code>attributes</code> from an XML string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::Xml ...</code></pre>\n"],["frozen?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre><code>person.errors.full_message(:name, &#39;is invalid&#39;) # =&gt; &quot;Name ...\n</code></pre>\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre><code>class Person\n  validates_presence_of :name, :address, ...</code></pre>\n"],["full_messages_for","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages_for","(attribute)","<p>Returns all the full error messages for a given attribute in an array.\n\n<pre><code>class Person\n  validates_presence_of ...</code></pre>\n"],["full_rollback?","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-full_rollback-3F","()",""],["gem","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem","(*args)","<p>Adds an entry into <code>Gemfile</code> for the supplied gem.\n\n<pre><code>gem &quot;rspec&quot;, group: :test\ngem &quot;technoweenie-restful-authentication&quot;, ...</code></pre>\n"],["gem_group","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem_group","(*names, &block)","<p>Wraps gem entries inside a group.\n\n<pre><code>gem_group :development, :test do\n  gem &quot;rspec-rails&quot;\nend\n</code></pre>\n"],["gem_version","ActionMailer","classes/ActionMailer.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Action Mailer as a\n<code>Gem::Version</code>\n"],["gem_version","ActionView","classes/ActionView.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Action View as a\n<code>Gem::Version</code>\n"],["gem_version","ActiveJob","classes/ActiveJob.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Job as a\n<code>Gem::Version</code>\n"],["gem_version","ActiveModel","classes/ActiveModel.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Model as a\n<code>Gem::Version</code>\n"],["gem_version","ActiveRecord","classes/ActiveRecord.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Record as a\n<code>Gem::Version</code>\n"],["gem_version","Rails","classes/Rails.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Rails as a\n<code>Gem::Version</code>\n"],["gemfile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gemfile","()",""],["gemfile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile","()",""],["gemfile_entry","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile_entry","()",""],["gemspec","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemspec","()",""],["generate","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-generate","(what, *args)","<p>Generate something using a generator from Rails or a plugin. The second\nparameter is the argument string …\n"],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["generate_railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-generate_railtie_name","(string)",""],["generate_test_dummy","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-generate_test_dummy","(force = false)",""],["generated_association_methods","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-generated_association_methods","()",""],["generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-generator","(args=self.default_arguments, options={}, config={})","<p>Instantiate the generator.\n"],["generator_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-generator_name","()","<p>Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will …\n"],["generators","Rails::Application","classes/Rails/Application.html#method-i-generators","(&blk)","<p>Sends any generators called in the instance of a new application up to the\n<code>generators</code> method defined …\n"],["generators","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-generators","()","<p>Holds generators configuration:\n\n<pre><code>config.generators do |g|\n  g.orm             :data_mapper, migration: ...</code></pre>\n"],["generators","Rails::Railtie","classes/Rails/Railtie.html#method-c-generators","(&blk)",""],["get","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>.\n\n<pre><code>person.errors.messages   # =&gt; {:name=&gt;[&quot;cannot be nil&quot;]}\nperson.errors.get(:name) ...</code></pre>\n"],["git","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-git","(commands={})","<p>Run a command in git.\n\n<pre><code>git :init\ngit add: &quot;this.file that.rb&quot;\ngit add: &quot;onefile.rb&quot;, rm: &quot;badfile.cxx&quot;\n</code></pre>\n"],["github","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-github","(name, github, branch = nil, comment = nil)",""],["gitignore","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gitignore","()",""],["gitignore","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gitignore","()",""],["group","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-group","(*args)","<p>Allows to specify a group attribute:\n\n<pre><code>User.group(:name)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; GROUP BY name</code></pre>\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#grouped_collection_select for\nform builders:\n\n<pre><code>&lt;%= form_for ...</code></pre>\n"],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, options = {})","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["groups","Rails","classes/Rails.html#method-c-groups","(*groups)","<p>Returns all rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS …\n"],["handles_encoding?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F","()",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the given attribute is in the attributes hash,\notherwise <code>false</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base ...</code></pre>\n"],["has_key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-has_key-3F","(attribute)","<p>aliases include?\n"],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","(options = {})","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["hash","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre><code>[ Person.find(1), ...</code></pre>\n"],["having","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)","<p>Allows to specify a HAVING clause. Note that you can&#39;t use HAVING\nwithout also specifying a GROUP …\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args = nil)","<p>Allows you to pass random and unusual headers to the new\n<code>Mail::Message</code> object which will add them to …\n"],["help","Rails::Generators","classes/Rails/Generators.html#method-c-help","(command = 'generate')","<p>Show help message with available generators.\n"],["helper","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-helper","()","<p>Gets the helper methods available to the controller.\n<p>This method assumes an <code>ApplicationController</code> exists, …\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","Rails::Engine","classes/Rails/Engine.html#method-i-helpers","()","<p>Returns a module with all the helpers defined for the engine.\n"],["helpers_paths","Rails::Engine","classes/Rails/Engine.html#method-i-helpers_paths","()","<p>Returns all registered helpers paths.\n"],["hex?","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-hex-3F","()",""],["hidden_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP&#39;s statelessness …\n"],["hidden_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hidden_namespaces","()","<p>Returns an array of generator namespaces that are hidden. Generator\nnamespaces may be hidden for a variety …\n"],["hide!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hide-21","()","<p>Convenience method to hide this generator from the available ones when\nrunning rails generator command. …\n"],["hide_namespace","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespace","(*namespaces)",""],["hide_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespaces","(*namespaces)",""],["highlight","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, options = {})","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hook_for","(*names, &block)","<p>Invoke a generator based on the value supplied by the user to the given\noption named “name”. …\n"],["hstore","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-hstore","(name, options = {})",""],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “first_name”. …\n"],["human_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-human_name","()",""],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["i18n_scope","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-i18n_scope","()",""],["id","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value.\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value.\n"],["id_before_type_cast","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast","()","<p>Returns the primary key value before type cast.\n"],["id_was","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_was","()","<p>Returns the primary key previous value.\n"],["identical?","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-identical-3F","()",""],["identify","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-identify","(label, column_type = :integer)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Integer identifiers are values less …\n"],["ids","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-ids","()","<p>Pluck all the ID&#39;s for the relation using the table&#39;s primary key\n\n<pre><code>Person.ids # SELECT people.id ...\n</code></pre>\n"],["image_alt","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_alt","(src)","<p>Returns a string suitable for an HTML image tag alt attribute. The\n<code>src</code> argument is meant to be an image …\n"],["image_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_path","(source, options = {})","<p>Computes the path to an image asset. Full paths from the document root will\nbe passed through. Used internally …\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image …\n"],["image_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options={})","<p>Returns an HTML image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file.\n<p>Options\n<p>You can add …\n"],["image_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_url","(source, options = {})","<p>Computes the full URL to an image asset. This will use\n<code>image_path</code> internally, so most of their behaviors …\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["include?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-include-3F","(attribute)","<p>Returns <code>true</code> if the error messages include an error for the\ngiven key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre><code>person.errors.messages ...</code></pre>\n"],["include?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F","(record)","<p>Returns <code>true</code> if the given <code>record</code> is present in\nthe collection.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many ...</code></pre>\n"],["includes","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-includes","(*args)","<p>Specify relationships to be included in the result set. For example:\n\n<pre><code>users = User.includes(:address)\nusers.each ...</code></pre>\n"],["increment","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-increment","(key, amount = 1)","<p>Increment a key in the store.\n<p>If the key doesn&#39;t exist it will be initialized on 0. If the key exist\n…\n"],["increment!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter","(counter_name, id)","<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining …\n"],["indent","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-indent","(content, multiplier = 2)",""],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index","(column_name, options = {})","<p>Adds index options to the indexes hash, keyed by column name This is\nprimarily used to track indexes …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms","()","<p>A list of index algorithms, to be filled by adapters that support them.\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-index_algorithms","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms","()",""],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre><code># Check an index exists\nindex_exists?(:suppliers, ...</code></pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-index_helper","()",""],["index_name","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-index_name","()",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verifies the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inet","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-inet","(name, options = {})",""],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>Defines the name of the table column which will store the class name on\nsingle-table inheritance situations. …\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["inherited","ActiveRecord::Delegation::DelegateCache","classes/ActiveRecord/Delegation/DelegateCache.html#method-i-inherited","(child_class)",""],["inherited","Rails::Application","classes/Rails/Application.html#method-c-inherited","(base)",""],["inherited","Rails::Engine","classes/Rails/Engine.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie","classes/Rails/Railtie.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["init_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> should be the result of previously encoding an Active …\n"],["initialize_copy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveRecord::Inheritance","classes/ActiveRecord/Inheritance.html#method-i-initialize_dup","(other)",""],["initialize_internals_callback","ActiveRecord::Scoping","classes/ActiveRecord/Scoping.html#method-i-initialize_internals_callback","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-initialize_schema_migrations_table","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_test_deliveries","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-initialize_test_deliveries","()",""],["initialize_type_map","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-initialize_type_map","(m)",""],["initialized?","Rails::Application","classes/Rails/Application.html#method-i-initialized-3F","()","<p>Returns true if the application is initialized.\n"],["initializer","Rails::Application","classes/Rails/Application.html#method-i-initializer","(name, opts={}, &block)","<p>Sends the initializers to the <code>initializer</code> method defined in\nthe Rails::Initializable module. Each Rails::Application …\n"],["initializer","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-initializer","(filename, data=nil, &block)","<p>Create a new initializer with the provided code (either in a block or a\nstring).\n\n<pre><code>initializer(&quot;globals.rb&quot;) ...</code></pre>\n"],["initializer","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializer","(name, opts = {}, &blk)",""],["initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-initializers","()",""],["initializers","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers","()",""],["initializers_chain","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain","()",""],["initializers_for","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for","(binding)",""],["inline","ActionMailer::Base::LateAttachmentsProxy","classes/ActionMailer/Base/LateAttachmentsProxy.html#method-i-inline","()",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value …\n"],["insert","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert","(*args, &block)",""],["insert_after","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_after","(*args, &block)",""],["insert_before","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_before","(*args, &block)",""],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record&#39;s ID\n"],["inside_template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template","()",""],["inside_template?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template-3F","()",""],["inspect","ActionView::Template","classes/ActionView/Template.html#method-i-inspect","()",""],["inspect","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-inspect","()","<p>Returns a string like &#39;Post(id:integer, title:string, body:text)&#39;\n"],["inspect","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-inspect","()",""],["inspect","Rails::Info","classes/Rails/Info.html#method-c-inspect","()",""],["instance","Rails::Application","classes/Rails/Application.html#method-c-instance","()",""],["instance","Rails::Railtie","classes/Rails/Railtie.html#method-c-instance","()","<p>Since Rails::Railtie cannot be instantiated, any methods that call\n<code>instance</code> are intended to be called …\n"],["instance","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-instance","()",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Raises a <code>ActiveRecord::DangerousAttributeError</code> exception when\nan Active Record method is defined in the …\n"],["instantiate","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate","(attributes, column_types = {})","<p>Given an attributes hash, <code>instantiate</code> returns a new instance\nof the appropriate class. Accepts only keys …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true)",""],["instrument","ActionView::Template","classes/ActionView/Template.html#method-i-instrument","(action, &block)",""],["int4range","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int4range","(name, options = {})",""],["int8range","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-int8range","(name, options = {})",""],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if\nerrors were added, <code>false</code> otherwise.\n\n<pre><code>class Person\n  include ...</code></pre>\n"],["inverse_of","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of","(command, args, &block)","<p>Returns the inverse of the given command. For example:\n\n<pre><code>recorder.inverse_of(:rename_table, [:old, :new]) ...</code></pre>\n"],["invoke","Rails::Generators","classes/Rails/Generators.html#method-c-invoke","(namespace, args=ARGV, config={})","<p>Receives a namespace, arguments and the behavior to invoke the generator.\nIt&#39;s used as the default …\n"],["isolate_namespace","Rails::Application","classes/Rails/Application.html#method-i-isolate_namespace","(mod)","<p>Sends the <code>isolate_namespace</code> method up to the class method.\n"],["isolate_namespace","Rails::Engine","classes/Rails/Engine.html#method-c-isolate_namespace","(mod)",""],["j","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-j","(javascript)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_include_tag","(*sources)","<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. …\n"],["javascript_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_path","(source, options = {})","<p>Computes the path to a JavaScript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_tag","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre><code>javascript_tag &quot;alert(&#39;All is good&#39;)&quot;\n</code></pre>\n<p>Returns: …\n"],["javascript_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_url","(source, options = {})","<p>Computes the full URL to a JavaScript asset in the public javascripts\ndirectory. This will use <code>javascript_path</code> …\n"],["javascripts","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-javascripts","()",""],["job_or_instantiate","ActiveJob::Enqueuing::ClassMethods","classes/ActiveJob/Enqueuing/ClassMethods.html#method-i-job_or_instantiate","(*args)",""],["join_table","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","classes/ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html#method-i-join_table","()",""],["joined_includes_values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-joins","(*args)","<p>Performs a joins on <code>args</code>:\n\n<pre><code>User.joins(:posts)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; INNER JOIN &quot;posts&quot; ON &quot;posts&quot;.&quot;user_id&quot; ...</code></pre>\n"],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-json","(name, options = {})",""],["jsonb","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-jsonb","(name, options = {})",""],["key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-key-3F","(attribute)","<p>aliases include?\n"],["key?","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-key-3F","(key)",""],["key_generator","Rails::Application","classes/Rails/Application.html#method-i-key_generator","()","<p>Return the application&#39;s KeyGenerator\n"],["key_matcher","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys.\n<p>This implementation is __different__ …\n"],["keys","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],["keys","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-keys","()",""],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n\n<pre><code>PresenceValidator.kind   # =&gt; :presence\nUniquenessValidator.kind # ...\n</code></pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Returns the kind for this validator.\n\n<pre><code>PresenceValidator.new.kind   # =&gt; :presence\nUniquenessValidator.new.kind ...</code></pre>\n"],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns the\nMoney class …\n"],["l","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["label","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-last","(*args)","<p>Returns the last record, or the last <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last","(limit = nil)","<p>Find the last record (or last N records if a parameter is supplied). If no\norder is defined it will order …\n"],["last","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-last","()",""],["last","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-last","()",""],["last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last?","ActionView::PartialIteration","classes/ActionView/PartialIteration.html#method-i-last-3F","()","<p>Check if this is the last iteration of the partial.\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-last_inserted_id","(result)",""],["layout","ActionView::Layouts::ClassMethods","classes/ActionView/Layouts/ClassMethods.html#method-i-layout","(layout, conditions = {})","<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template …\n"],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()",""],["length","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-length","()","<p>Returns the size of the collection calling <code>size</code> on the target.\nIf the collection has been already loaded, …\n"],["length","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-length","()",""],["levenshtein_distance","Rails::Generators","classes/Rails/Generators.html#method-c-levenshtein_distance","(str1, str2)","<p>This code is based directly on the Text gem implementation Returns a value\nrepresenting the “cost” …\n"],["lib","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-lib","()",""],["lib","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-lib","(filename, data=nil, &block)","<p>Create a new file in the lib/ directory. Code can be specified in a block\nor a data string can be given. …\n"],["lib","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-lib","()",""],["license","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-license","()",""],["limit","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-limit","(value)","<p>Specifies a limit for the number of records to retrieve.\n\n<pre><code>User.limit(10) # generated SQL has &#39;LIMIT 10&#39; ...\n</code></pre>\n"],["link_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to","(name = nil, options = nil, html_options = nil, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_if","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["load","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-load","()","<p>Causes the records to be loaded from the database if they have not been\nloaded already. You can use this …\n"],["load_and_configure_sdoc","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-load_and_configure_sdoc","()",""],["load_and_configure_sdoc","Rails::API::Task","classes/Rails/API/Task.html#method-i-load_and_configure_sdoc","()",""],["load_config_initializer","Rails::Engine","classes/Rails/Engine.html#method-i-load_config_initializer","(initializer)",""],["load_console","Rails::Engine","classes/Rails/Engine.html#method-i-load_console","(app=self)","<p>Load console and invoke the registered hooks. Check\n<code>Rails::Railtie.console</code> for more info.\n"],["load_generators","Rails::Engine","classes/Rails/Engine.html#method-i-load_generators","(app=self)","<p>Load Rails generators and invoke the registered hooks. Check\n<code>Rails::Railtie.generators</code> for more info. …\n"],["load_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-load_paths","()",""],["load_runner","Rails::Engine","classes/Rails/Engine.html#method-i-load_runner","(app=self)","<p>Load Rails runner and invoke the registered hooks. Check\n<code>Rails::Railtie.runner</code> for more info.\n"],["load_schema","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema","(format = ActiveRecord::Base.schema_format, file = nil)",""],["load_schema_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_current","(format = ActiveRecord::Base.schema_format, file = nil, environment = env)",""],["load_schema_current_if_exists","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_current_if_exists","(format = ActiveRecord::Base.schema_format, file = nil, environment = env)",""],["load_schema_if_pending!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-load_schema_if_pending-21","()",""],["load_seed","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed","()",""],["load_seed","Rails::Engine","classes/Rails/Engine.html#method-i-load_seed","()","<p>Load data from db/seeds.rb file. It can be used in to load engines&#39;\nseeds, e.g.:\n<p>Blog::Engine.load_seed …\n"],["load_target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-load_target","()",""],["load_tasks","Rails::Engine","classes/Rails/Engine.html#method-i-load_tasks","(app=self)","<p>Load Rake, railties tasks and invoke the registered hooks. Check\n<code>Rails::Railtie.rake_tasks</code> for more info. …\n"],["loaded?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F","()","<p>Returns <code>true</code> if the association has been loaded, otherwise\n<code>false</code>.\n\n<pre><code>person.pets.loaded? # =&gt; false\nperson.pets ...</code></pre>\n"],["localize","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n<p>See rubydoc.info/github/svenfuchs/i18n/master/I18n/Backend/Base:localize …\n"],["locals_for","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-locals_for","(view)",""],["lock","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)","<p>Specifies locking settings (default to <code>true</code>). For more\ninformation on locking, please see <code>ActiveRecord::Locking</code> …\n"],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [], statement_name = nil)",""],["log","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-log","()",""],["log","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-log","(*args)","<p>Define log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status. …\n"],["log_level","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-log_level","()",""],["log_level=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-log_level-3D","(level)",""],["log_path","Rails::Server","classes/Rails/Server.html#method-i-log_path","()",""],["logger","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-logger","()","<p>Use the logger configured for ActionMailer::Base\n"],["logger","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["lookup_context","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-lookup_context","()","<p>LookupContext is the object responsible to hold all information required to\nlookup templates, i.e. view …\n"],["ltree","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-ltree","(name, options = {})",""],["macaddr","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-macaddr","(name, options = {})",""],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers = {}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mail_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {}, &block)","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["mailer","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-mailer","()","<p>Access the mailer instance.\n"],["mailer_class","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-mailer_class","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-mailer_name","()","<p>Returns the name of current mailer. This method is also being used as a\npath for a view lookup. If this …\n"],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()","<p>Returns the name of the mailer object.\n"],["many?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than one record. Equivalent to\n<code>collection.size &gt; 1</code>.\n\n<pre><code>class Person ...</code></pre>\n"],["many?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-many-3F","()","<p>Returns true if there is more than one record.\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_dump","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump","()",""],["marshal_load","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load","(array)",""],["match","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-match","(model, name)",""],["maximum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["merge","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-merge","(other)","<p>Merges in the conditions from <code>other</code>, if <code>other</code> is\nan <code>ActiveRecord::Relation</code>. Returns an array representing …\n"],["message","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-message","()","<p>Access the message instance.\n"],["message","ActionMailer::MessageDelivery","classes/ActionMailer/MessageDelivery.html#method-i-message","()","<p>Returns the Mail::Message object\n"],["message_verifier","Rails::Application","classes/Rails/Application.html#method-i-message_verifier","(verifier_name)","<p>Returns a message verifier object.\n<p>This verifier can be used to generate and verify signed messages in …\n"],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the hash returned\nby <code>attributes</code>, as though …\n"],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","Rails::Railtie","classes/Rails/Railtie.html#method-c-method_missing","(name, *args, &block)","<p>If the class method does not have a method, then send the method call to\nthe Railtie instance.\n"],["method_missing","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-method_missing","(*args, &block)",""],["middleware","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-middleware","()","<p>Returns the middleware stack for the engine.\n"],["middleware","Rails::Server","classes/Rails/Server.html#method-i-middleware","()",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migrate","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrate","()",""],["migration_dir","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-migration_dir","()",""],["migration_file_name","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-migration_file_name","()",""],["migration_keys","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-migration_keys","()","<p>Lists the valid migration options\n"],["migration_keys","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-migration_keys","()","<p>Adds <code>:array</code> as a valid migration key\n"],["migration_template","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-migration_template","(source, destination, config = {})","<p>Creates a migration template at the given destination. The difference to\nthe default template method …\n"],["migrations_paths","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-i-migrations_paths","()","<p>Returns the migrations paths.\n\n<pre><code>ActiveRecord::Schema.new.migrations_paths\n# =&gt; [&quot;db/migrate&quot;] # Rails migration ...\n</code></pre>\n"],["migrations_paths","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrations_paths","()",""],["minimum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["model_name_from_record_or_class","ActionView::ModelNaming","classes/ActionView/ModelNaming.html#method-i-model_name_from_record_or_class","(record_or_class)",""],["module_namespacing","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-module_namespacing","(&block)","<p>Wrap block with namespace of current application if namespace exists and is\nnot skipped\n"],["money","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-money","(name, options = {})",""],["month_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-month_field","(object_name, method, options = {})","<p>Returns a text_field of type “month”.\n\n<pre><code>month_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["month_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-month_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “month”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["mountable_engine?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-mountable_engine-3F","()",""],["mtime","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-mtime","()",""],["multipart=","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-multipart-3D","(multipart)",""],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-namespace","(name=nil)","<p>Convenience method to get the namespace from the class name. It&#39;s the\nsame as Thor default except …\n"],["namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespace","()",""],["namespaced?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced-3F","()",""],["namespaced_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_class_path","()",""],["namespaced_file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_file_path","()",""],["namespaced_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_path","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["nested_dependencies","ActionView::Digestor","classes/ActionView/Digestor.html#method-i-nested_dependencies","()",""],["new","ActionDispatch::Session::RedisStore","classes/ActionDispatch/Session/RedisStore.html#method-c-new","(app, options = {})",""],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-c-new","(context, &block)",""],["new","ActionMailer::NonInferrableMailerError","classes/ActionMailer/NonInferrableMailerError.html#method-c-new","(name)",""],["new","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-new","(options)",""],["new","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-c-new","(path, pattern=nil)",""],["new","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-c-new","(hash = {}, pattern=nil)",""],["new","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-c-new","()",""],["new","ActionView::PartialIteration","classes/ActionView/PartialIteration.html#method-c-new","(size)",""],["new","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-c-new","(*)",""],["new","ActionView::Renderer","classes/ActionView/Renderer.html#method-c-new","(lookup_context)",""],["new","ActionView::Resolver","classes/ActionView/Resolver.html#method-c-new","()",""],["new","ActionView::Resolver::Cache::SmallCache","classes/ActionView/Resolver/Cache/SmallCache.html#method-c-new","(options = {})",""],["new","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-c-new","(name, prefix, partial, virtual)",""],["new","ActionView::Template","classes/ActionView/Template.html#method-c-new","(source, identifier, handler, details)",""],["new","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-new","(symbol)",""],["new","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-c-new","()",""],["new","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActiveJob::Core","classes/ActiveJob/Core.html#method-c-new","(*arguments)","<p>Creates a new job instance. Takes the arguments that will be passed to the\nperform method.\n"],["new","ActiveJob::QueueAdapters::TestAdapter","classes/ActiveJob/QueueAdapters/TestAdapter.html#method-c-new","()",""],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre><code>class Person\n  def initialize\n    ...</code></pre>\n"],["new","ActiveModel::Model","classes/ActiveModel/Model.html#method-c-new","(params={})","<p>Initializes a new model with the given <code>params</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...</code></pre>\n"],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)","<p>Returns a new ActiveModel::Name instance. By default, the\n<code>namespace</code> and <code>name</code> option will take the namespace\n…\n"],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options = {})","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-c-new","(klass, table, association)",""],["new","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-new","(*args, &block)",""],["new","ActiveRecord::Associations::AssociationScope::BindSubstitution","classes/ActiveRecord/Associations/AssociationScope/BindSubstitution.html#method-c-new","(block)",""],["new","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","classes/ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html#method-c-new","(lhs_class, rhs_class_name)",""],["new","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-new","(attributes = {}, &block)",""],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::AttributeMethods::AttributeMethodCache","classes/ActiveRecord/AttributeMethods/AttributeMethodCache.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)","<p>FIXME: Make the first parameter more similar for the two adapters\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new","(lock = Monitor.new)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new","(pool, frequency)",""],["new","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-c-new","(value)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-new","(*)",""],["new","ActiveRecord::ConnectionAdapters::RealTransaction","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-c-new","(connection, options)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-c-new","(connection, savepoint_name, options)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(types, name, temporary, options, as = nil)",""],["new","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new","(state = nil)",""],["new","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-new","(attributes = nil, options = {})","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-new","(model, name)",""],["new","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-new","(connection, name, class_name, path, config = ActiveRecord::Base)",""],["new","ActiveRecord::FixtureSet::ClassCache","classes/ActiveRecord/FixtureSet/ClassCache.html#method-c-new","(class_names, config)",""],["new","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-new","(*args, &block)","<p>Determines if one of the attributes passed in is the inheritance column,\nand if the inheritance column …\n"],["new","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-new","(name = self.class.name, version = nil)",""],["new","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-c-new","(app)",""],["new","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-c-new","(scope)",""],["new","ActiveRecord::RecordInvalid","classes/ActiveRecord/RecordInvalid.html#method-c-new","(record)",""],["new","ActiveRecord::RecordNotDestroyed","classes/ActiveRecord/RecordNotDestroyed.html#method-c-new","(message, record = nil)",""],["new","ActiveRecord::RecordNotSaved","classes/ActiveRecord/RecordNotSaved.html#method-c-new","(message, record = nil)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(name, scope, options, active_record)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-c-new","(klass, table, values = {})",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-new","(*args, &block)","<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same …\n"],["new","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-c-new","(columns, rows, column_types = {})",""],["new","ActiveRecord::StaleObjectError","classes/ActiveRecord/StaleObjectError.html#method-c-new","(record, attempted_action)",""],["new","ActiveRecord::StatementInvalid","classes/ActiveRecord/StatementInvalid.html#method-c-new","(message, original_exception = nil)",""],["new","ActiveRecord::UnknownAttributeError","classes/ActiveRecord/UnknownAttributeError.html#method-c-new","(record, attribute)",""],["new","ActiveRecord::UnknownPrimaryKey","classes/ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model, description = nil)",""],["new","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-c-new","(*addresses)","<p>Instantiate the store.\n<p>Example:\n\n<pre><code>RedisStore.new\n  # =&gt; host: localhost,   port: 6379,  db: 0\n\nRedisStore.new ...</code></pre>\n"],["new","Rails::API::Task","classes/Rails/API/Task.html#method-c-new","(name)",""],["new","Rails::Application","classes/Rails/Application.html#method-c-new","(initial_variable_values = {}, &block)",""],["new","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-c-new","(*)",""],["new","Rails::Application::DefaultMiddlewareStack","classes/Rails/Application/DefaultMiddlewareStack.html#method-c-new","(app, config, paths)",""],["new","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-c-new","()",""],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-c-new","()",""],["new","Rails::Console","classes/Rails/Console.html#method-c-new","(app, options={})",""],["new","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-new","(arguments = ARGV)",""],["new","Rails::Engine","classes/Rails/Engine.html#method-c-new","()",""],["new","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-c-new","(root=nil)",""],["new","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-new","()",""],["new","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-new","(name)",""],["new","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-new","(name, version, comment, options = {}, commented_out = false)",""],["new","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-c-new","(name, context, options, &block)",""],["new","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-c-new","(root, current, paths, options = {})",""],["new","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-c-new","(path)",""],["new","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-c-new","(app)",""],["new","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-c-new","(app, log = nil)",""],["new","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-c-new","(app, taggers = nil)",""],["new","Rails::Railtie","classes/Rails/Railtie.html#method-c-new","()",""],["new","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-c-new","()",""],["new","Rails::Server","classes/Rails/Server.html#method-c-new","(*)",""],["new","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new_column","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-new_column","(name, default, cast_type, sql_type = nil, null = true)",""],["new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],["new_session","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-next_migration_number","(number)","<p>Determines the version number of the next migration.\n"],["no_color!","Rails::Generators","classes/Rails/Generators.html#method-c-no_color-21","()","<p>Remove the color from output.\n"],["no_touching","ActiveRecord::NoTouching::ClassMethods","classes/ActiveRecord/NoTouching/ClassMethods.html#method-i-no_touching","(&block)","<p>Lets you selectively disable calls to `touch` for the duration of a block.\n<p>Examples\n\n<pre><code>ActiveRecord::Base.no_touching ...</code></pre>\n"],["no_touching?","ActiveRecord::NoTouching","classes/ActiveRecord/NoTouching.html#method-i-no_touching-3F","()",""],["none","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-none","()","<p>Returns a chainable relation with zero records.\n<p>The returned relation implements the Null Object pattern. …\n"],["normalize_migration_number","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-normalize_migration_number","(number)",""],["normalized_versions","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-normalized_versions","()",""],["not","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-not","(opts, *rest)","<p>Returns a new relation expressing WHERE + NOT condition according to the\nconditions in the arguments. …\n"],["num_waiting","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads currently waiting on this queue.\n"],["number_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_human","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["numrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-numrange","(name, options = {})",""],["object","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["odd?","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-offset","(value)","<p>Specifies the number of rows to skip before returning rows.\n\n<pre><code>User.offset(10) # generated SQL has &quot;OFFSET ...\n</code></pre>\n"],["on_conflict_behavior","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-on_conflict_behavior","()",""],["only","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n\n<pre><code>Post.order(&#39;id asc&#39;).only(:where) ...</code></pre>\n"],["opt_parser","Rails::Server","classes/Rails/Server.html#method-i-opt_parser","()",""],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-order","(*args)","<p>Allows to specify an order attribute:\n\n<pre><code>User.order(:name)\n=&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ORDER BY &quot;users&quot;.&quot;name&quot; ...</code></pre>\n"],["param_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it&#39;s inside …\n"],["parse!","Rails::Server::Options","classes/Rails/Server/Options.html#method-i-parse-21","(args)",""],["parse_arguments","Rails::Console","classes/Rails/Console.html#method-c-parse_arguments","(arguments)",""],["parse_arguments","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-parse_arguments","(arguments)",""],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the <code>password_digest</code> attribute, only\nif the new password is not empty.\n\n<pre><code>class ...</code></pre>\n"],["password_confirmation=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password_confirmation-3D","(unencrypted_password)",""],["password_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["path","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-path","(name, path, comment = nil)",""],["path_to_asset","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_asset","(source, options = {})",""],["path_to_audio","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_audio","(source, options = {})",""],["path_to_font","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_font","(source, options = {})",""],["path_to_image","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_image","(source, options = {})",""],["path_to_javascript","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_javascript","(source, options = {})",""],["path_to_stylesheet","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_stylesheet","(source, options = {})",""],["path_to_video","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_video","(source, options = {})",""],["paths","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-paths","()",""],["paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-paths","()",""],["pattern","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-pattern","()",""],["perform","ActiveJob::Execution","classes/ActiveJob/Execution.html#method-i-perform","(*)",""],["perform_enqueued_jobs","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-perform_enqueued_jobs","()",""],["perform_later","ActiveJob::Enqueuing::ClassMethods","classes/ActiveJob/Enqueuing/ClassMethods.html#method-i-perform_later","(*args)","<p>Push a job onto the queue. The arguments must be legal JSON types (string,\nint, float, nil, true, false, …\n"],["perform_now","ActiveJob::Execution","classes/ActiveJob/Execution.html#method-i-perform_now","()","<p>Performs the job immediately. The job is not sent to the queueing adapter\nbut directly executed by blocking …\n"],["perform_now","ActiveJob::Execution::ClassMethods","classes/ActiveJob/Execution/ClassMethods.html#method-i-perform_now","(*args)","<p>Performs the job immediately.\n\n<pre><code>MyJob.perform_now(&quot;mike&quot;)\n</code></pre>\n"],["performed_jobs","ActiveJob::QueueAdapters::TestAdapter","classes/ActiveJob/QueueAdapters/TestAdapter.html#method-i-performed_jobs","()","<p>Provides a store of all the performed jobs with the TestAdapter so you can\ncheck them.\n"],["persisted?","ActiveModel::Model","classes/ActiveModel/Model.html#method-i-persisted-3F","()","<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...</code></pre>\n"],["persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted, i.e. it&#39;s not a new record and\nit was not destroyed, otherwise …\n"],["phone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})","<p>aliases telephone_field\n"],["phone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table&#39;s primary key and belonging sequence.\n"],["pluck","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-pluck","(*column_names)","<p>Use <code>pluck</code> as a shortcut to select one or more attributes\nwithout loading a bunch of records just to grab …\n"],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class.\n\n<pre><code>ActiveModel::Naming.plural(post)             # =&gt; ...\n</code></pre>\n"],["plural_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_file_name","()",""],["plural_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_name","()",""],["plural_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_table_name","()",""],["pluralize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["pluralize_table_names?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F","()",""],["point","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-point","(name, options = {})",""],["poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll","(timeout = nil)","<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head the queue\nif the number …\n"],["populate_with_current_scope_attributes","ActiveRecord::Scoping","classes/ActiveRecord/Scoping.html#method-i-populate_with_current_scope_attributes","()",""],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-prefix","()",""],["preload","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-preload","(*args)","<p>Allows preloading of <code>args</code>, in the same way that\n<code>includes</code> does:\n\n<pre><code>User.preload(:posts)\n=&gt; SELECT &quot;posts&quot;.* ...</code></pre>\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-prepare_column_options","(column, types)","<p>This can be overridden on a Adapter level basis to support other extended\ndatatypes (Example: Adding …\n"],["prepend","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-prepend","(*args)",""],["prepend_view_path","ActionView::ViewPaths","classes/ActionView/ViewPaths.html#method-i-prepend_view_path","(path)",""],["prepend_view_path","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],["pretty_print","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-pretty_print","(pp)","<p>Takes a PP and prettily prints this record to it, allowing you to get a\nnice result from `pp record` …\n"],["pretty_print","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-pretty_print","(q)",""],["preview_name","ActionMailer::Preview","classes/ActionMailer/Preview.html#method-c-preview_name","()","<p>Returns the underscored name of the mailer preview without the suffix\n"],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre><code>person.name # =&gt; &quot;bob&quot;\nperson.name ...</code></pre>\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Defines the primary key field. Use of the native PostgreSQL UUID type is\nsupported, and can be used by …\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-primary_key","()",""],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.primary_key = &#39;sysid&#39; ...</code></pre>\n"],["primary_keys","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys","(table_name)",""],["print_generators","Rails::Generators","classes/Rails/Generators.html#method-c-print_generators","()",""],["process","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-process","(event)","<p>An email was generated.\n"],["proper_table_name","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-proper_table_name","(name, options = {})","<p>Finds the correct table name given an Active Record object. Uses the Active\nRecord object&#39;s own  …\n"],["property","Rails::Info","classes/Rails/Info.html#method-c-property","(name, value = nil)",""],["provide","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-provide","(name, content = nil, &block)","<p>The same as <code>content_for</code> but when used with streaming flushes\nstraight back to the layout. In other words, …\n"],["proxy_association","ActiveRecord::AssociationRelation","classes/ActiveRecord/AssociationRelation.html#method-i-proxy_association","()",""],["proxy_association","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-proxy_association","()",""],["public_directory","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-public_directory","()",""],["public_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-public_namespaces","()",""],["public_path","Rails","classes/Rails.html#method-c-public_path","()",""],["purge","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge","(configuration)",""],["purge_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_all","()",""],["purge_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge_current","(environment = env)",""],["push","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-push","(*records)",""],["push","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-push","(path)",""],["query","ActionView::NullResolver","classes/ActionView/NullResolver.html#method-i-query","(path, exts, formats, _)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["queue_adapter","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-queue_adapter","()",""],["queue_adapter=","ActiveJob::QueueAdapter::ClassMethods","classes/ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter-3D","(name_or_adapter)","<p>Specify the backend queue provider. The default queue adapter is the\n:inline queue. See QueueAdapters …\n"],["queue_as","ActiveJob::QueueName::ClassMethods","classes/ActiveJob/QueueName/ClassMethods.html#method-i-queue_as","(part_name=nil, &block)","<p>Specifies the name of the queue to process the job on.\n\n<pre><code>class PublishToFeedJob &lt; ActiveJob::Base\n  queue_as ...</code></pre>\n"],["queue_name","ActiveJob::QueueName","classes/ActiveJob/QueueName.html#method-i-queue_name","()","<p>Returns the name of the queue the job will be run on\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-quote","(value)","<p>Surround string with single quotes if there is no quotes. Otherwise fall\nback to double quotes\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)",""],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)","<p>Override to return the quoted table name for assignment. Defaults to table\nquoting.\n<p>This works for mysql …\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the MySQL adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quoted_date","(value)",""],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_id","ActiveRecord::Sanitization","classes/ActiveRecord/Sanitization.html#method-i-quoted_id","()","<p>TODO: Deprecate this\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["radio_button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-rails_root","()",""],["rails_version","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::EdgeTask","classes/Rails/API/EdgeTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::StableTask","classes/Rails/API/StableTask.html#method-i-rails_version","()",""],["railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-railtie_name","(name = nil)",""],["railtie_namespace","Rails::Railtie","classes/Rails/Railtie.html#method-i-railtie_namespace","()",""],["railties","Rails::Engine","classes/Rails/Engine.html#method-i-railties","()",""],["raise_errors?","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-raise_errors-3F","()",""],["raise_record_invalid","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-raise_record_invalid","()",""],["rake","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rake","(command, options={})","<p>Runs the supplied rake task\n\n<pre><code>rake(&quot;db:migrate&quot;)\nrake(&quot;db:migrate&quot;, env: &quot;production&quot;)\nrake(&quot;gems:install&quot;, ...</code></pre>\n"],["rake_tasks","Rails::Application","classes/Rails/Application.html#method-i-rake_tasks","(&block)","<p>If you try to define a set of rake tasks on the instance, these will get\npassed up to the rake tasks …\n"],["rake_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-c-rake_tasks","(&blk)",""],["rakefile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-rakefile","()",""],["rakefile","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rakefile","(filename, data=nil, &block)","<p>Create a new <code>Rakefile</code> with the provided code (either in a\nblock or a string).\n\n<pre><code>rakefile(&quot;bootstrap.rake&quot;) ...</code></pre>\n"],["rakefile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-rakefile","()",""],["range_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["raw","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name, &block)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nbefore typecasting and deserialization.\n\n<pre><code>class ...</code></pre>\n"],["read_entry","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-read_entry","(key, options)",""],["read_multi","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-read_multi","(*names)","<p>Reads multiple keys from the cache using a single call to the servers for\nall keys. Options can be passed …\n"],["read_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-read_store_attribute","(store_attribute, key)",""],["readme","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-readme","()",""],["readme","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-readme","(path)","<p>Reads the given file at the source root and prints it in the console.\n\n<pre><code>readme &quot;README&quot;\n</code></pre>\n"],["readme","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-readme","()",""],["readonly","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)","<p>Sets readonly attributes for the returned relation. If value is true\n(default), attempting to update …\n"],["readonly!","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["reap","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap","()","<p>Recover lost connections for the pool.  A lost connection can occur if a\nprogrammer forgets to checkin …\n"],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["receive","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-receive","(event)","<p>An email was received.\n"],["reconnect","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-reconnect","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command, &block)","<p>record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre><code>recorder.record(:method_name, ...</code></pre>\n"],["record_key_for_dom_id","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["ref","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-ref","()",""],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference.\n\n<pre><code>t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</code></pre>\n<p>See SchemaStatements#add_reference …\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)","<p>Adds a reference.\n\n<pre><code>t.references(:user)\nt.belongs_to(:supplier, foreign_key: true)\n</code></pre>\n<p>See SchemaStatements#add_reference …\n"],["references","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-references","(*table_names)","<p>Use to indicate that the given <code>table_names</code> are referenced by\nan SQL string, and should therefore be  …\n"],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre><code>Account.reflect_on_aggregation(:balance) ...</code></pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre><code>Account.reflect_on_association(:owner) ...</code></pre>\n"],["reflections","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflections","()","<p>Returns a Hash of name of the reflection as the key and a\nAssociationReflection as the value.\n\n<pre><code>Account.reflections ...</code></pre>\n"],["refresh","ActionView::Template","classes/ActionView/Template.html#method-i-refresh","(view)","<p>Receives a view object and return a template similar to self by using\n@virtual_path.\n<p>This method is useful …\n"],["register","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-register","(*t)",""],["register_extensions","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-c-register_extensions","(*exts, &block)","<p>Registers new Annotations File Extensions\n\n<pre><code>SourceAnnotationExtractor::Annotation.register_extensions(&quot;css&quot;, ...</code></pre>\n"],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a\nclass, string or symbol can …\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class, string or symbol …\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["register_preview_interceptor","ActionMailer::Previews::ClassMethods","classes/ActionMailer/Previews/ClassMethods.html#method-i-register_preview_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is previewed.\nEither a class or a string can …\n"],["register_preview_interceptors","ActionMailer::Previews::ClassMethods","classes/ActionMailer/Previews/ClassMethods.html#method-i-register_preview_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is\npreviewed.\n"],["register_task","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task","(pattern, task)",""],["regular_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-regular_class_path","()",""],["relative_existing_migration","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-relative_existing_migration","()",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","(name = nil)",""],["reload","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-reload","()","<p>Reloads the collection from the database. Returns <code>self</code>.\nEquivalent to <code>collection(true)</code>.\n\n<pre><code>class Person &lt; ...</code></pre>\n"],["reload","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the record from the database.\n<p>This method finds record by its primary key (which could be assigned …\n"],["reload","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reload","()","<p>Forces reloading of relation.\n"],["reload!","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-i-reload-21","()",""],["reload!","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-reload-21","(print=true)","<p>reloads the environment\n"],["reload_routes!","Rails::Application","classes/Rails/Application.html#method-i-reload_routes-21","()","<p>Reload application routes regardless if they changed or not.\n"],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove","(conn)","<p>Remove a connection from the connection pool.  The connection will remain\nopen and active but will no …\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n\n<pre><code>t.remove(:qualification)\nt.remove(:qualification, :experience)\n</code></pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to","(table_name, ref_name, options = {})",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, column_name, type = nil, options = {})","<p>Removes the column from the table definition.\n\n<pre><code>remove_column(:suppliers, :qualification)\n</code></pre>\n<p>The <code>type</code> and <code>options</code> …\n"],["remove_column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column","(name)",""],["remove_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_column_sql","(table_name, column_name, type = nil, options = {})",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)","<p>Removes the given columns from the table definition.\n\n<pre><code>remove_columns(:suppliers, :qualification, :experience)\n</code></pre>\n"],["remove_columns_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_columns_sql","(table_name, *column_names)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(owner)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-remove_connection","(klass = self)",""],["remove_foreign_key","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_foreign_key","(from_table, options_or_to_table = {})","<p>Removes the given foreign key from the table.\n<p>Removes the foreign key on <code>accounts.branch_id</code>.\n\n<pre><code>remove_foreign_key ...</code></pre>\n"],["remove_hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-remove_hook_for","(*names)","<p>Remove a previously added hook.\n\n<pre><code>remove_hook_for :orm\n</code></pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Removes the given index from the table.\n<p>Removes the <code>index_accounts_on_column</code> in the\n<code>accounts</code> table.\n\n<pre><code>remove_index ...</code></pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Remove the index_table_name_on_column in the table_name table …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference","(table_name, ref_name, options = {})","<p>Removes the reference(s). Also removes a <code>type</code> column if one\nexists. <code>remove_reference</code>, <code>remove_references</code> …\n"],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name, options = {})","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table definition.\n\n<pre><code>remove_timestamps(:suppliers)\n</code></pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","(options = {})","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n\n<pre><code>t.remove_timestamps\n</code></pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_timestamps_sql","(table_name, options = {})",""],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n\n<pre><code>t.rename(:description, :name)\n</code></pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n\n<pre><code>rename_column(:suppliers, :description, :name)\n</code></pre>\n"],["rename_column_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column_indexes","(table_name, column_name, new_column_name)",""],["rename_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to\n<code>index_users_on_last_name</code>:\n\n<pre><code>rename_index ...</code></pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index","(index_name, new_index_name)","<p>Renames the given index on the table.\n\n<pre><code>t.rename_index(:user_id, :account_id)\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table. Also renames a table&#39;s primary key sequence if the\nsequence name exists and matches …\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n\n<pre><code>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)\n</code></pre>\n"],["rename_table_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table_indexes","(table_name, new_name)",""],["render","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that&#39;s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> …\n"],["render","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render","(context, options, block)",""],["render","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render","(context, options)","<p>Main render entry point shared by AV and AC.\n"],["render","ActionView::Template","classes/ActionView/Template.html#method-i-render","(view, locals, buffer=nil, &block)","<p>Render a template. If the template was not compiled yet, it is done exactly\nbefore rendering.\n<p>This method …\n"],["render","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render","ActionView::TestCase::Behavior::Locals","classes/ActionView/TestCase/Behavior/Locals.html#method-i-render","(options = {}, local_assigns = {})",""],["render_bind","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-render_bind","(column, value)",""],["render_body","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render_body","(context, options)","<p>Render but returns a valid Rack body. If fibers are defined, we return a\nstreaming body that renders …\n"],["render_collection","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_partial","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_template","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-render_to_body","(options = {})",""],["rendered_format","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-rendered_format","()",""],["rendered_views","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-rendered_views","()",""],["rendered_views","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-rendered_views","()",""],["reorder","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre><code>User.order(&#39;email DESC&#39;).reorder(&#39;id ...</code></pre>\n"],["replace","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-replace","(other_array)","<p>Replaces this collection with <code>other_array</code>. This will perform a\ndiff and delete/add only records that …\n"],["require_debugger","Rails::Console","classes/Rails/Console.html#method-i-require_debugger","()",""],["require_engine","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-require_engine","()",""],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode.\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F","()",""],["reset","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-reset","()","<p>Unloads the association. Returns <code>self</code>.\n\n<pre><code>class Person &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nperson.pets ...</code></pre>\n"],["reset","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_cache","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-reset_cache","()",""],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-respond_to-3F","(name, include_private = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["respond_to?","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F","(name, include_private = false)",""],["respond_to_missing?","Rails::Railtie","classes/Rails/Railtie.html#method-c-respond_to_missing-3F","(*args)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A <code>Person</code> instance with a <code>name</code> attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code> …\n"],["restore_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-restore_attributes","(attributes = changed)","<p>Restore all previous data of the provided attributes.\n"],["restore_delivery_method","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-restore_delivery_method","()",""],["restore_test_deliveries","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-restore_test_deliveries","()",""],["result","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-result","()","<p>Extended in activerecord-deprecated_finders\n"],["retrieve_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)","<p>Retrieving the connection pool happens a lot so we cache it in\n@class_to_pool. This makes retrieving …\n"],["retry_job","ActiveJob::Enqueuing","classes/ActiveJob/Enqueuing.html#method-i-retry_job","(options={})","<p>Reschedules the job to be re-executed. This is useful in combination with\nthe <code>rescue_from</code> option. When …\n"],["reverse_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_order","()","<p>Reverse the existing order clause on the relation.\n\n<pre><code>User.order(&#39;name ASC&#39;).reverse_order # generated SQL ...\n</code></pre>\n"],["reversible","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reversible","()","<p>Used to specify an operation that can be run in one direction or another.\nCall the methods <code>up</code> and <code>down</code> …\n"],["revert","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-revert","(*migration_classes)","<p>Reverses the migration commands for the given block and the given\nmigrations.\n<p>The following migration …\n"],["revert","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-revert","()","<p>While executing the given block, the recorded will be in reverting mode.\nAll commands recorded will end …\n"],["reverting?","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["revoke!","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-revoke-21","()",""],["rewhere","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-rewhere","(conditions)","<p>Allows you to change a previously set where condition for a given\nattribute, instead of appending to …\n"],["rollback","ActiveRecord::ConnectionAdapters::RealTransaction","classes/ActiveRecord/ConnectionAdapters/RealTransaction.html#method-i-rollback","()",""],["rollback","ActiveRecord::ConnectionAdapters::SavepointTransaction","classes/ActiveRecord/ConnectionAdapters/SavepointTransaction.html#method-i-rollback","()",""],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F","()",""],["root","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-root","()",""],["root","Rails","classes/Rails.html#method-c-root","()",""],["root=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-root-3D","(value)",""],["route","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-route","(routing_code)","<p>Make an entry in Rails routing file <code>config/routes.rb</code>\n\n<pre><code>route &quot;root &#39;welcome#index&#39;&quot;\n</code></pre>\n"],["route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["route_url","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-route_url","()",""],["routes","Rails::Engine","classes/Rails/Engine.html#method-i-routes","()","<p>Defines the routes for this engine. If a block is given to routes, it is\nappended to the engine.\n"],["run","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run","()",""],["run","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-run","(*migration_classes)","<p>Runs the given migration classes. Last argument can specify options:\n<p>:direction (default is :up)\n<p>:revert …\n"],["run","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-run","(*args)",""],["run_generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-run_generator","(args=self.default_arguments, config={})","<p>Runs the generator configured for this class. The first argument is an\narray like command line arguments: …\n"],["run_in_transaction?","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["run_initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-run_initializers","(group=:default, *args)",""],["runner","Rails::Application","classes/Rails/Application.html#method-i-runner","(&blk)","<p>Sends any runner called in the instance of a new application up to the\n<code>runner</code> method defined in Rails::Railtie …\n"],["runner","Rails::Railtie","classes/Rails/Railtie.html#method-c-runner","(&blk)",""],["runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["safe_concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_join","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join","(array, sep=$,)","<p>This method returns an HTML safe string similar to what\n<code>Array#join</code> would return. The array is flattened, …\n"],["sandbox?","Rails::Console","classes/Rails/Console.html#method-i-sandbox-3F","()",""],["sanitize","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>Sanitizes HTML input, stripping all tags and attributes that aren&#39;t\nwhitelisted.\n<p>It also strips href/src …\n"],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments, default_table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs, table)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre><code>{ status: nil, group_id: ...</code></pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre><code>{ name: &quot;foo&#39;bar&quot;, group_id: ...</code></pre>\n"],["sanitize_sql_like","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_like","(string, escape_character = \"\\\\\")","<p>Sanitizes a <code>string</code> so that it is safe to use within an SQL\nLIKE statement. This method uses <code>escape_character</code> …\n"],["save","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular Base#save method …\n"],["save","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-save","()","<p>POST create\n"],["save!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_status","Rails::Generators::Actions::CreateMigration","classes/Rails/Generators/Actions/CreateMigration.html#method-i-say_status","(status, color, message = relative_destination)",""],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_cache=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D","(cache)",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-schema_creation","()",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_file","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-schema_file","(format = ActiveRecord::Base.schema_format)",""],["schema_names","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_names","()","<p>Returns an array of schema names.\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scope","()","<p>Returns a <code>Relation</code> object for the records in this association\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, body, &block)","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoping","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scoping","()","<p>We don&#39;t want this object to be put on the scoping stack, because that\ncould create an infinite loop …\n"],["scoping","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n\n<pre><code>Comment.where(post_id: 1).scoping do\n  Comment.first\nend\n# =&gt; ...\n</code></pre>\n"],["search_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns an input of type “search” for accessing a specified attribute\n(identified by <code>method</code> …\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["second","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-second","(*args)","<p>Same as <code>first</code> except returns only the second record.\n"],["second","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-second","()","<p>Find the second record. If no order is defined it will order by primary\nkey.\n\n<pre><code>Person.second # returns the ...\n</code></pre>\n"],["second!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-second-21","()","<p>Same as <code>second</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["secrets","Rails::Application","classes/Rails/Application.html#method-i-secrets","()","<p>Returns secrets added to config/secrets.yml.\n<p>Example:\n\n<pre><code>development:\n  secret_key_base: 836fa3665997a860728bcb9e9a1e704d427cfc920e79d847d79c8a9a907b9e965defa4154b2b86bdec6930adbe33f21364523a6f6ce363865724549fdfc08553 ...</code></pre>\n"],["seed_loader","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-seed_loader","()",""],["select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices = nil, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#select for form builders:\n\n<pre><code>&lt;%= form_for @post do |f| %&gt;\n  ...</code></pre>\n"],["select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices = nil, options = {}, html_options = {}, &block)","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-select","(*fields, &block)","<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the\nresult set.\n\n<pre><code>class Person &lt; ...</code></pre>\n"],["select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-select","(*fields)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like Array#select.\n\n<pre><code>Model.all.select ...</code></pre>\n"],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an ActiveRecord::Result instance.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_date","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of HTML select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It&#39;s …\n"],["select_datetime","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of HTML select-tags (one for year, month, day, hour, minute,\nand second) pre-selected with …\n"],["select_day","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_hour","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil, binds = [])","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil, binds = [])",""],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-select_rows","(sql, name = nil, binds = [])",""],["select_second","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of HTML select-tags (one for hour and minute). You can set\n<code>:time_separator</code> key to format …\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])","<p>Returns a single value from a record\n"],["select_value","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])",""],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre><code>select_values(&quot;SELECT id FROM companies ...</code></pre>\n"],["select_values","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-select_values","(arel, name = nil)",""],["select_year","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)","<p>Returns a serialized hash of your object.\n\n<pre><code>class Person\n  include ActiveModel::Serialization\n\n  attr_accessor ...</code></pre>\n"],["serializable_hash","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveJob::Arguments","classes/ActiveJob/Arguments.html#method-i-serialize","(arguments)","<p>Serializes a set of arguments. Whitelisted types are returned as-is.\nArrays/Hashes are serialized element …\n"],["serialize","ActiveJob::Core","classes/ActiveJob/Core.html#method-i-serialize","()","<p>Returns a hash with the job data that can safely be passed to the queueing\nadapter.\n"],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name_or_coder = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialize_args_for_assertion","ActiveJob::TestHelper","classes/ActiveJob/TestHelper.html#method-i-serialize_args_for_assertion","(args)",""],["serialized_attributes","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialized_attributes","()",""],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["set","ActiveJob::Core::ClassMethods","classes/ActiveJob/Core/ClassMethods.html#method-i-set","(options={})","<p>Creates a job preconfigured with the given options. You can call\nperform_later with the job arguments …\n"],["set","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>.\n\n<pre><code>person.errors.get(:name) # =&gt; [&quot;cannot be nil&quot;]\nperson.errors.set(:name, ...</code></pre>\n"],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)","<p>Used by #mail to set the content type of the message.\n<p>It will use the given <code>user_content_type</code>, or multipart …\n"],["set_delivery_method","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-set_delivery_method","(method)",""],["set_environment","Rails::Server","classes/Rails/Server.html#method-i-set_environment","()",""],["set_environment!","Rails::Console","classes/Rails/Console.html#method-i-set_environment-21","()",""],["set_expected_mail","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-set_expected_mail","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})","<p>Sets the model class for a fixture when the class name cannot be inferred\nfrom the fixture name.\n<p>Examples: …\n"],["set_migration_assigns!","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-set_migration_assigns-21","(destination)",""],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()",""],["set_state","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-set_state","(state)",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_set_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures","(config = ActiveRecord::Base)",""],["setup_horo_variables","Rails::API::Task","classes/Rails/API/Task.html#method-i-setup_horo_variables","()",""],["setup_with_controller","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["signature","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-signature","()","<p>The parameters in the signature may have reserved Ruby words, in order to\nprevent errors, we start each …\n"],["simple_format","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options = {}, options = {})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class.\n\n<pre><code>ActiveModel::Naming.singular(post)             # ...\n</code></pre>\n"],["singular_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_name","()","<p>FIXME: We are avoiding to use alias because a bug on thor that make this\nmethod public and add it to …\n"],["singular_route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["singular_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_table_name","()",""],["size","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, &quot;can&#39;t be blank&quot;)\nperson.errors.size # ...\n</code></pre>\n"],["size","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-size","()","<p>Returns the size of the collection. If the collection hasn&#39;t been\nloaded, it executes a <code>SELECT COUNT(*)</code> …\n"],["size","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size","()",""],["size","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-size","()",""],["size","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["slice","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-slice","(*methods)","<p>Returns a hash of the given methods with their names as keys and returned\nvalues as values.\n"],["sorted_groups","Rails::Generators","classes/Rails/Generators.html#method-c-sorted_groups","()",""],["source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-source_root","(path=nil)","<p>Returns the source root for this generator using default_source_root as\ndefault.\n"],["spawn","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-spawn","()",""],["sql","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-sqlite_version","()",""],["start","Rails::Console","classes/Rails/Console.html#method-c-start","(*args)",""],["start","Rails::Console","classes/Rails/Console.html#method-i-start","()",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-start","()",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-start","()",""],["start","Rails::Server","classes/Rails/Server.html#method-i-start","()",""],["started_request_message","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-started_request_message","(request)","<p>Started GET “/session/new” for 127.0.0.1 at 2012-09-26 14:51:42 -0700\n"],["stats","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-stats","()",""],["sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store_accessor","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["stored_attributes","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-stored_attributes","()",""],["strict_mode?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-strict_mode-3F","()",""],["strip_links","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>html</code> leaving just the link text.\n\n<pre><code>strip_links(&#39;&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</code></pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from <code>html</code>, including comments.\n\n<pre><code>strip_tags(&quot;Strip &lt;i&gt;these&lt;/i&gt; tags!&quot;)\n# =&gt; Strip ...\n</code></pre>\n"],["structure_dump","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump","(*arguments)",""],["structure_load","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load","(*arguments)",""],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don&#39;t specify an extension, …\n"],["stylesheet_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_path","(source, options = {})","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["stylesheet_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_url","(source, options = {})","<p>Computes the full URL to a stylesheet asset in the public stylesheets\ndirectory. This will use <code>stylesheet_path</code> …\n"],["stylesheets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-stylesheets","()",""],["subclasses","Rails::Generators","classes/Rails/Generators.html#method-c-subclasses","()","<p>Track all generators subclasses.\n"],["subclasses","Rails::Railtie","classes/Rails/Railtie.html#method-c-subclasses","()",""],["submit","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-submit","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:data</code> - This option can be used to …\n"],["subquery_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-subquery_for","(key, select)","<p>MySQL is too stupid to create a temporary table for use subquery, so we\nhave to give it some prompting …\n"],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, _unused = 0)","<p>Returns a bind substitution value given a bind <code>column</code> NOTE:\nThe column param is currently being used …\n"],["suffix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix","()",""],["suffix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-suffix","()",""],["sum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-sum","(*args)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain?\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F","()",""],["supports_extensions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F","()","<p>Does this adapter support database extensions?\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F","()","<p>Returns true if pg &gt; 9.1\n"],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_foreign_keys-3F","()","<p>Does this adapter support creating foreign key constraints?\n"],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_foreign_keys-3F","()",""],["supports_foreign_keys?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_foreign_keys-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn&#39;t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_indexes_in_create?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_indexes_in_create-3F","()","<p>Does this adapter support creating indexes in the same statement as\ncreating the table?\n"],["supports_indexes_in_create?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_indexes_in_create-3F","()",""],["supports_materialized_views?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_materialized_views-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations?\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F","()","<p>Does this adapter support partial indices?\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F","()",""],["supports_partial_index?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_partial_index-3F","()",""],["supports_path?","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-supports_path-3F","()","<p>Emails do not support relative path links.\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_primary_key-3F","()",""],["supports_ranges?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ranges-3F","()","<p>Range datatypes weren&#39;t introduced until PostgreSQL 9.2\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints?\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F","()",""],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_streaming?","ActionView::Template","classes/ActionView/Template.html#method-i-supports_streaming-3F","()","<p>Returns if the underlying handler supports streaming. If so, a streaming\nbuffer <strong>may</strong> be passed when it …\n"],["supports_streaming?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F","()",""],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>Does this adapter support setting the isolation level for a transaction?\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>MySQL 4 technically support transaction isolation, but it is affected by a\nbug where the transaction …\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_views-3F","()","<p>Does this adapter support views?\n"],["supports_views?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_views-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_views-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_views-3F","()",""],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["swap","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-swap","(*args, &block)",""],["symbolized_base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_base_class","()",""],["symbolized_sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_sti_name","()",""],["t","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-t","(key, options = {})",""],["table","ActiveRecord::Associations::JoinDependency::Aliases::Table","classes/ActiveRecord/Associations/JoinDependency/Aliases/Table.html#method-i-table","()",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_exists-3F","(table_name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre><code>table_exists?(:developers)\n</code></pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_exists?","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-table_exists-3F","()",""],["table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-table_name","()",""],["table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-table_name","()",""],["table_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre><code>class Project &lt; ActiveRecord::Base\n  self.table_name = &quot;project&quot; ...</code></pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_name_options","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-table_name_options","(config = ActiveRecord::Base)",""],["table_rows","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-table_rows","()","<p>Returns a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_structure","(table_name)",""],["tables","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path.\n"],["tables","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-tables","(name)",""],["tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["tail!","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-tail-21","()",""],["take","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-take","(n = nil)",""],["take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) without any\nimplied order. The order will depend …\n"],["take!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take-21","()","<p>Same as <code>take</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>take!</code> accepts no …\n"],["target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-target","()",""],["teardown_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["telephone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type “tel”.\n\n<pre><code>telephone_field(&quot;user&quot;, &quot;phone&quot;)\n# =&gt; &lt;input id=&quot;user_phone&quot; ...\n</code></pre>\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-template","(source, *args, &block)",""],["template_exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["test","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-test","()",""],["test","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test","()",""],["test_dummy_assets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_assets","()",""],["test_dummy_clean","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_clean","()",""],["test_dummy_config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_config","()",""],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that implements [](attribute) defined which returns an\nArray of Strings …\n"],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name and Model#model_name must return a string with some\nconvenience methods: # <code>:human</code> …\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to <code>persisted?</code>\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to <code>to_key</code>\n<p>Returns an Enumerable of all (primary) key attributes or nil if\n<code>model.persisted?</code> is …\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to <code>to_param</code>\n<p>Returns a string representing the object&#39;s key suitable for use in URLs\nor <code>nil</code> …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Responds to <code>to_partial_path</code>\n<p>Returns a string giving a relative path. This is used for looking up\npartials. …\n"],["tests","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-tests","(mailer)",""],["tests","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["tests","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-tests","(klass)","<p>Sets which generator should be tested:\n\n<pre><code>tests AppGenerator\n</code></pre>\n"],["text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["third","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-third","(*args)","<p>Same as <code>first</code> except returns only the third record.\n"],["third","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-third","()","<p>Find the third record. If no order is defined it will order by primary key.\n\n<pre><code>Person.third # returns the ...\n</code></pre>\n"],["third!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-third-21","()","<p>Same as <code>third</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, options = {})","<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code>\nis fixed to <code>Time.now</code>.\n\n<pre><code>time_ago_in_words(3.minutes.from_now) ...</code></pre>\n"],["time_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-time_field","(object_name, method, options = {})","<p>Returns a text_field of type “time”.\n<p>The default value is generated by trying to call <code>strftime</code> …\n"],["time_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-time_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “time”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["time_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#time_select for form builders:\n\n<pre><code>&lt;%= form_for @race do |f| %&gt;\n  &lt;%= ...</code></pre>\n"],["time_tag","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_tag","(date_or_time, *args, &block)","<p>Returns an HTML time tag for the given date or time.\n\n<pre><code>time_tag Date.today  # =&gt;\n  &lt;time datetime=&quot;2010-11-04&quot;&gt;November ...</code></pre>\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a ActiveSupport::TimeZone …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#time_zone_select for form\nbuilders:\n\n<pre><code>&lt;%= form_for @user do ...</code></pre>\n"],["time_zone_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Returns select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","(options = {})","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table. See SchemaStatements#add_timestamps\n…\n"],["tmp","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-tmp","()",""],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included.\n\n<pre><code>person.errors.add(:name, &quot;can&#39;t ...</code></pre>\n"],["to_a","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-to_a","()",""],["to_a","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_a","()","<p>Converts relation objects to Array.\n"],["to_a","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_a","()",""],["to_ary","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-to_ary","()","<p>Returns a new array of objects from the collection. If the collection\nhasn&#39;t been loaded, it fetches …\n"],["to_ary","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_ary","()",""],["to_ary","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_ary","()",""],["to_date","Mysql::Time","classes/Mysql/Time.html#method-i-to_date","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","(full_messages = false)","<p>Returns a Hash of attributes with their error messages. If\n<code>full_messages</code> is <code>true</code>, it will contain full …\n"],["to_hash","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_hash","()",""],["to_html","Rails::Info","classes/Rails/Info.html#method-c-to_html","()",""],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Array of all key attributes if any is set, regardless if the\nobject is persisted or not.  …\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record&#39;s primary key value wrapped in an Array if one is\navailable.\n"],["to_model","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a <code>string</code> representing the object&#39;s key suitable\nfor use in URLs, or <code>nil</code> if <code>persisted?</code> is …\n"],["to_param","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveRecord::Integration::ClassMethods","classes/ActiveRecord/Integration/ClassMethods.html#method-i-to_param","(method_name = nil)","<p>Defines your model&#39;s <code>to_param</code> method to generate “pretty”\nURLs using <code>method_name</code>, which …\n"],["to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_partial_path","()",""],["to_partial_path","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a <code>string</code> identifying the path associated with the\nobject. ActionPack uses this to find a suitable …\n"],["to_path","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_path","()",""],["to_prepare","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare","(&blk)","<p>Defines generic callbacks to run before #after_initialize. Useful for\nRails::Railtie subclasses.\n"],["to_prepare_blocks","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks","()","<p>Array of callbacks defined by #to_prepare.\n"],["to_s","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_s","()",""],["to_s","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-i-to_s","()",""],["to_s","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-i-to_s","()",""],["to_s","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_s","","<p>Returns the class name.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.to_s # =&gt; ...\n</code></pre>\n"],["to_s","ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/OID/Bit/Data.html#method-i-to_s","()",""],["to_s","Rails::Info","classes/Rails/Info.html#method-c-to_s","()",""],["to_s","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options={})","<p>Returns a representation of the annotation that looks like this:\n\n<pre><code>[126] [TODO] This algorithm is simple ...</code></pre>\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_sql","()","<p>Returns sql statement for the relation.\n\n<pre><code>User.where(name: &#39;Oscar&#39;).to_sql\n# =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...\n</code></pre>\n"],["to_str","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-i-to_str","()",""],["to_str","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_str","","<p>Equivalent to <code>to_s</code>.\n"],["to_xml","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre><code>person.errors.add(:name, &quot;can&#39;t be blank&quot;) ...</code></pre>\n"],["to_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["to_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["toggle","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["touch","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-touch","(*names)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_isolation_levels","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels","()",""],["transaction_open?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F","()",""],["transaction_state","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_state","()",""],["translate","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, options = {})","<p>Delegates to <code>I18n#translate</code> but also performs three additional\nfunctions.\n<p>First, it will ensure that any …\n"],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception_class","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception_class","(e, sql)",""],["truncate","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {}, &block)","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["truncate","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-truncate","(table_name, name = nil)",""],["truncate","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-truncate","(table_name, name = nil)","<p>Executes the truncate statement.\n"],["truncate","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-truncate","(table_name, name = nil)",""],["tsort_each_child","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-tsort_each_child","(initializer, &block)",""],["tsrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsrange","(name, options = {})",""],["tstzrange","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tstzrange","(name, options = {})",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-tsvector","(*args)",""],["type","ActionView::Template","classes/ActionView/Template.html#method-i-type","()",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_config_to_boolean","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean","(config)",""],["type_cast_config_to_integer","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer","(config)",""],["type_to_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/SchemaStatements.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre><code>ActiveModel::Naming.uncountable?(Sheep) ...</code></pre>\n"],["uncountable?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F","()",""],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class.\n\n<pre><code>class Person\n  include ActiveModel::AttributeMethods ...</code></pre>\n"],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/Quoting.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["uniq","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-uniq","()",""],["uniq","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)",""],["uniq_value","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-uniq_value","()","<p><code>uniq</code> and <code>uniq!</code> are silently deprecated.\n<code>uniq_value</code> delegates to <code>distinct_value</code> to\nmaintain backwards …\n"],["unprepared_statement","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement","()",""],["unquoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-unquoted_false","()",""],["unquoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_false","()",""],["unquoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-unquoted_true","()",""],["unquoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-unquoted_true","()",""],["unscope","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-unscope","(*args)","<p>Removes an unwanted relation that is already defined on a chain of\nrelations. This is useful when passing …\n"],["unscoped","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped","()","<p>Returns a scope for the model without the previously set scopes.\n\n<pre><code>class Post &lt; ActiveRecord::Base\n  def ...</code></pre>\n"],["unshift","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-unshift","(*args, &block)",""],["unshift","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-unshift","(*paths)",""],["up","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-up","()",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-update","(params=nil)","<p>PATCH/PUT update\n"],["update!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update-21","(attributes)","<p>Updates its receiver just like <code>update</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is raised\nif the …\n"],["update_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_all","(updates)","<p>Updates all records in the current relation with details given. This method\nconstructs a single SQL  …\n"],["update_attribute","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes","(attributes)",""],["update_attributes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes)",""],["update_column","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],["update_columns","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_columns","(attributes)","<p>Updates the attributes directly in the database issuing an UPDATE SQL\nstatement and sets them in the …\n"],["update_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["url_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type “url”.\n\n<pre><code>url_field(&quot;user&quot;, &quot;homepage&quot;)\n# =&gt; &lt;input id=&quot;user_homepage&quot; ...\n</code></pre>\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionView::RoutingUrlFor","classes/ActionView/RoutingUrlFor.html#method-i-url_for","(options = nil)","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["url_to_asset","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_asset","(source, options = {})",""],["url_to_audio","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_audio","(source, options = {})",""],["url_to_font","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_font","(source, options = {})",""],["url_to_image","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_image","(source, options = {})",""],["url_to_javascript","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_javascript","(source, options = {})",""],["url_to_stylesheet","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_stylesheet","(source, options = {})",""],["url_to_video","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_video","(source, options = {})",""],["usage_path","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-usage_path","()",""],["use","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-use","(*args, &block)",""],["use_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F","()",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["utf8_enforcer_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-utf8_enforcer_tag","()","<p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to\ncustomize the tag.\n"],["uuid","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-uuid","(name, options = {})",""],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns <code>true</code> if no\nerrors were added otherwise <code>false</code>.\n<p>Aliased as …\n"],["valid?","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F","()",""],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, <code>false</code> otherwise. …\n"],["valid_alter_table_type?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_alter_table_type-3F","(type)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-valid_type-3F","(type)",""],["validate","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validate","(context = nil)",""],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-validate","(context = nil)",""],["validate!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-validate-21","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, raises <code>RecordInvalid</code>\n…\n"],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in &#39;Validator&#39;. …\n"],["validates!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validations that cannot be corrected by end\nusers and are considered exceptional. …\n"],["validates_absence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are blank (as defined by\nObject#blank?). Happens by default on …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid. Works\nwith any kind of association. …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre><code>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...</code></pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre><code>class Person ...</code></pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?), and, if the attribute …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n\n<pre><code>class Person ...</code></pre>\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that are being used to validate a specific attribute.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...</code></pre>\n"],["values","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;cannot be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],["values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-values","()",""],["values","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values","()",""],["values_at","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values_at","(*list)",""],["vendor","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor","()",""],["vendor","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-vendor","(filename, data=nil, &block)","<p>Create a new file in the <code>vendor/</code> directory. Code can be\nspecified in a block or a data string can be …\n"],["vendor_javascripts","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_javascripts","()",""],["vendor_stylesheets","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_stylesheets","()",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["version","ActionMailer","classes/ActionMailer.html#method-c-version","()","<p>Returns the version of the currently loaded Action Mailer as a\n<code>Gem::Version</code>.\n"],["version","ActionView","classes/ActionView.html#method-c-version","()","<p>Returns the version of the currently loaded ActionView as a\n<code>Gem::Version</code>\n"],["version","ActiveJob","classes/ActiveJob.html#method-c-version","()","<p>Returns the version of the currently loaded Active Job as a\n<code>Gem::Version</code>\n"],["version","ActiveModel","classes/ActiveModel.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveModel as a\n<code>Gem::Version</code>\n"],["version","ActiveRecord","classes/ActiveRecord.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveRecord as a\n<code>Gem::Version</code>\n"],["version","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-i-version","()",""],["version","Rails","classes/Rails.html#method-c-version","()","<p>Returns the version of the currently loaded Rails as a string.\n"],["version","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-c-version","(name, version, comment = nil)",""],["version","Rails::Generators::AppBase::GemfileEntry","classes/Rails/Generators/AppBase/GemfileEntry.html#method-i-version","()",""],["video_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_path","(source, options = {})","<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],["video_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(*sources)","<p>Returns an HTML video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],["video_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_url","(source, options = {})","<p>Computes the full URL to a video asset in the public videos directory. This\nwill use <code>video_path</code> internally, …\n"],["view_context","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-view_context","()","<p>An instance of a view class. The default view class is ActionView::Base\n<p>The view class must have the following …\n"],["view_context_class","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-view_context_class","()",""],["view_context_class","ActionView::Rendering::ClassMethods","classes/ActionView/Rendering/ClassMethods.html#method-i-view_context_class","()",""],["view_paths","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-view_paths","()","<p>A list of all of the default view paths for this controller.\n"],["view_paths=","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D","(paths)","<p>Whenever setting view paths, makes a copy so that we can manipulate them in\ninstance objects as we wish. …\n"],["view_paths=","ActionView::ViewPaths::ClassMethods","classes/ActionView/ViewPaths/ClassMethods.html#method-i-view_paths-3D","(paths)","<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a PathSet is provided, use that; otherwise, process\nthe parameter …\n"],["view_rendered?","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-view_rendered-3F","(view, expected_locals)",""],["view_renderer","ActionView::Rendering","classes/ActionView/Rendering.html#method-i-view_renderer","()","<p>Returns an object that is able to render templates. :api: private\n"],["visit_AddColumn","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html#method-i-visit_AddColumn","(o)",""],["watchable_dirs","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs","()","<p>Add directories that should be watched for change. The key of the hashes\nshould be directories and the …\n"],["watchable_files","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_files","()","<p>Add files that should be watched for change.\n"],["week_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-week_field","(object_name, method, options = {})","<p>Returns a text_field of type “week”.\n\n<pre><code>week_field(&quot;user&quot;, &quot;born_on&quot;)\n# =&gt; &lt;input id=&quot;user_born_on&quot; ...\n</code></pre>\n"],["week_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-week_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “week”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-where","(opts = :chain, *rest)","<p>Returns a new relation, which is the result of filtering the current\nrelation according to the conditions …\n"],["where_values_hash","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-where_values_hash","(relation_table_name = table_name)","<p>Returns a hash of where conditions.\n\n<pre><code>User.where(name: &#39;Oscar&#39;).where_values_hash\n# =&gt; {name: &quot;Oscar&quot;}\n</code></pre>\n"],["with","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-with","(&block)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block. If no connection\nexists checkout a connection, …\n"],["with_fallbacks","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks","()","<p>Adds fallbacks to the view paths. Useful in cases when you are rendering a\n:file.\n"],["with_lock","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You can pass the SQL locking …\n"],["without_prepared_statement?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-without_prepared_statement-3F","(binds)",""],["word_wrap","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, options = {})","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap_with_namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-wrap_with_namespace","(content)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-write","(name, value, options = nil)",""],["write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_entry","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-write_entry","(key, entry, options)",""],["write_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-write_store_attribute","(store_attribute, key, value)",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQL/ColumnMethods.html#method-i-xml","(*args)",""],["README","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/actionmailer-4_2_5_1/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email service …\n"],["README","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/actionview-4_2_5_1/README_rdoc.html","","<p>Action View\n<p>Action View is a framework for handling view template lookup and rendering,\nand provides view …\n"],["README","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/activejob-4_2_5_1/README_md.html","","<p>Active Job – Make work happen later\n<p>Active Job is a framework for declaring jobs and making them run …\n"],["README","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/activemodel-4_2_5_1/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["README","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/activerecord-4_2_5_1/README_rdoc.html","","<p>Active Record – Object-relational mapping in Rails\n<p>Active Record connects classes to relational database …\n"],["RDOC_MAIN","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/railties-4_2_5_1/RDOC_MAIN_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"],["README","","files/__/__/__/home/home/_rvm/gems/ruby-2_2_1/gems/railties-4_2_5_1/README_rdoc.html","","<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. …\n"]]}}